
Mecanum_wheel_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005294  08005294  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005294  08005294  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005294  08005294  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800529c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000070  0800530c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  0800530c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107d1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000257b  00000000  00000000  00030871  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  00032df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c80  00000000  00000000  00033ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001edef  00000000  00000000  00034828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cea4  00000000  00000000  00053617  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0fee  00000000  00000000  000604bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001114a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef4  00000000  00000000  00111524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005174 	.word	0x08005174

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005174 	.word	0x08005174

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b40      	ldr	r3, [pc, #256]	; (8000398 <MX_GPIO_Init+0x118>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a3f      	ldr	r2, [pc, #252]	; (8000398 <MX_GPIO_Init+0x118>)
 800029c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b3d      	ldr	r3, [pc, #244]	; (8000398 <MX_GPIO_Init+0x118>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b3a      	ldr	r3, [pc, #232]	; (8000398 <MX_GPIO_Init+0x118>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a39      	ldr	r2, [pc, #228]	; (8000398 <MX_GPIO_Init+0x118>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b37      	ldr	r3, [pc, #220]	; (8000398 <MX_GPIO_Init+0x118>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b34      	ldr	r3, [pc, #208]	; (8000398 <MX_GPIO_Init+0x118>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a33      	ldr	r2, [pc, #204]	; (8000398 <MX_GPIO_Init+0x118>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b31      	ldr	r3, [pc, #196]	; (8000398 <MX_GPIO_Init+0x118>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b2e      	ldr	r3, [pc, #184]	; (8000398 <MX_GPIO_Init+0x118>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <MX_GPIO_Init+0x118>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <MX_GPIO_Init+0x118>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Z_DIR_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000300:	f001 f890 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin|Z_STEP_Pin 
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800030a:	4824      	ldr	r0, [pc, #144]	; (800039c <MX_GPIO_Init+0x11c>)
 800030c:	f001 f88a 	bl	8001424 <HAL_GPIO_WritePin>
                          |A_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_STEP_GPIO_Port, A_STEP_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2180      	movs	r1, #128	; 0x80
 8000314:	4822      	ldr	r0, [pc, #136]	; (80003a0 <MX_GPIO_Init+0x120>)
 8000316:	f001 f885 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800031a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000320:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <MX_GPIO_Init+0x124>)
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	4619      	mov	r1, r3
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <MX_GPIO_Init+0x120>)
 8000330:	f000 feee 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Z_DIR_Pin|X_STEP_Pin;
 8000334:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2300      	movs	r3, #0
 8000344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000346:	f107 0314 	add.w	r3, r7, #20
 800034a:	4619      	mov	r1, r3
 800034c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000350:	f000 fede 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin|Z_STEP_Pin 
 8000354:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000358:	617b      	str	r3, [r7, #20]
                          |A_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	2300      	movs	r3, #0
 8000364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	4619      	mov	r1, r3
 800036c:	480b      	ldr	r0, [pc, #44]	; (800039c <MX_GPIO_Init+0x11c>)
 800036e:	f000 fecf 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A_STEP_Pin;
 8000372:	2380      	movs	r3, #128	; 0x80
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000376:	2301      	movs	r3, #1
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037e:	2300      	movs	r3, #0
 8000380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A_STEP_GPIO_Port, &GPIO_InitStruct);
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	4619      	mov	r1, r3
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_GPIO_Init+0x120>)
 800038a:	f000 fec1 	bl	8001110 <HAL_GPIO_Init>

}
 800038e:	bf00      	nop
 8000390:	3728      	adds	r7, #40	; 0x28
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000
 800039c:	48000400 	.word	0x48000400
 80003a0:	48000800 	.word	0x48000800
 80003a4:	10210000 	.word	0x10210000

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 fcd8 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f832 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f7ff ff64 	bl	8000280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003b8:	f000 fb98 	bl	8000aec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80003bc:	f000 fa5a 	bl	8000874 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003c0:	f000 faa6 	bl	8000910 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &incoming_byte, 1);
 80003c4:	2201      	movs	r2, #1
 80003c6:	490e      	ldr	r1, [pc, #56]	; (8000400 <main+0x58>)
 80003c8:	480e      	ldr	r0, [pc, #56]	; (8000404 <main+0x5c>)
 80003ca:	f003 f8e1 	bl	8003590 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80003ce:	480e      	ldr	r0, [pc, #56]	; (8000408 <main+0x60>)
 80003d0:	f002 fbf0 	bl	8002bb4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80003d4:	480d      	ldr	r0, [pc, #52]	; (800040c <main+0x64>)
 80003d6:	f002 fbed 	bl	8002bb4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("goal position x = %d, y = %d, fi = %d\n", goal_pos[0], goal_pos[1], goal_pos[2]);
 80003da:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <main+0x68>)
 80003dc:	881b      	ldrh	r3, [r3, #0]
 80003de:	b21b      	sxth	r3, r3
 80003e0:	4619      	mov	r1, r3
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <main+0x68>)
 80003e4:	885b      	ldrh	r3, [r3, #2]
 80003e6:	b21b      	sxth	r3, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <main+0x68>)
 80003ec:	889b      	ldrh	r3, [r3, #4]
 80003ee:	b21b      	sxth	r3, r3
 80003f0:	4808      	ldr	r0, [pc, #32]	; (8000414 <main+0x6c>)
 80003f2:	f003 ff77 	bl	80042e4 <iprintf>
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  HAL_Delay(200);
 80003f6:	20c8      	movs	r0, #200	; 0xc8
 80003f8:	f000 fd18 	bl	8000e2c <HAL_Delay>
	  printf("goal position x = %d, y = %d, fi = %d\n", goal_pos[0], goal_pos[1], goal_pos[2]);
 80003fc:	e7ed      	b.n	80003da <main+0x32>
 80003fe:	bf00      	nop
 8000400:	200000c8 	.word	0x200000c8
 8000404:	20000154 	.word	0x20000154
 8000408:	20000114 	.word	0x20000114
 800040c:	200000d4 	.word	0x200000d4
 8000410:	200000cc 	.word	0x200000cc
 8000414:	0800518c 	.word	0x0800518c

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b0a6      	sub	sp, #152	; 0x98
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000422:	2228      	movs	r2, #40	; 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f003 ff54 	bl	80042d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2258      	movs	r2, #88	; 0x58
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f003 ff46 	bl	80042d4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000448:	2302      	movs	r3, #2
 800044a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044c:	2301      	movs	r3, #1
 800044e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000450:	2310      	movs	r3, #16
 8000452:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000456:	2302      	movs	r3, #2
 8000458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800045c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000460:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000464:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000472:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000476:	4618      	mov	r0, r3
 8000478:	f001 f806 	bl	8001488 <HAL_RCC_OscConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000482:	f000 f8cf 	bl	8000624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000486:	230f      	movs	r3, #15
 8000488:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048a:	2302      	movs	r3, #2
 800048c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000496:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004a0:	2102      	movs	r1, #2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f001 ff06 	bl	80022b4 <HAL_RCC_ClockConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004ae:	f000 f8b9 	bl	8000624 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <SystemClock_Config+0xc4>)
 80004b4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80004ba:	2300      	movs	r3, #0
 80004bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80004be:	2300      	movs	r3, #0
 80004c0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f002 f92b 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80004d0:	f000 f8a8 	bl	8000624 <Error_Handler>
  }
}
 80004d4:	bf00      	nop
 80004d6:	3798      	adds	r7, #152	; 0x98
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	00300002 	.word	0x00300002

080004e0 <control_loop>:

/* USER CODE BEGIN 4 */
void control_loop()
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	// calculate speed for each wheel
	x_vel = goal_pos[0] - 100;
 80004e4:	4b46      	ldr	r3, [pc, #280]	; (8000600 <control_loop+0x120>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	b21b      	sxth	r3, r3
 80004ea:	3b64      	subs	r3, #100	; 0x64
 80004ec:	4a45      	ldr	r2, [pc, #276]	; (8000604 <control_loop+0x124>)
 80004ee:	6013      	str	r3, [r2, #0]
	y_vel = goal_pos[1] - 100;
 80004f0:	4b43      	ldr	r3, [pc, #268]	; (8000600 <control_loop+0x120>)
 80004f2:	885b      	ldrh	r3, [r3, #2]
 80004f4:	b21b      	sxth	r3, r3
 80004f6:	3b64      	subs	r3, #100	; 0x64
 80004f8:	4a43      	ldr	r2, [pc, #268]	; (8000608 <control_loop+0x128>)
 80004fa:	6013      	str	r3, [r2, #0]
	fi_vel = goal_pos[2] - 100;
 80004fc:	4b40      	ldr	r3, [pc, #256]	; (8000600 <control_loop+0x120>)
 80004fe:	889b      	ldrh	r3, [r3, #4]
 8000500:	b21b      	sxth	r3, r3
 8000502:	3b64      	subs	r3, #100	; 0x64
 8000504:	4a41      	ldr	r2, [pc, #260]	; (800060c <control_loop+0x12c>)
 8000506:	6013      	str	r3, [r2, #0]
	vx = x_vel - y_vel - (L + D)*fi_vel; //forward left v1
 8000508:	4b3e      	ldr	r3, [pc, #248]	; (8000604 <control_loop+0x124>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b3e      	ldr	r3, [pc, #248]	; (8000608 <control_loop+0x128>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	1ad1      	subs	r1, r2, r3
 8000512:	4b3e      	ldr	r3, [pc, #248]	; (800060c <control_loop+0x12c>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4613      	mov	r3, r2
 8000518:	079b      	lsls	r3, r3, #30
 800051a:	1a9b      	subs	r3, r3, r2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	1a9b      	subs	r3, r3, r2
 8000520:	440b      	add	r3, r1
 8000522:	4a3b      	ldr	r2, [pc, #236]	; (8000610 <control_loop+0x130>)
 8000524:	6013      	str	r3, [r2, #0]
	vy = x_vel + y_vel - (L + D)*fi_vel; //back left v2
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <control_loop+0x124>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b37      	ldr	r3, [pc, #220]	; (8000608 <control_loop+0x128>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	18d1      	adds	r1, r2, r3
 8000530:	4b36      	ldr	r3, [pc, #216]	; (800060c <control_loop+0x12c>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4613      	mov	r3, r2
 8000536:	079b      	lsls	r3, r3, #30
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	440b      	add	r3, r1
 8000540:	4a34      	ldr	r2, [pc, #208]	; (8000614 <control_loop+0x134>)
 8000542:	6013      	str	r3, [r2, #0]
	va = x_vel - y_vel + (L + D)*fi_vel; //back right v3
 8000544:	4b2f      	ldr	r3, [pc, #188]	; (8000604 <control_loop+0x124>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <control_loop+0x128>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	1ad1      	subs	r1, r2, r3
 800054e:	4b2f      	ldr	r3, [pc, #188]	; (800060c <control_loop+0x12c>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	4613      	mov	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	440b      	add	r3, r1
 800055a:	4a2f      	ldr	r2, [pc, #188]	; (8000618 <control_loop+0x138>)
 800055c:	6013      	str	r3, [r2, #0]
	vz = x_vel + y_vel + (L + D)*fi_vel; //forward right v4
 800055e:	4b29      	ldr	r3, [pc, #164]	; (8000604 <control_loop+0x124>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b29      	ldr	r3, [pc, #164]	; (8000608 <control_loop+0x128>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	18d1      	adds	r1, r2, r3
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <control_loop+0x12c>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4613      	mov	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	4413      	add	r3, r2
 8000572:	440b      	add	r3, r1
 8000574:	4a29      	ldr	r2, [pc, #164]	; (800061c <control_loop+0x13c>)
 8000576:	6013      	str	r3, [r2, #0]
	// set direction for each wheel
	if(vx < 0)
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <control_loop+0x130>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	da05      	bge.n	800058c <control_loop+0xac>
		HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2110      	movs	r1, #16
 8000584:	4826      	ldr	r0, [pc, #152]	; (8000620 <control_loop+0x140>)
 8000586:	f000 ff4d 	bl	8001424 <HAL_GPIO_WritePin>
 800058a:	e004      	b.n	8000596 <control_loop+0xb6>
	else
		HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	4823      	ldr	r0, [pc, #140]	; (8000620 <control_loop+0x140>)
 8000592:	f000 ff47 	bl	8001424 <HAL_GPIO_WritePin>
	if(vy < 0)
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <control_loop+0x134>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	da06      	bge.n	80005ac <control_loop+0xcc>
		HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	481e      	ldr	r0, [pc, #120]	; (8000620 <control_loop+0x140>)
 80005a6:	f000 ff3d 	bl	8001424 <HAL_GPIO_WritePin>
 80005aa:	e005      	b.n	80005b8 <control_loop+0xd8>
	else
		HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b2:	481b      	ldr	r0, [pc, #108]	; (8000620 <control_loop+0x140>)
 80005b4:	f000 ff36 	bl	8001424 <HAL_GPIO_WritePin>
	if(vz < 0)
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <control_loop+0x13c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	da07      	bge.n	80005d0 <control_loop+0xf0>
		HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f000 ff2b 	bl	8001424 <HAL_GPIO_WritePin>
 80005ce:	e006      	b.n	80005de <control_loop+0xfe>
	else
		HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f000 ff23 	bl	8001424 <HAL_GPIO_WritePin>
	if(va < 0)
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <control_loop+0x138>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	da05      	bge.n	80005f2 <control_loop+0x112>
		HAL_GPIO_WritePin(A_DIR_GPIO_Port, A_DIR_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	480d      	ldr	r0, [pc, #52]	; (8000620 <control_loop+0x140>)
 80005ec:	f000 ff1a 	bl	8001424 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(A_DIR_GPIO_Port, A_DIR_Pin, GPIO_PIN_SET);
}
 80005f0:	e004      	b.n	80005fc <control_loop+0x11c>
		HAL_GPIO_WritePin(A_DIR_GPIO_Port, A_DIR_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2140      	movs	r1, #64	; 0x40
 80005f6:	480a      	ldr	r0, [pc, #40]	; (8000620 <control_loop+0x140>)
 80005f8:	f000 ff14 	bl	8001424 <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000cc 	.word	0x200000cc
 8000604:	200000b0 	.word	0x200000b0
 8000608:	2000009c 	.word	0x2000009c
 800060c:	200000a8 	.word	0x200000a8
 8000610:	200000a0 	.word	0x200000a0
 8000614:	200000ac 	.word	0x200000ac
 8000618:	200000a4 	.word	0x200000a4
 800061c:	20000098 	.word	0x20000098
 8000620:	48000400 	.word	0x48000400

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <HAL_MspInit+0x44>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <HAL_MspInit+0x44>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <HAL_MspInit+0x44>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_MspInit+0x44>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <HAL_MspInit+0x44>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_MspInit+0x44>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800066a:	2007      	movs	r0, #7
 800066c:	f000 fcd0 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 fb8c 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <TIM2_IRQHandler+0x10>)
 80006de:	f002 fa93 	bl	8002c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000114 	.word	0x20000114

080006ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <TIM3_IRQHandler+0x10>)
 80006f2:	f002 fa89 	bl	8002c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000d4 	.word	0x200000d4

08000700 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000704:	4802      	ldr	r0, [pc, #8]	; (8000710 <USART2_IRQHandler+0x10>)
 8000706:	f002 ffe5 	bl	80036d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000154 	.word	0x20000154

08000714 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	e00a      	b.n	800073c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000726:	f3af 8000 	nop.w
 800072a:	4601      	mov	r1, r0
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	60ba      	str	r2, [r7, #8]
 8000732:	b2ca      	uxtb	r2, r1
 8000734:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	3301      	adds	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697a      	ldr	r2, [r7, #20]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	429a      	cmp	r2, r3
 8000742:	dbf0      	blt.n	8000726 <_read+0x12>
	}

return len;
 8000744:	687b      	ldr	r3, [r7, #4]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	e009      	b.n	8000774 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	60ba      	str	r2, [r7, #8]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fa4b 	bl	8000c04 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	3301      	adds	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	429a      	cmp	r2, r3
 800077a:	dbf1      	blt.n	8000760 <_write+0x12>
	}
	return len;
 800077c:	687b      	ldr	r3, [r7, #4]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_close>:

int _close(int file)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
	return -1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ae:	605a      	str	r2, [r3, #4]
	return 0;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <_isatty>:

int _isatty(int file)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
	return 1;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
	return 0;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <_sbrk+0x50>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <_sbrk+0x16>
		heap_end = &end;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <_sbrk+0x50>)
 8000802:	4a10      	ldr	r2, [pc, #64]	; (8000844 <_sbrk+0x54>)
 8000804:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <_sbrk+0x50>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <_sbrk+0x50>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4413      	add	r3, r2
 8000814:	466a      	mov	r2, sp
 8000816:	4293      	cmp	r3, r2
 8000818:	d907      	bls.n	800082a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800081a:	f003 fd31 	bl	8004280 <__errno>
 800081e:	4602      	mov	r2, r0
 8000820:	230c      	movs	r3, #12
 8000822:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	e006      	b.n	8000838 <_sbrk+0x48>
	}

	heap_end += incr;
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <_sbrk+0x50>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	4a03      	ldr	r2, [pc, #12]	; (8000840 <_sbrk+0x50>)
 8000834:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000008c 	.word	0x2000008c
 8000844:	200001e0 	.word	0x200001e0

08000848 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <SystemInit+0x28>)
 800084e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000852:	4a07      	ldr	r2, [pc, #28]	; (8000870 <SystemInit+0x28>)
 8000854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SystemInit+0x28>)
 800085e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000862:	609a      	str	r2, [r3, #8]
#endif
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000892:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_TIM2_Init+0x98>)
 8000894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000898:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_TIM2_Init+0x98>)
 800089c:	f640 620f 	movw	r2, #3599	; 0xe0f
 80008a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_TIM2_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_TIM2_Init+0x98>)
 80008aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80008ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_TIM2_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_TIM2_Init+0x98>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008bc:	4813      	ldr	r0, [pc, #76]	; (800090c <MX_TIM2_Init+0x98>)
 80008be:	f002 f94d 	bl	8002b5c <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008c8:	f7ff feac 	bl	8000624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_TIM2_Init+0x98>)
 80008da:	f002 fab4 	bl	8002e46 <HAL_TIM_ConfigClockSource>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008e4:	f7ff fe9e 	bl	8000624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_TIM2_Init+0x98>)
 80008f6:	f002 fcbf 	bl	8003278 <HAL_TIMEx_MasterConfigSynchronization>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000900:	f7ff fe90 	bl	8000624 <Error_Handler>
  }

}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000114 	.word	0x20000114

08000910 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <MX_TIM3_Init+0x98>)
 8000930:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <MX_TIM3_Init+0x9c>)
 8000932:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3599;
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_TIM3_Init+0x98>)
 8000936:	f640 620f 	movw	r2, #3599	; 0xe0f
 800093a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_TIM3_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_TIM3_Init+0x98>)
 8000944:	f242 720f 	movw	r2, #9999	; 0x270f
 8000948:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_TIM3_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_TIM3_Init+0x98>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000956:	4814      	ldr	r0, [pc, #80]	; (80009a8 <MX_TIM3_Init+0x98>)
 8000958:	f002 f900 	bl	8002b5c <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000962:	f7ff fe5f 	bl	8000624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	480d      	ldr	r0, [pc, #52]	; (80009a8 <MX_TIM3_Init+0x98>)
 8000974:	f002 fa67 	bl	8002e46 <HAL_TIM_ConfigClockSource>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800097e:	f7ff fe51 	bl	8000624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <MX_TIM3_Init+0x98>)
 8000990:	f002 fc72 	bl	8003278 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800099a:	f7ff fe43 	bl	8000624 <Error_Handler>
  }

}
 800099e:	bf00      	nop
 80009a0:	3720      	adds	r7, #32
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000d4 	.word	0x200000d4
 80009ac:	40000400 	.word	0x40000400

080009b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009c0:	d114      	bne.n	80009ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_TIM_Base_MspInit+0x78>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <HAL_TIM_Base_MspInit+0x78>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_TIM_Base_MspInit+0x78>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	201c      	movs	r0, #28
 80009e0:	f000 fb21 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009e4:	201c      	movs	r0, #28
 80009e6:	f000 fb3a 	bl	800105e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80009ea:	e018      	b.n	8000a1e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_TIM_Base_MspInit+0x7c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d113      	bne.n	8000a1e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_TIM_Base_MspInit+0x78>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <HAL_TIM_Base_MspInit+0x78>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_TIM_Base_MspInit+0x78>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	201d      	movs	r0, #29
 8000a14:	f000 fb07 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a18:	201d      	movs	r0, #29
 8000a1a:	f000 fb20 	bl	800105e <HAL_NVIC_EnableIRQ>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40000400 	.word	0x40000400

08000a30 <HAL_TIM_PeriodElapsedCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a40:	d122      	bne.n	8000a88 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		control_loop();
 8000a42:	f7ff fd4d 	bl	80004e0 <control_loop>
		if(vx != 0)
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d01c      	beq.n	8000a88 <HAL_TIM_PeriodElapsedCallback+0x58>
		{
			HAL_GPIO_TogglePin(X_STEP_GPIO_Port, X_STEP_Pin);
 8000a4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a56:	f000 fcfd 	bl	8001454 <HAL_GPIO_TogglePin>
			vx = abs(vx);
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	bfb8      	it	lt
 8000a62:	425b      	neglt	r3, r3
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a66:	6013      	str	r3, [r2, #0]
			TIM2->ARR = (uint32_t)(SystemCoreClock/(vx*(TIM2->PSC + 1)) - 1);
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	3301      	adds	r3, #1
 8000a74:	4919      	ldr	r1, [pc, #100]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a76:	6809      	ldr	r1, [r1, #0]
 8000a78:	fb01 f303 	mul.w	r3, r1, r3
 8000a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a84:	3b01      	subs	r3, #1
 8000a86:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}

	if(htim->Instance == TIM3)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d120      	bne.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0xa4>
	{
		control_loop();
 8000a92:	f7ff fd25 	bl	80004e0 <control_loop>
		if(vy != 0)
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d01a      	beq.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0xa4>
		{
			HAL_GPIO_TogglePin(X_STEP_GPIO_Port, X_STEP_Pin);
 8000a9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f000 fcd5 	bl	8001454 <HAL_GPIO_TogglePin>
			vy = abs(vy);
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bfb8      	it	lt
 8000ab2:	425b      	neglt	r3, r3
 8000ab4:	4a0c      	ldr	r2, [pc, #48]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ab6:	6013      	str	r3, [r2, #0]
			TIM3->ARR = (uint32_t)(SystemCoreClock/(vy*(TIM3->PSC + 1)) - 1);
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	4909      	ldr	r1, [pc, #36]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ac4:	6809      	ldr	r1, [r1, #0]
 8000ac6:	fb01 f303 	mul.w	r3, r1, r3
 8000aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}


}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200000a0 	.word	0x200000a0
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	40000400 	.word	0x40000400
 8000ae8:	200000ac 	.word	0x200000ac

08000aec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <MX_USART2_UART_Init+0x5c>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b30:	f002 fc4c 	bl	80033cc <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f7ff fd73 	bl	8000624 <Error_Handler>
  }

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000154 	.word	0x20000154
 8000b48:	40004400 	.word	0x40004400

08000b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a1b      	ldr	r2, [pc, #108]	; (8000bd8 <HAL_UART_MspInit+0x8c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d130      	bne.n	8000bd0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <HAL_UART_MspInit+0x90>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a1a      	ldr	r2, [pc, #104]	; (8000bdc <HAL_UART_MspInit+0x90>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_UART_MspInit+0x90>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_UART_MspInit+0x90>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <HAL_UART_MspInit+0x90>)
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	6153      	str	r3, [r2, #20]
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_UART_MspInit+0x90>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f000 faa8 	bl	8001110 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2026      	movs	r0, #38	; 0x26
 8000bc6:	f000 fa2e 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bca:	2026      	movs	r0, #38	; 0x26
 8000bcc:	f000 fa47 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */
  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40004400 	.word	0x40004400
 8000bdc:	40021000 	.word	0x40021000

08000be0 <send_char>:
  }
} 

/* USER CODE BEGIN 1 */
void send_char(char c)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t*)&c, 1, 1000);
 8000bea:	1df9      	adds	r1, r7, #7
 8000bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <send_char+0x20>)
 8000bf4:	f002 fc38 	bl	8003468 <HAL_UART_Transmit>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000154 	.word	0x20000154

08000c04 <__io_putchar>:

int __io_putchar(int c)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	if(c == '\n')
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b0a      	cmp	r3, #10
 8000c10:	d102      	bne.n	8000c18 <__io_putchar+0x14>
		send_char('\r');
 8000c12:	200d      	movs	r0, #13
 8000c14:	f7ff ffe4 	bl	8000be0 <send_char>
	send_char(c);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ffdf 	bl	8000be0 <send_char>
	return c;
 8000c22:	687b      	ldr	r3, [r7, #4]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_UART_RxCpltCallback+0x28>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d106      	bne.n	8000c4c <HAL_UART_RxCpltCallback+0x20>
	{
		pc_interface();
 8000c3e:	f000 f80f 	bl	8000c60 <pc_interface>
		HAL_UART_Receive_IT(&huart2, &incoming_byte, 1);
 8000c42:	2201      	movs	r2, #1
 8000c44:	4904      	ldr	r1, [pc, #16]	; (8000c58 <HAL_UART_RxCpltCallback+0x2c>)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_RxCpltCallback+0x30>)
 8000c48:	f002 fca2 	bl	8003590 <HAL_UART_Receive_IT>
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40004400 	.word	0x40004400
 8000c58:	200000c8 	.word	0x200000c8
 8000c5c:	20000154 	.word	0x20000154

08000c60 <pc_interface>:

void pc_interface()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	if ((incoming_byte >= 48) && (incoming_byte <= 57))
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <pc_interface+0x9c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b2f      	cmp	r3, #47	; 0x2f
 8000c6a:	d917      	bls.n	8000c9c <pc_interface+0x3c>
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <pc_interface+0x9c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b39      	cmp	r3, #57	; 0x39
 8000c72:	d813      	bhi.n	8000c9c <pc_interface+0x3c>
		{
			incoming_byte -= 48;
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <pc_interface+0x9c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	3b30      	subs	r3, #48	; 0x30
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <pc_interface+0x9c>)
 8000c7e:	701a      	strb	r2, [r3, #0]
			buff = buff*10 + incoming_byte;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <pc_interface+0xa0>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	0092      	lsls	r2, r2, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <pc_interface+0x9c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <pc_interface+0xa0>)
 8000c98:	701a      	strb	r2, [r3, #0]
		else
		{
			printf("Incorrect input\n");
			buff = 0;
		}
}
 8000c9a:	e02c      	b.n	8000cf6 <pc_interface+0x96>
		else if (incoming_byte == 'x')
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <pc_interface+0x9c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b78      	cmp	r3, #120	; 0x78
 8000ca2:	d108      	bne.n	8000cb6 <pc_interface+0x56>
			goal_pos[0] = buff;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <pc_interface+0xa0>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <pc_interface+0xa4>)
 8000cac:	801a      	strh	r2, [r3, #0]
			buff = 0;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <pc_interface+0xa0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
}
 8000cb4:	e01f      	b.n	8000cf6 <pc_interface+0x96>
		else if (incoming_byte == 'y')
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <pc_interface+0x9c>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b79      	cmp	r3, #121	; 0x79
 8000cbc:	d108      	bne.n	8000cd0 <pc_interface+0x70>
			goal_pos[1] = buff;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <pc_interface+0xa0>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <pc_interface+0xa4>)
 8000cc6:	805a      	strh	r2, [r3, #2]
			buff = 0;
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <pc_interface+0xa0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
}
 8000cce:	e012      	b.n	8000cf6 <pc_interface+0x96>
		else if (incoming_byte == 'f')
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <pc_interface+0x9c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b66      	cmp	r3, #102	; 0x66
 8000cd6:	d108      	bne.n	8000cea <pc_interface+0x8a>
			goal_pos[2] = buff;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <pc_interface+0xa0>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <pc_interface+0xa4>)
 8000ce0:	809a      	strh	r2, [r3, #4]
			buff = 0;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <pc_interface+0xa0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
}
 8000ce8:	e005      	b.n	8000cf6 <pc_interface+0x96>
			printf("Incorrect input\n");
 8000cea:	4807      	ldr	r0, [pc, #28]	; (8000d08 <pc_interface+0xa8>)
 8000cec:	f003 fb6e 	bl	80043cc <puts>
			buff = 0;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <pc_interface+0xa0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000c8 	.word	0x200000c8
 8000d00:	200000c9 	.word	0x200000c9
 8000d04:	200000cc 	.word	0x200000cc
 8000d08:	080051b4 	.word	0x080051b4

08000d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d12:	e003      	b.n	8000d1c <LoopCopyDataInit>

08000d14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d1a:	3104      	adds	r1, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d1c:	480b      	ldr	r0, [pc, #44]	; (8000d4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d24:	d3f6      	bcc.n	8000d14 <CopyDataInit>
	ldr	r2, =_sbss
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d28:	e002      	b.n	8000d30 <LoopFillZerobss>

08000d2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d2c:	f842 3b04 	str.w	r3, [r2], #4

08000d30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <LoopForever+0x16>)
	cmp	r2, r3
 8000d32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d34:	d3f9      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d36:	f7ff fd87 	bl	8000848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f003 faa7 	bl	800428c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3e:	f7ff fb33 	bl	80003a8 <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d44:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000d48:	0800529c 	.word	0x0800529c
	ldr	r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d50:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000d54:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000d58:	200001dc 	.word	0x200001dc

08000d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_2_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_Init+0x28>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_Init+0x28>)
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f94d 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fc5a 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40022000 	.word	0x40022000

08000d8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f965 	bl	800107a <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 f92d 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	200001d4 	.word	0x200001d4

08000e14 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	200001d4 	.word	0x200001d4

08000e2c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_Delay+0x40>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffde 	bl	8000e14 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000008 	.word	0x20000008

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db0b      	blt.n	8000efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <__NVIC_EnableIRQ+0x38>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff29 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff3e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff31 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d005      	beq.n	80010b4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2204      	movs	r2, #4
 80010ac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e027      	b.n	8001104 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 020e 	bic.w	r2, r2, #14
 80010c2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010dc:	2101      	movs	r1, #1
 80010de:	fa01 f202 	lsl.w	r2, r1, r2
 80010e2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	4798      	blx	r3
    } 
  }
  return status;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	e160      	b.n	80013e2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8152 	beq.w	80013dc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x38>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b12      	cmp	r3, #18
 8001146:	d123      	bne.n	8001190 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	6939      	ldr	r1, [r7, #16]
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d00b      	beq.n	80011e4 <HAL_GPIO_Init+0xd4>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d007      	beq.n	80011e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d8:	2b11      	cmp	r3, #17
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b12      	cmp	r3, #18
 80011e2:	d130      	bne.n	8001246 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121a:	2201      	movs	r2, #1
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	f003 0201 	and.w	r2, r3, #1
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80ac 	beq.w	80013dc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001284:	4b5e      	ldr	r3, [pc, #376]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a5d      	ldr	r2, [pc, #372]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800129c:	4a59      	ldr	r2, [pc, #356]	; (8001404 <HAL_GPIO_Init+0x2f4>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c6:	d025      	beq.n	8001314 <HAL_GPIO_Init+0x204>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a4f      	ldr	r2, [pc, #316]	; (8001408 <HAL_GPIO_Init+0x2f8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d01f      	beq.n	8001310 <HAL_GPIO_Init+0x200>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a4e      	ldr	r2, [pc, #312]	; (800140c <HAL_GPIO_Init+0x2fc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d019      	beq.n	800130c <HAL_GPIO_Init+0x1fc>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <HAL_GPIO_Init+0x300>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d013      	beq.n	8001308 <HAL_GPIO_Init+0x1f8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4c      	ldr	r2, [pc, #304]	; (8001414 <HAL_GPIO_Init+0x304>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d00d      	beq.n	8001304 <HAL_GPIO_Init+0x1f4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4b      	ldr	r2, [pc, #300]	; (8001418 <HAL_GPIO_Init+0x308>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d007      	beq.n	8001300 <HAL_GPIO_Init+0x1f0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4a      	ldr	r2, [pc, #296]	; (800141c <HAL_GPIO_Init+0x30c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d101      	bne.n	80012fc <HAL_GPIO_Init+0x1ec>
 80012f8:	2306      	movs	r3, #6
 80012fa:	e00c      	b.n	8001316 <HAL_GPIO_Init+0x206>
 80012fc:	2307      	movs	r3, #7
 80012fe:	e00a      	b.n	8001316 <HAL_GPIO_Init+0x206>
 8001300:	2305      	movs	r3, #5
 8001302:	e008      	b.n	8001316 <HAL_GPIO_Init+0x206>
 8001304:	2304      	movs	r3, #4
 8001306:	e006      	b.n	8001316 <HAL_GPIO_Init+0x206>
 8001308:	2303      	movs	r3, #3
 800130a:	e004      	b.n	8001316 <HAL_GPIO_Init+0x206>
 800130c:	2302      	movs	r3, #2
 800130e:	e002      	b.n	8001316 <HAL_GPIO_Init+0x206>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <HAL_GPIO_Init+0x206>
 8001314:	2300      	movs	r3, #0
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	f002 0203 	and.w	r2, r2, #3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4093      	lsls	r3, r2
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001326:	4937      	ldr	r1, [pc, #220]	; (8001404 <HAL_GPIO_Init+0x2f4>)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001334:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <HAL_GPIO_Init+0x310>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43db      	mvns	r3, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001358:	4a31      	ldr	r2, [pc, #196]	; (8001420 <HAL_GPIO_Init+0x310>)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <HAL_GPIO_Init+0x310>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001382:	4a27      	ldr	r2, [pc, #156]	; (8001420 <HAL_GPIO_Init+0x310>)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <HAL_GPIO_Init+0x310>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013ac:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <HAL_GPIO_Init+0x310>)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <HAL_GPIO_Init+0x310>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <HAL_GPIO_Init+0x310>)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f47f ae97 	bne.w	8001120 <HAL_GPIO_Init+0x10>
  }
}
 80013f2:	bf00      	nop
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000
 8001408:	48000400 	.word	0x48000400
 800140c:	48000800 	.word	0x48000800
 8001410:	48000c00 	.word	0x48000c00
 8001414:	48001000 	.word	0x48001000
 8001418:	48001400 	.word	0x48001400
 800141c:	48001800 	.word	0x48001800
 8001420:	40010400 	.word	0x40010400

08001424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001440:	e002      	b.n	8001448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	041a      	lsls	r2, r3, #16
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001474:	e002      	b.n	800147c <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800148e:	af00      	add	r7, sp, #0
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	f000 bf01 	b.w	80022a4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8160 	beq.w	8001772 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014b2:	4bae      	ldr	r3, [pc, #696]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d00c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014be:	4bab      	ldr	r3, [pc, #684]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d159      	bne.n	800157e <HAL_RCC_OscConfig+0xf6>
 80014ca:	4ba8      	ldr	r3, [pc, #672]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d6:	d152      	bne.n	800157e <HAL_RCC_OscConfig+0xf6>
 80014d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014dc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80014e4:	fa93 f3a3 	rbit	r3, r3
 80014e8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d102      	bne.n	800150a <HAL_RCC_OscConfig+0x82>
 8001504:	4b99      	ldr	r3, [pc, #612]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0xae>
 800150a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800150e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800151e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001522:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001526:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001532:	4b8e      	ldr	r3, [pc, #568]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800153a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800153e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001542:	fa92 f2a2 	rbit	r2, r2
 8001546:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800154a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800154e:	fab2 f282 	clz	r2, r2
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	f042 0220 	orr.w	r2, r2, #32
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	f002 021f 	and.w	r2, r2, #31
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f202 	lsl.w	r2, r1, r2
 8001564:	4013      	ands	r3, r2
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8102 	beq.w	8001770 <HAL_RCC_OscConfig+0x2e8>
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 80fc 	bne.w	8001770 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	f000 be93 	b.w	80022a4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001588:	d106      	bne.n	8001598 <HAL_RCC_OscConfig+0x110>
 800158a:	4b78      	ldr	r3, [pc, #480]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a77      	ldr	r2, [pc, #476]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e030      	b.n	80015fa <HAL_RCC_OscConfig+0x172>
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x134>
 80015a2:	4b72      	ldr	r3, [pc, #456]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a71      	ldr	r2, [pc, #452]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80015a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b6f      	ldr	r3, [pc, #444]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a6e      	ldr	r2, [pc, #440]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80015b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e01e      	b.n	80015fa <HAL_RCC_OscConfig+0x172>
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c6:	d10c      	bne.n	80015e2 <HAL_RCC_OscConfig+0x15a>
 80015c8:	4b68      	ldr	r3, [pc, #416]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a67      	ldr	r2, [pc, #412]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80015ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b65      	ldr	r3, [pc, #404]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a64      	ldr	r2, [pc, #400]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80015da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	e00b      	b.n	80015fa <HAL_RCC_OscConfig+0x172>
 80015e2:	4b62      	ldr	r3, [pc, #392]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a61      	ldr	r2, [pc, #388]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80015e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a5e      	ldr	r2, [pc, #376]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 80015f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d059      	beq.n	80016b8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fc06 	bl	8000e14 <HAL_GetTick>
 8001608:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160e:	f7ff fc01 	bl	8000e14 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d902      	bls.n	8001624 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	f000 be40 	b.w	80022a4 <HAL_RCC_OscConfig+0xe1c>
 8001624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001628:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001638:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163c:	fab3 f383 	clz	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b01      	cmp	r3, #1
 800164e:	d102      	bne.n	8001656 <HAL_RCC_OscConfig+0x1ce>
 8001650:	4b46      	ldr	r3, [pc, #280]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	e015      	b.n	8001682 <HAL_RCC_OscConfig+0x1fa>
 8001656:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800165a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001662:	fa93 f3a3 	rbit	r3, r3
 8001666:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800166a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800166e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001672:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800167e:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001686:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800168a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800168e:	fa92 f2a2 	rbit	r2, r2
 8001692:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001696:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800169a:	fab2 f282 	clz	r2, r2
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	f042 0220 	orr.w	r2, r2, #32
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	f002 021f 	and.w	r2, r2, #31
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0ab      	beq.n	800160e <HAL_RCC_OscConfig+0x186>
 80016b6:	e05c      	b.n	8001772 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fbac 	bl	8000e14 <HAL_GetTick>
 80016bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c2:	f7ff fba7 	bl	8000e14 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d902      	bls.n	80016d8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	f000 bde6 	b.w	80022a4 <HAL_RCC_OscConfig+0xe1c>
 80016d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016dc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80016e4:	fa93 f3a3 	rbit	r3, r3
 80016e8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80016ec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d102      	bne.n	800170a <HAL_RCC_OscConfig+0x282>
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	e015      	b.n	8001736 <HAL_RCC_OscConfig+0x2ae>
 800170a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800171e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001722:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001726:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_RCC_OscConfig+0x2e4>)
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800173a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800173e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001742:	fa92 f2a2 	rbit	r2, r2
 8001746:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800174a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800174e:	fab2 f282 	clz	r2, r2
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	f042 0220 	orr.w	r2, r2, #32
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	f002 021f 	and.w	r2, r2, #31
 800175e:	2101      	movs	r1, #1
 8001760:	fa01 f202 	lsl.w	r2, r1, r2
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1ab      	bne.n	80016c2 <HAL_RCC_OscConfig+0x23a>
 800176a:	e002      	b.n	8001772 <HAL_RCC_OscConfig+0x2ea>
 800176c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8170 	beq.w	8001a62 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001782:	4bd0      	ldr	r3, [pc, #832]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00c      	beq.n	80017a8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800178e:	4bcd      	ldr	r3, [pc, #820]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b08      	cmp	r3, #8
 8001798:	d16d      	bne.n	8001876 <HAL_RCC_OscConfig+0x3ee>
 800179a:	4bca      	ldr	r3, [pc, #808]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80017a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017a6:	d166      	bne.n	8001876 <HAL_RCC_OscConfig+0x3ee>
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80017ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	095b      	lsrs	r3, r3, #5
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d102      	bne.n	80017d8 <HAL_RCC_OscConfig+0x350>
 80017d2:	4bbc      	ldr	r3, [pc, #752]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	e013      	b.n	8001800 <HAL_RCC_OscConfig+0x378>
 80017d8:	2302      	movs	r3, #2
 80017da:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80017e2:	fa93 f3a3 	rbit	r3, r3
 80017e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80017ea:	2302      	movs	r3, #2
 80017ec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017f0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017fc:	4bb1      	ldr	r3, [pc, #708]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	2202      	movs	r2, #2
 8001802:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001806:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800180a:	fa92 f2a2 	rbit	r2, r2
 800180e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001812:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001816:	fab2 f282 	clz	r2, r2
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	f042 0220 	orr.w	r2, r2, #32
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	f002 021f 	and.w	r2, r2, #31
 8001826:	2101      	movs	r1, #1
 8001828:	fa01 f202 	lsl.w	r2, r1, r2
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <HAL_RCC_OscConfig+0x3ba>
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d002      	beq.n	8001842 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	f000 bd31 	b.w	80022a4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001842:	4ba0      	ldr	r3, [pc, #640]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	21f8      	movs	r1, #248	; 0xf8
 8001852:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800185a:	fa91 f1a1 	rbit	r1, r1
 800185e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001862:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001866:	fab1 f181 	clz	r1, r1
 800186a:	b2c9      	uxtb	r1, r1
 800186c:	408b      	lsls	r3, r1
 800186e:	4995      	ldr	r1, [pc, #596]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001874:	e0f5      	b.n	8001a62 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 8085 	beq.w	800198c <HAL_RCC_OscConfig+0x504>
 8001882:	2301      	movs	r3, #1
 8001884:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001894:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	461a      	mov	r2, r3
 80018aa:	2301      	movs	r3, #1
 80018ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fab1 	bl	8000e14 <HAL_GetTick>
 80018b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b8:	f7ff faac 	bl	8000e14 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d902      	bls.n	80018ce <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	f000 bceb 	b.w	80022a4 <HAL_RCC_OscConfig+0xe1c>
 80018ce:	2302      	movs	r3, #2
 80018d0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80018e0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d102      	bne.n	80018fe <HAL_RCC_OscConfig+0x476>
 80018f8:	4b72      	ldr	r3, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	e013      	b.n	8001926 <HAL_RCC_OscConfig+0x49e>
 80018fe:	2302      	movs	r3, #2
 8001900:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001910:	2302      	movs	r3, #2
 8001912:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001916:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001922:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	2202      	movs	r2, #2
 8001928:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800192c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001930:	fa92 f2a2 	rbit	r2, r2
 8001934:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001938:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800193c:	fab2 f282 	clz	r2, r2
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	f042 0220 	orr.w	r2, r2, #32
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	f002 021f 	and.w	r2, r2, #31
 800194c:	2101      	movs	r1, #1
 800194e:	fa01 f202 	lsl.w	r2, r1, r2
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0af      	beq.n	80018b8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001958:	4b5a      	ldr	r3, [pc, #360]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	21f8      	movs	r1, #248	; 0xf8
 8001968:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001970:	fa91 f1a1 	rbit	r1, r1
 8001974:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001978:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800197c:	fab1 f181 	clz	r1, r1
 8001980:	b2c9      	uxtb	r1, r1
 8001982:	408b      	lsls	r3, r1
 8001984:	494f      	ldr	r1, [pc, #316]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
 800198a:	e06a      	b.n	8001a62 <HAL_RCC_OscConfig+0x5da>
 800198c:	2301      	movs	r3, #1
 800198e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800199e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	461a      	mov	r2, r3
 80019b4:	2300      	movs	r3, #0
 80019b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fa2c 	bl	8000e14 <HAL_GetTick>
 80019bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c2:	f7ff fa27 	bl	8000e14 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d902      	bls.n	80019d8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	f000 bc66 	b.w	80022a4 <HAL_RCC_OscConfig+0xe1c>
 80019d8:	2302      	movs	r3, #2
 80019da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80019ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	095b      	lsrs	r3, r3, #5
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d102      	bne.n	8001a08 <HAL_RCC_OscConfig+0x580>
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	e013      	b.n	8001a30 <HAL_RCC_OscConfig+0x5a8>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_RCC_OscConfig+0x63c>)
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	2202      	movs	r2, #2
 8001a32:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a36:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a3a:	fa92 f2a2 	rbit	r2, r2
 8001a3e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001a42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a46:	fab2 f282 	clz	r2, r2
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	f042 0220 	orr.w	r2, r2, #32
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	f002 021f 	and.w	r2, r2, #31
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1af      	bne.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80da 	beq.w	8001c26 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d069      	beq.n	8001b50 <HAL_RCC_OscConfig+0x6c8>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001a8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_OscConfig+0x640>)
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f9b5 	bl	8000e14 <HAL_GetTick>
 8001aaa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	e00d      	b.n	8001acc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff f9b0 	bl	8000e14 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d905      	bls.n	8001acc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e3ef      	b.n	80022a4 <HAL_RCC_OscConfig+0xe1c>
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	10908120 	.word	0x10908120
 8001acc:	2302      	movs	r3, #2
 8001ace:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ad6:	fa93 f2a3 	rbit	r2, r3
 8001ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001afc:	2202      	movs	r2, #2
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b0e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b10:	4ba4      	ldr	r3, [pc, #656]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b14:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b18:	2102      	movs	r1, #2
 8001b1a:	6019      	str	r1, [r3, #0]
 8001b1c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fa93 f1a3 	rbit	r1, r3
 8001b26:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b2a:	6019      	str	r1, [r3, #0]
  return result;
 8001b2c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	2101      	movs	r1, #1
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0b0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x628>
 8001b4e:	e06a      	b.n	8001c26 <HAL_RCC_OscConfig+0x79e>
 8001b50:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	fa93 f2a3 	rbit	r2, r3
 8001b62:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b66:	601a      	str	r2, [r3, #0]
  return result;
 8001b68:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b6c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b8c      	ldr	r3, [pc, #560]	; (8001da8 <HAL_RCC_OscConfig+0x920>)
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	2300      	movs	r3, #0
 8001b80:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b82:	f7ff f947 	bl	8000e14 <HAL_GetTick>
 8001b86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8a:	e009      	b.n	8001ba0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff f942 	bl	8000e14 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e381      	b.n	80022a4 <HAL_RCC_OscConfig+0xe1c>
 8001ba0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fa93 f2a3 	rbit	r2, r3
 8001bca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001be6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be8:	4b6e      	ldr	r3, [pc, #440]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	6019      	str	r1, [r3, #0]
 8001bf4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	fa93 f1a3 	rbit	r1, r3
 8001bfe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c02:	6019      	str	r1, [r3, #0]
  return result;
 8001c04:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1b2      	bne.n	8001b8c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8157 	beq.w	8001ee4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3c:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d112      	bne.n	8001c6e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c48:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	4a55      	ldr	r2, [pc, #340]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c52:	61d3      	str	r3, [r2, #28]
 8001c54:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6e:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <HAL_RCC_OscConfig+0x924>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d11a      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_OscConfig+0x924>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a4b      	ldr	r2, [pc, #300]	; (8001dac <HAL_RCC_OscConfig+0x924>)
 8001c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c86:	f7ff f8c5 	bl	8000e14 <HAL_GetTick>
 8001c8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8e:	e009      	b.n	8001ca4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c90:	f7ff f8c0 	bl	8000e14 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b64      	cmp	r3, #100	; 0x64
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e2ff      	b.n	80022a4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b41      	ldr	r3, [pc, #260]	; (8001dac <HAL_RCC_OscConfig+0x924>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0ef      	beq.n	8001c90 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d106      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x840>
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a39      	ldr	r2, [pc, #228]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	e02f      	b.n	8001d28 <HAL_RCC_OscConfig+0x8a0>
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x864>
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a33      	ldr	r2, [pc, #204]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a30      	ldr	r2, [pc, #192]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	e01d      	b.n	8001d28 <HAL_RCC_OscConfig+0x8a0>
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x888>
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a2a      	ldr	r2, [pc, #168]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6213      	str	r3, [r2, #32]
 8001d02:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0x8a0>
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a23      	ldr	r2, [pc, #140]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a20      	ldr	r2, [pc, #128]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001d22:	f023 0304 	bic.w	r3, r3, #4
 8001d26:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d06a      	beq.n	8001e08 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d32:	f7ff f86f 	bl	8000e14 <HAL_GetTick>
 8001d36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f86a 	bl	8000e14 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e2a7      	b.n	80022a4 <HAL_RCC_OscConfig+0xe1c>
 8001d54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d58:	2202      	movs	r2, #2
 8001d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d70:	2202      	movs	r2, #2
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	fa93 f2a3 	rbit	r2, r3
 8001d7e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d82:	601a      	str	r2, [r3, #0]
  return result;
 8001d84:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d88:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	095b      	lsrs	r3, r3, #5
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d108      	bne.n	8001db0 <HAL_RCC_OscConfig+0x928>
 8001d9e:	4b01      	ldr	r3, [pc, #4]	; (8001da4 <HAL_RCC_OscConfig+0x91c>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	e013      	b.n	8001dcc <HAL_RCC_OscConfig+0x944>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	10908120 	.word	0x10908120
 8001dac:	40007000 	.word	0x40007000
 8001db0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001db4:	2202      	movs	r2, #2
 8001db6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	fa93 f2a3 	rbit	r2, r3
 8001dc2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	4bc0      	ldr	r3, [pc, #768]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	6011      	str	r1, [r2, #0]
 8001dd4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	fa92 f1a2 	rbit	r1, r2
 8001dde:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001de2:	6011      	str	r1, [r2, #0]
  return result;
 8001de4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f002 021f 	and.w	r2, r2, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d09a      	beq.n	8001d3c <HAL_RCC_OscConfig+0x8b4>
 8001e06:	e063      	b.n	8001ed0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e08:	f7ff f804 	bl	8000e14 <HAL_GetTick>
 8001e0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e10:	e00b      	b.n	8001e2a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7fe ffff 	bl	8000e14 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e23c      	b.n	80022a4 <HAL_RCC_OscConfig+0xe1c>
 8001e2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e2e:	2202      	movs	r2, #2
 8001e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e46:	2202      	movs	r2, #2
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	fa93 f2a3 	rbit	r2, r3
 8001e54:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e58:	601a      	str	r2, [r3, #0]
  return result;
 8001e5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_OscConfig+0x9f2>
 8001e74:	4b95      	ldr	r3, [pc, #596]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	e00d      	b.n	8001e96 <HAL_RCC_OscConfig+0xa0e>
 8001e7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e7e:	2202      	movs	r2, #2
 8001e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fa93 f2a3 	rbit	r2, r3
 8001e8c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	4b8e      	ldr	r3, [pc, #568]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	6011      	str	r1, [r2, #0]
 8001e9e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	fa92 f1a2 	rbit	r1, r2
 8001ea8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001eac:	6011      	str	r1, [r2, #0]
  return result;
 8001eae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	fab2 f282 	clz	r2, r2
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	f002 021f 	and.w	r2, r2, #31
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1a0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ed0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed8:	4b7c      	ldr	r3, [pc, #496]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	4a7b      	ldr	r2, [pc, #492]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 8001ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 81d9 	beq.w	80022a2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef0:	4b76      	ldr	r3, [pc, #472]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	f000 81a6 	beq.w	800224a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	f040 811e 	bne.w	8002146 <HAL_RCC_OscConfig+0xcbe>
 8001f0a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	fa93 f2a3 	rbit	r2, r3
 8001f1e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f22:	601a      	str	r2, [r3, #0]
  return result;
 8001f24:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f28:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7fe ff68 	bl	8000e14 <HAL_GetTick>
 8001f44:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f48:	e009      	b.n	8001f5e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7fe ff63 	bl	8000e14 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1a2      	b.n	80022a4 <HAL_RCC_OscConfig+0xe1c>
 8001f5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fa93 f2a3 	rbit	r2, r3
 8001f72:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f76:	601a      	str	r2, [r3, #0]
  return result;
 8001f78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <HAL_RCC_OscConfig+0xb10>
 8001f92:	4b4e      	ldr	r3, [pc, #312]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	e01b      	b.n	8001fd0 <HAL_RCC_OscConfig+0xb48>
 8001f98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	fa93 f2a3 	rbit	r2, r3
 8001fac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001fd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fd8:	6011      	str	r1, [r2, #0]
 8001fda:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	fa92 f1a2 	rbit	r1, r2
 8001fe4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fe8:	6011      	str	r1, [r2, #0]
  return result;
 8001fea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	fab2 f282 	clz	r2, r2
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f042 0220 	orr.w	r2, r2, #32
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	f002 021f 	and.w	r2, r2, #31
 8002000:	2101      	movs	r1, #1
 8002002:	fa01 f202 	lsl.w	r2, r1, r2
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d19e      	bne.n	8001f4a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200c:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	f023 020f 	bic.w	r2, r3, #15
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	492c      	ldr	r1, [pc, #176]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 800201c:	4313      	orrs	r3, r2
 800201e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002020:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6a19      	ldr	r1, [r3, #32]
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	430b      	orrs	r3, r1
 8002036:	4925      	ldr	r1, [pc, #148]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
 800203c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002040:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fa93 f2a3 	rbit	r2, r3
 8002050:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002054:	601a      	str	r2, [r3, #0]
  return result;
 8002056:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800205a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002066:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	461a      	mov	r2, r3
 800206e:	2301      	movs	r3, #1
 8002070:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7fe fecf 	bl	8000e14 <HAL_GetTick>
 8002076:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800207a:	e009      	b.n	8002090 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207c:	f7fe feca 	bl	8000e14 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e109      	b.n	80022a4 <HAL_RCC_OscConfig+0xe1c>
 8002090:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	fa93 f2a3 	rbit	r2, r3
 80020a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020a8:	601a      	str	r2, [r3, #0]
  return result;
 80020aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <HAL_RCC_OscConfig+0xc48>
 80020c4:	4b01      	ldr	r3, [pc, #4]	; (80020cc <HAL_RCC_OscConfig+0xc44>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	e01e      	b.n	8002108 <HAL_RCC_OscConfig+0xc80>
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fa93 f2a3 	rbit	r2, r3
 80020e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	fa93 f2a3 	rbit	r2, r3
 80020fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	4b6a      	ldr	r3, [pc, #424]	; (80022b0 <HAL_RCC_OscConfig+0xe28>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800210c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002110:	6011      	str	r1, [r2, #0]
 8002112:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	fa92 f1a2 	rbit	r1, r2
 800211c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002120:	6011      	str	r1, [r2, #0]
  return result;
 8002122:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	fab2 f282 	clz	r2, r2
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	f042 0220 	orr.w	r2, r2, #32
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	f002 021f 	and.w	r2, r2, #31
 8002138:	2101      	movs	r1, #1
 800213a:	fa01 f202 	lsl.w	r2, r1, r2
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d09b      	beq.n	800207c <HAL_RCC_OscConfig+0xbf4>
 8002144:	e0ad      	b.n	80022a2 <HAL_RCC_OscConfig+0xe1a>
 8002146:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800214a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800214e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	fa93 f2a3 	rbit	r2, r3
 800215a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800215e:	601a      	str	r2, [r3, #0]
  return result;
 8002160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002164:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002170:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	461a      	mov	r2, r3
 8002178:	2300      	movs	r3, #0
 800217a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe fe4a 	bl	8000e14 <HAL_GetTick>
 8002180:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002184:	e009      	b.n	800219a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002186:	f7fe fe45 	bl	8000e14 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e084      	b.n	80022a4 <HAL_RCC_OscConfig+0xe1c>
 800219a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b2:	601a      	str	r2, [r3, #0]
  return result;
 80021b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d102      	bne.n	80021d4 <HAL_RCC_OscConfig+0xd4c>
 80021ce:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_RCC_OscConfig+0xe28>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	e01b      	b.n	800220c <HAL_RCC_OscConfig+0xd84>
 80021d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fa93 f2a3 	rbit	r2, r3
 80021e8:	f107 0320 	add.w	r3, r7, #32
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f107 031c 	add.w	r3, r7, #28
 80021f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f2a3 	rbit	r2, r3
 8002202:	f107 0318 	add.w	r3, r7, #24
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_RCC_OscConfig+0xe28>)
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	f107 0214 	add.w	r2, r7, #20
 8002210:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002214:	6011      	str	r1, [r2, #0]
 8002216:	f107 0214 	add.w	r2, r7, #20
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	fa92 f1a2 	rbit	r1, r2
 8002220:	f107 0210 	add.w	r2, r7, #16
 8002224:	6011      	str	r1, [r2, #0]
  return result;
 8002226:	f107 0210 	add.w	r2, r7, #16
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	fab2 f282 	clz	r2, r2
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	f042 0220 	orr.w	r2, r2, #32
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	f002 021f 	and.w	r2, r2, #31
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f202 	lsl.w	r2, r1, r2
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d19e      	bne.n	8002186 <HAL_RCC_OscConfig+0xcfe>
 8002248:	e02b      	b.n	80022a2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e025      	b.n	80022a4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_RCC_OscConfig+0xe28>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <HAL_RCC_OscConfig+0xe28>)
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002268:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800226c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	429a      	cmp	r2, r3
 8002278:	d111      	bne.n	800229e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800227a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800227e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002288:	429a      	cmp	r2, r3
 800228a:	d108      	bne.n	800229e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800228c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002290:	f003 020f 	and.w	r2, r3, #15
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000

080022b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b09e      	sub	sp, #120	; 0x78
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e162      	b.n	8002592 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022cc:	4b90      	ldr	r3, [pc, #576]	; (8002510 <HAL_RCC_ClockConfig+0x25c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d910      	bls.n	80022fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b8d      	ldr	r3, [pc, #564]	; (8002510 <HAL_RCC_ClockConfig+0x25c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 0207 	bic.w	r2, r3, #7
 80022e2:	498b      	ldr	r1, [pc, #556]	; (8002510 <HAL_RCC_ClockConfig+0x25c>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b89      	ldr	r3, [pc, #548]	; (8002510 <HAL_RCC_ClockConfig+0x25c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e14a      	b.n	8002592 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002308:	4b82      	ldr	r3, [pc, #520]	; (8002514 <HAL_RCC_ClockConfig+0x260>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	497f      	ldr	r1, [pc, #508]	; (8002514 <HAL_RCC_ClockConfig+0x260>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80dc 	beq.w	80024e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d13c      	bne.n	80023aa <HAL_RCC_ClockConfig+0xf6>
 8002330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002334:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800233e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d102      	bne.n	800235a <HAL_RCC_ClockConfig+0xa6>
 8002354:	4b6f      	ldr	r3, [pc, #444]	; (8002514 <HAL_RCC_ClockConfig+0x260>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	e00f      	b.n	800237a <HAL_RCC_ClockConfig+0xc6>
 800235a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800235e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	667b      	str	r3, [r7, #100]	; 0x64
 8002368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236c:	663b      	str	r3, [r7, #96]	; 0x60
 800236e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002376:	4b67      	ldr	r3, [pc, #412]	; (8002514 <HAL_RCC_ClockConfig+0x260>)
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800237e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002380:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002382:	fa92 f2a2 	rbit	r2, r2
 8002386:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002388:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800238a:	fab2 f282 	clz	r2, r2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f042 0220 	orr.w	r2, r2, #32
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f002 021f 	and.w	r2, r2, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d17b      	bne.n	800249e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0f3      	b.n	8002592 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d13c      	bne.n	800242c <HAL_RCC_ClockConfig+0x178>
 80023b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d102      	bne.n	80023dc <HAL_RCC_ClockConfig+0x128>
 80023d6:	4b4f      	ldr	r3, [pc, #316]	; (8002514 <HAL_RCC_ClockConfig+0x260>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	e00f      	b.n	80023fc <HAL_RCC_ClockConfig+0x148>
 80023dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	647b      	str	r3, [r7, #68]	; 0x44
 80023ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ee:	643b      	str	r3, [r7, #64]	; 0x40
 80023f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f8:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_RCC_ClockConfig+0x260>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002400:	63ba      	str	r2, [r7, #56]	; 0x38
 8002402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800240a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	f042 0220 	orr.w	r2, r2, #32
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	f002 021f 	and.w	r2, r2, #31
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f202 	lsl.w	r2, r1, r2
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d13a      	bne.n	800249e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0b2      	b.n	8002592 <HAL_RCC_ClockConfig+0x2de>
 800242c:	2302      	movs	r3, #2
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d102      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1a0>
 800244e:	4b31      	ldr	r3, [pc, #196]	; (8002514 <HAL_RCC_ClockConfig+0x260>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	e00d      	b.n	8002470 <HAL_RCC_ClockConfig+0x1bc>
 8002454:	2302      	movs	r3, #2
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	2302      	movs	r3, #2
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_RCC_ClockConfig+0x260>)
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2202      	movs	r2, #2
 8002472:	61ba      	str	r2, [r7, #24]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	fa92 f2a2 	rbit	r2, r2
 800247a:	617a      	str	r2, [r7, #20]
  return result;
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	fab2 f282 	clz	r2, r2
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	f042 0220 	orr.w	r2, r2, #32
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f002 021f 	and.w	r2, r2, #31
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f202 	lsl.w	r2, r1, r2
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e079      	b.n	8002592 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCC_ClockConfig+0x260>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f023 0203 	bic.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	491a      	ldr	r1, [pc, #104]	; (8002514 <HAL_RCC_ClockConfig+0x260>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b0:	f7fe fcb0 	bl	8000e14 <HAL_GetTick>
 80024b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b8:	f7fe fcac 	bl	8000e14 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e061      	b.n	8002592 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_RCC_ClockConfig+0x260>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 020c 	and.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1eb      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_ClockConfig+0x25c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d214      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_RCC_ClockConfig+0x25c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 0207 	bic.w	r2, r3, #7
 80024f6:	4906      	ldr	r1, [pc, #24]	; (8002510 <HAL_RCC_ClockConfig+0x25c>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <HAL_RCC_ClockConfig+0x25c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e040      	b.n	8002592 <HAL_RCC_ClockConfig+0x2de>
 8002510:	40022000 	.word	0x40022000
 8002514:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002524:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_RCC_ClockConfig+0x2e8>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	491a      	ldr	r1, [pc, #104]	; (800259c <HAL_RCC_ClockConfig+0x2e8>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <HAL_RCC_ClockConfig+0x2e8>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4912      	ldr	r1, [pc, #72]	; (800259c <HAL_RCC_ClockConfig+0x2e8>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002556:	f000 f829 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 800255a:	4601      	mov	r1, r0
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <HAL_RCC_ClockConfig+0x2e8>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002564:	22f0      	movs	r2, #240	; 0xf0
 8002566:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	fa92 f2a2 	rbit	r2, r2
 800256e:	60fa      	str	r2, [r7, #12]
  return result;
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	fab2 f282 	clz	r2, r2
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	40d3      	lsrs	r3, r2
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x2ec>)
 800257c:	5cd3      	ldrb	r3, [r2, r3]
 800257e:	fa21 f303 	lsr.w	r3, r1, r3
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_RCC_ClockConfig+0x2f0>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_RCC_ClockConfig+0x2f4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fbfe 	bl	8000d8c <HAL_InitTick>
  
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3778      	adds	r7, #120	; 0x78
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	080051c4 	.word	0x080051c4
 80025a4:	20000000 	.word	0x20000000
 80025a8:	20000004 	.word	0x20000004

080025ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b08b      	sub	sp, #44	; 0x2c
 80025b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80025c6:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x30>
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x36>
 80025da:	e03f      	b.n	800265c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025de:	623b      	str	r3, [r7, #32]
      break;
 80025e0:	e03f      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	fa92 f2a2 	rbit	r2, r2
 80025f4:	607a      	str	r2, [r7, #4]
  return result;
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	fab2 f282 	clz	r2, r2
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	40d3      	lsrs	r3, r2
 8002600:	4a1d      	ldr	r2, [pc, #116]	; (8002678 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002606:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	220f      	movs	r2, #15
 8002610:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	fa92 f2a2 	rbit	r2, r2
 8002618:	60fa      	str	r2, [r7, #12]
  return result;
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	fab2 f282 	clz	r2, r2
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	40d3      	lsrs	r3, r2
 8002624:	4a15      	ldr	r2, [pc, #84]	; (800267c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002634:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	fbb2 f2f3 	udiv	r2, r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
 8002644:	e007      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002646:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fbb2 f2f3 	udiv	r2, r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	623b      	str	r3, [r7, #32]
      break;
 800265a:	e002      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetSysClockFreq+0xc8>)
 800265e:	623b      	str	r3, [r7, #32]
      break;
 8002660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002662:	6a3b      	ldr	r3, [r7, #32]
}
 8002664:	4618      	mov	r0, r3
 8002666:	372c      	adds	r7, #44	; 0x2c
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	40021000 	.word	0x40021000
 8002674:	007a1200 	.word	0x007a1200
 8002678:	080051dc 	.word	0x080051dc
 800267c:	080051ec 	.word	0x080051ec

08002680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCC_GetHCLKFreq+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800269e:	f7ff ffef 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026a2:	4601      	mov	r1, r0
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	fa92 f2a2 	rbit	r2, r2
 80026b8:	603a      	str	r2, [r7, #0]
  return result;
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	fab2 f282 	clz	r2, r2
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	40d3      	lsrs	r3, r2
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	080051d4 	.word	0x080051d4

080026dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026e2:	f7ff ffcd 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026e6:	4601      	mov	r1, r0
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	fa92 f2a2 	rbit	r2, r2
 80026fc:	603a      	str	r2, [r7, #0]
  return result;
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	fab2 f282 	clz	r2, r2
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	40d3      	lsrs	r3, r2
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_RCC_GetPCLK2Freq+0x40>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	080051d4 	.word	0x080051d4

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b092      	sub	sp, #72	; 0x48
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80d7 	beq.w	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002744:	4b4e      	ldr	r3, [pc, #312]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10e      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	4a4a      	ldr	r2, [pc, #296]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275a:	61d3      	str	r3, [r2, #28]
 800275c:	4b48      	ldr	r3, [pc, #288]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b45      	ldr	r3, [pc, #276]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d118      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a41      	ldr	r2, [pc, #260]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7fe fb45 	bl	8000e14 <HAL_GetTick>
 800278a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	e008      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278e:	f7fe fb41 	bl	8000e14 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b64      	cmp	r3, #100	; 0x64
 800279a:	d901      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e1d6      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	4b38      	ldr	r3, [pc, #224]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8084 	beq.w	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d07c      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027cc:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	461a      	mov	r2, r3
 80027f6:	2301      	movs	r3, #1
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	461a      	mov	r2, r3
 800281a:	2300      	movs	r3, #0
 800281c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800281e:	4a18      	ldr	r2, [pc, #96]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002822:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d04b      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7fe faf1 	bl	8000e14 <HAL_GetTick>
 8002832:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe faed 	bl	8000e14 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e180      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800284c:	2302      	movs	r3, #2
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
 8002858:	2302      	movs	r3, #2
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	61fb      	str	r3, [r7, #28]
  return result;
 8002864:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d108      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800287a:	4b01      	ldr	r3, [pc, #4]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	e00d      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
 8002888:	10908100 	.word	0x10908100
 800288c:	2302      	movs	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	4ba0      	ldr	r3, [pc, #640]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	2202      	movs	r2, #2
 800289e:	613a      	str	r2, [r7, #16]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	fa92 f2a2 	rbit	r2, r2
 80028a6:	60fa      	str	r2, [r7, #12]
  return result;
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	fab2 f282 	clz	r2, r2
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f002 021f 	and.w	r2, r2, #31
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0b7      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028c6:	4b95      	ldr	r3, [pc, #596]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4992      	ldr	r1, [pc, #584]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b8e      	ldr	r3, [pc, #568]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	4a8d      	ldr	r2, [pc, #564]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028f8:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f023 0203 	bic.w	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4985      	ldr	r1, [pc, #532]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002906:	4313      	orrs	r3, r2
 8002908:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002916:	4b81      	ldr	r3, [pc, #516]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	497e      	ldr	r1, [pc, #504]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002924:	4313      	orrs	r3, r2
 8002926:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002934:	4b79      	ldr	r3, [pc, #484]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	4976      	ldr	r1, [pc, #472]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002952:	4b72      	ldr	r3, [pc, #456]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f023 0210 	bic.w	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	496f      	ldr	r1, [pc, #444]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002970:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297c:	4967      	ldr	r1, [pc, #412]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f023 0220 	bic.w	r2, r3, #32
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4960      	ldr	r1, [pc, #384]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800299c:	4313      	orrs	r3, r2
 800299e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ac:	4b5b      	ldr	r3, [pc, #364]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	4958      	ldr	r1, [pc, #352]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029ca:	4b54      	ldr	r3, [pc, #336]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4951      	ldr	r1, [pc, #324]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029e8:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	4949      	ldr	r1, [pc, #292]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a06:	4b45      	ldr	r3, [pc, #276]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4942      	ldr	r1, [pc, #264]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a24:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	493a      	ldr	r1, [pc, #232]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a42:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	4933      	ldr	r1, [pc, #204]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a60:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6c:	492b      	ldr	r1, [pc, #172]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a7e:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	4924      	ldr	r1, [pc, #144]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	491c      	ldr	r1, [pc, #112]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac6:	4915      	ldr	r1, [pc, #84]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae4:	490d      	ldr	r1, [pc, #52]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b02:	4906      	ldr	r1, [pc, #24]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00c      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b14:	4b01      	ldr	r3, [pc, #4]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	e002      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b28:	490b      	ldr	r1, [pc, #44]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	4904      	ldr	r1, [pc, #16]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3748      	adds	r7, #72	; 0x48
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000

08002b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e01d      	b.n	8002baa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fd ff14 	bl	80009b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3304      	adds	r3, #4
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	f000 fa34 	bl	8003008 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_TIM_Base_Start_IT+0x50>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_TIM_Base_Start_IT+0x42>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d007      	beq.n	8002bf6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0201 	orr.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	00010007 	.word	0x00010007

08002c08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0202 	mvn.w	r2, #2
 8002c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f9be 	bl	8002fcc <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f9b0 	bl	8002fb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f9c1 	bl	8002fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d122      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0204 	mvn.w	r2, #4
 8002c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f994 	bl	8002fcc <HAL_TIM_IC_CaptureCallback>
 8002ca4:	e005      	b.n	8002cb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f986 	bl	8002fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f997 	bl	8002fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d122      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d11b      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0208 	mvn.w	r2, #8
 8002cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f96a 	bl	8002fcc <HAL_TIM_IC_CaptureCallback>
 8002cf8:	e005      	b.n	8002d06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f95c 	bl	8002fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f96d 	bl	8002fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d122      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d11b      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0210 	mvn.w	r2, #16
 8002d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2208      	movs	r2, #8
 8002d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f940 	bl	8002fcc <HAL_TIM_IC_CaptureCallback>
 8002d4c:	e005      	b.n	8002d5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f932 	bl	8002fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f943 	bl	8002fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d10e      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d107      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0201 	mvn.w	r2, #1
 8002d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fe52 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b80      	cmp	r3, #128	; 0x80
 8002d98:	d10e      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d107      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 faf6 	bl	80033a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc6:	d10e      	bne.n	8002de6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	2b80      	cmp	r3, #128	; 0x80
 8002dd4:	d107      	bne.n	8002de6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fae9 	bl	80033b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d10e      	bne.n	8002e12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	2b40      	cmp	r3, #64	; 0x40
 8002e00:	d107      	bne.n	8002e12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f8f1 	bl	8002ff4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d10e      	bne.n	8002e3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d107      	bne.n	8002e3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f06f 0220 	mvn.w	r2, #32
 8002e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 faa9 	bl	8003390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_ConfigClockSource+0x18>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0a8      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x16a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e80:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e88:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b40      	cmp	r3, #64	; 0x40
 8002e98:	d067      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x124>
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d80b      	bhi.n	8002eb6 <HAL_TIM_ConfigClockSource+0x70>
 8002e9e:	2b10      	cmp	r3, #16
 8002ea0:	d073      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x144>
 8002ea2:	2b10      	cmp	r3, #16
 8002ea4:	d802      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x66>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d06f      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002eaa:	e078      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d06c      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x144>
 8002eb0:	2b30      	cmp	r3, #48	; 0x30
 8002eb2:	d06a      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002eb4:	e073      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002eb6:	2b70      	cmp	r3, #112	; 0x70
 8002eb8:	d00d      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x90>
 8002eba:	2b70      	cmp	r3, #112	; 0x70
 8002ebc:	d804      	bhi.n	8002ec8 <HAL_TIM_ConfigClockSource+0x82>
 8002ebe:	2b50      	cmp	r3, #80	; 0x50
 8002ec0:	d033      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0xe4>
 8002ec2:	2b60      	cmp	r3, #96	; 0x60
 8002ec4:	d041      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002ec6:	e06a      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ecc:	d066      	beq.n	8002f9c <HAL_TIM_ConfigClockSource+0x156>
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed2:	d017      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002ed4:	e063      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f000 f9a7 	bl	8003238 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ef8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	609a      	str	r2, [r3, #8]
      break;
 8002f02:	e04c      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6899      	ldr	r1, [r3, #8]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f000 f990 	bl	8003238 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f26:	609a      	str	r2, [r3, #8]
      break;
 8002f28:	e039      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f000 f904 	bl	8003144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2150      	movs	r1, #80	; 0x50
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f95d 	bl	8003202 <TIM_ITRx_SetConfig>
      break;
 8002f48:	e029      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6859      	ldr	r1, [r3, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f000 f923 	bl	80031a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2160      	movs	r1, #96	; 0x60
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f94d 	bl	8003202 <TIM_ITRx_SetConfig>
      break;
 8002f68:	e019      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f000 f8e4 	bl	8003144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2140      	movs	r1, #64	; 0x40
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f93d 	bl	8003202 <TIM_ITRx_SetConfig>
      break;
 8002f88:	e009      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4619      	mov	r1, r3
 8002f94:	4610      	mov	r0, r2
 8002f96:	f000 f934 	bl	8003202 <TIM_ITRx_SetConfig>
      break;
 8002f9a:	e000      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002f9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a42      	ldr	r2, [pc, #264]	; (8003124 <TIM_Base_SetConfig+0x11c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003026:	d00f      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a3f      	ldr	r2, [pc, #252]	; (8003128 <TIM_Base_SetConfig+0x120>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00b      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a3e      	ldr	r2, [pc, #248]	; (800312c <TIM_Base_SetConfig+0x124>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d007      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a3d      	ldr	r2, [pc, #244]	; (8003130 <TIM_Base_SetConfig+0x128>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a3c      	ldr	r2, [pc, #240]	; (8003134 <TIM_Base_SetConfig+0x12c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d108      	bne.n	800305a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a31      	ldr	r2, [pc, #196]	; (8003124 <TIM_Base_SetConfig+0x11c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01f      	beq.n	80030a2 <TIM_Base_SetConfig+0x9a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003068:	d01b      	beq.n	80030a2 <TIM_Base_SetConfig+0x9a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a2e      	ldr	r2, [pc, #184]	; (8003128 <TIM_Base_SetConfig+0x120>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d017      	beq.n	80030a2 <TIM_Base_SetConfig+0x9a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a2d      	ldr	r2, [pc, #180]	; (800312c <TIM_Base_SetConfig+0x124>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <TIM_Base_SetConfig+0x9a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2c      	ldr	r2, [pc, #176]	; (8003130 <TIM_Base_SetConfig+0x128>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00f      	beq.n	80030a2 <TIM_Base_SetConfig+0x9a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <TIM_Base_SetConfig+0x130>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00b      	beq.n	80030a2 <TIM_Base_SetConfig+0x9a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a2b      	ldr	r2, [pc, #172]	; (800313c <TIM_Base_SetConfig+0x134>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d007      	beq.n	80030a2 <TIM_Base_SetConfig+0x9a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a2a      	ldr	r2, [pc, #168]	; (8003140 <TIM_Base_SetConfig+0x138>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d003      	beq.n	80030a2 <TIM_Base_SetConfig+0x9a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a25      	ldr	r2, [pc, #148]	; (8003134 <TIM_Base_SetConfig+0x12c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d108      	bne.n	80030b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a12      	ldr	r2, [pc, #72]	; (8003124 <TIM_Base_SetConfig+0x11c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d013      	beq.n	8003108 <TIM_Base_SetConfig+0x100>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a13      	ldr	r2, [pc, #76]	; (8003130 <TIM_Base_SetConfig+0x128>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00f      	beq.n	8003108 <TIM_Base_SetConfig+0x100>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a13      	ldr	r2, [pc, #76]	; (8003138 <TIM_Base_SetConfig+0x130>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00b      	beq.n	8003108 <TIM_Base_SetConfig+0x100>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <TIM_Base_SetConfig+0x134>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d007      	beq.n	8003108 <TIM_Base_SetConfig+0x100>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a11      	ldr	r2, [pc, #68]	; (8003140 <TIM_Base_SetConfig+0x138>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d003      	beq.n	8003108 <TIM_Base_SetConfig+0x100>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <TIM_Base_SetConfig+0x12c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d103      	bne.n	8003110 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	615a      	str	r2, [r3, #20]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40012c00 	.word	0x40012c00
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800
 8003130:	40013400 	.word	0x40013400
 8003134:	40015000 	.word	0x40015000
 8003138:	40014000 	.word	0x40014000
 800313c:	40014400 	.word	0x40014400
 8003140:	40014800 	.word	0x40014800

08003144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f023 0201 	bic.w	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800316e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f023 030a 	bic.w	r3, r3, #10
 8003180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	621a      	str	r2, [r3, #32]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b087      	sub	sp, #28
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f023 0210 	bic.w	r2, r3, #16
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	031b      	lsls	r3, r3, #12
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	621a      	str	r2, [r3, #32]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003202:	b480      	push	{r7}
 8003204:	b085      	sub	sp, #20
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	f043 0307 	orr.w	r3, r3, #7
 8003224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	609a      	str	r2, [r3, #8]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	021a      	lsls	r2, r3, #8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	431a      	orrs	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4313      	orrs	r3, r2
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	609a      	str	r2, [r3, #8]
}
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800328c:	2302      	movs	r3, #2
 800328e:	e06d      	b.n	800336c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a30      	ldr	r2, [pc, #192]	; (8003378 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d009      	beq.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a2f      	ldr	r2, [pc, #188]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a2d      	ldr	r2, [pc, #180]	; (8003380 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d108      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80032d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d01d      	beq.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330c:	d018      	beq.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1a      	ldr	r2, [pc, #104]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a15      	ldr	r2, [pc, #84]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d009      	beq.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a16      	ldr	r2, [pc, #88]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a11      	ldr	r2, [pc, #68]	; (8003380 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d10c      	bne.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003346:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	4313      	orrs	r3, r2
 8003350:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40013400 	.word	0x40013400
 8003380:	40015000 	.word	0x40015000
 8003384:	40000400 	.word	0x40000400
 8003388:	40000800 	.word	0x40000800
 800338c:	40014000 	.word	0x40014000

08003390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e040      	b.n	8003460 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fbac 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2224      	movs	r2, #36	; 0x24
 80033f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fabc 	bl	8003988 <UART_SetConfig>
 8003410:	4603      	mov	r3, r0
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e022      	b.n	8003460 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fcca 	bl	8003dbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fd51 	bl	8003f00 <UART_CheckIdleState>
 800345e:	4603      	mov	r3, r0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347c:	2b20      	cmp	r3, #32
 800347e:	f040 8081 	bne.w	8003584 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_UART_Transmit+0x26>
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e079      	b.n	8003586 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_UART_Transmit+0x38>
 800349c:	2302      	movs	r3, #2
 800349e:	e072      	b.n	8003586 <HAL_UART_Transmit+0x11e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2221      	movs	r2, #33	; 0x21
 80034b2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80034b4:	f7fd fcae 	bl	8000e14 <HAL_GetTick>
 80034b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	88fa      	ldrh	r2, [r7, #6]
 80034c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d2:	d108      	bne.n	80034e6 <HAL_UART_Transmit+0x7e>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d104      	bne.n	80034e6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	e003      	b.n	80034ee <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034ee:	e02d      	b.n	800354c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2200      	movs	r2, #0
 80034f8:	2180      	movs	r1, #128	; 0x80
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fd45 	bl	8003f8a <UART_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e03d      	b.n	8003586 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10b      	bne.n	8003528 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	881a      	ldrh	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351c:	b292      	uxth	r2, r2
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	3302      	adds	r3, #2
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	e008      	b.n	800353a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	781a      	ldrb	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	b292      	uxth	r2, r2
 8003532:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	3301      	adds	r3, #1
 8003538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1cb      	bne.n	80034f0 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2200      	movs	r2, #0
 8003560:	2140      	movs	r1, #64	; 0x40
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fd11 	bl	8003f8a <UART_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e009      	b.n	8003586 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	f040 808a 	bne.w	80036bc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_UART_Receive_IT+0x24>
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e082      	b.n	80036be <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Receive_IT+0x36>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e07b      	b.n	80036be <HAL_UART_Receive_IT+0x12e>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	88fa      	ldrh	r2, [r7, #6]
 80035d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f2:	d10e      	bne.n	8003612 <HAL_UART_Receive_IT+0x82>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d105      	bne.n	8003608 <HAL_UART_Receive_IT+0x78>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003602:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003606:	e02d      	b.n	8003664 <HAL_UART_Receive_IT+0xd4>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	22ff      	movs	r2, #255	; 0xff
 800360c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003610:	e028      	b.n	8003664 <HAL_UART_Receive_IT+0xd4>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <HAL_UART_Receive_IT+0xa6>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <HAL_UART_Receive_IT+0x9c>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	22ff      	movs	r2, #255	; 0xff
 8003626:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800362a:	e01b      	b.n	8003664 <HAL_UART_Receive_IT+0xd4>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	227f      	movs	r2, #127	; 0x7f
 8003630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003634:	e016      	b.n	8003664 <HAL_UART_Receive_IT+0xd4>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800363e:	d10d      	bne.n	800365c <HAL_UART_Receive_IT+0xcc>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d104      	bne.n	8003652 <HAL_UART_Receive_IT+0xc2>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	227f      	movs	r2, #127	; 0x7f
 800364c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003650:	e008      	b.n	8003664 <HAL_UART_Receive_IT+0xd4>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	223f      	movs	r2, #63	; 0x3f
 8003656:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800365a:	e003      	b.n	8003664 <HAL_UART_Receive_IT+0xd4>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2222      	movs	r2, #34	; 0x22
 800366e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003688:	d107      	bne.n	800369a <HAL_UART_Receive_IT+0x10a>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a0d      	ldr	r2, [pc, #52]	; (80036cc <HAL_UART_Receive_IT+0x13c>)
 8003696:	661a      	str	r2, [r3, #96]	; 0x60
 8003698:	e002      	b.n	80036a0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a0c      	ldr	r2, [pc, #48]	; (80036d0 <HAL_UART_Receive_IT+0x140>)
 800369e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80036b6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	080041c5 	.word	0x080041c5
 80036d0:	0800411f 	.word	0x0800411f

080036d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d113      	bne.n	800372c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00e      	beq.n	800372c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d009      	beq.n	800372c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8114 	beq.w	800394a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
      }
      return;
 800372a:	e10e      	b.n	800394a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80d6 	beq.w	80038e0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d105      	bne.n	800374a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80cb 	beq.w	80038e0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00e      	beq.n	8003772 <HAL_UART_IRQHandler+0x9e>
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2201      	movs	r2, #1
 8003764:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00e      	beq.n	800379a <HAL_UART_IRQHandler+0xc6>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2202      	movs	r2, #2
 800378c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003792:	f043 0204 	orr.w	r2, r3, #4
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00e      	beq.n	80037c2 <HAL_UART_IRQHandler+0xee>
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2204      	movs	r2, #4
 80037b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ba:	f043 0202 	orr.w	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d104      	bne.n	80037e0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d009      	beq.n	80037f4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2208      	movs	r2, #8
 80037e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ec:	f043 0208 	orr.w	r2, r3, #8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00f      	beq.n	800381e <HAL_UART_IRQHandler+0x14a>
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003816:	f043 0220 	orr.w	r2, r3, #32
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8093 	beq.w	800394e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00c      	beq.n	800384c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003850:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d004      	beq.n	800386a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003866:	2b00      	cmp	r3, #0
 8003868:	d031      	beq.n	80038ce <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fc08 	bl	8004080 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d123      	bne.n	80038c6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d013      	beq.n	80038be <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389a:	4a30      	ldr	r2, [pc, #192]	; (800395c <HAL_UART_IRQHandler+0x288>)
 800389c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd fbf5 	bl	8001092 <HAL_DMA_Abort_IT>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80038b8:	4610      	mov	r0, r2
 80038ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038bc:	e00e      	b.n	80038dc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f858 	bl	8003974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c4:	e00a      	b.n	80038dc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f854 	bl	8003974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038cc:	e006      	b.n	80038dc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f850 	bl	8003974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80038da:	e038      	b.n	800394e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	bf00      	nop
    return;
 80038de:	e036      	b.n	800394e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <HAL_UART_IRQHandler+0x232>
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fcb3 	bl	800426a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003904:	e026      	b.n	8003954 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800391e:	2b00      	cmp	r3, #0
 8003920:	d017      	beq.n	8003952 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
    }
    return;
 800392a:	e012      	b.n	8003952 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00e      	beq.n	8003954 <HAL_UART_IRQHandler+0x280>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d009      	beq.n	8003954 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fbd3 	bl	80040ec <UART_EndTransmit_IT>
    return;
 8003946:	bf00      	nop
 8003948:	e004      	b.n	8003954 <HAL_UART_IRQHandler+0x280>
      return;
 800394a:	bf00      	nop
 800394c:	e002      	b.n	8003954 <HAL_UART_IRQHandler+0x280>
    return;
 800394e:	bf00      	nop
 8003950:	e000      	b.n	8003954 <HAL_UART_IRQHandler+0x280>
    return;
 8003952:	bf00      	nop
  }

}
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	080040c1 	.word	0x080040c1

08003960 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003990:	2300      	movs	r3, #0
 8003992:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4bac      	ldr	r3, [pc, #688]	; (8003c68 <UART_SetConfig+0x2e0>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	6939      	ldr	r1, [r7, #16]
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a9a      	ldr	r2, [pc, #616]	; (8003c6c <UART_SetConfig+0x2e4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d121      	bne.n	8003a4c <UART_SetConfig+0xc4>
 8003a08:	4b99      	ldr	r3, [pc, #612]	; (8003c70 <UART_SetConfig+0x2e8>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d817      	bhi.n	8003a44 <UART_SetConfig+0xbc>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <UART_SetConfig+0x94>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a39 	.word	0x08003a39
 8003a24:	08003a3f 	.word	0x08003a3f
 8003a28:	08003a33 	.word	0x08003a33
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e0b2      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a32:	2302      	movs	r3, #2
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e0af      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e0ac      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a3e:	2308      	movs	r3, #8
 8003a40:	77fb      	strb	r3, [r7, #31]
 8003a42:	e0a9      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a44:	2310      	movs	r3, #16
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	bf00      	nop
 8003a4a:	e0a5      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a88      	ldr	r2, [pc, #544]	; (8003c74 <UART_SetConfig+0x2ec>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d123      	bne.n	8003a9e <UART_SetConfig+0x116>
 8003a56:	4b86      	ldr	r3, [pc, #536]	; (8003c70 <UART_SetConfig+0x2e8>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a62:	d012      	beq.n	8003a8a <UART_SetConfig+0x102>
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a68:	d802      	bhi.n	8003a70 <UART_SetConfig+0xe8>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <UART_SetConfig+0xf6>
 8003a6e:	e012      	b.n	8003a96 <UART_SetConfig+0x10e>
 8003a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a74:	d00c      	beq.n	8003a90 <UART_SetConfig+0x108>
 8003a76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a7a:	d003      	beq.n	8003a84 <UART_SetConfig+0xfc>
 8003a7c:	e00b      	b.n	8003a96 <UART_SetConfig+0x10e>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e089      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a84:	2302      	movs	r3, #2
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e086      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	e083      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a90:	2308      	movs	r3, #8
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e080      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a96:	2310      	movs	r3, #16
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	bf00      	nop
 8003a9c:	e07c      	b.n	8003b98 <UART_SetConfig+0x210>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a75      	ldr	r2, [pc, #468]	; (8003c78 <UART_SetConfig+0x2f0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d123      	bne.n	8003af0 <UART_SetConfig+0x168>
 8003aa8:	4b71      	ldr	r3, [pc, #452]	; (8003c70 <UART_SetConfig+0x2e8>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003ab0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ab4:	d012      	beq.n	8003adc <UART_SetConfig+0x154>
 8003ab6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aba:	d802      	bhi.n	8003ac2 <UART_SetConfig+0x13a>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <UART_SetConfig+0x148>
 8003ac0:	e012      	b.n	8003ae8 <UART_SetConfig+0x160>
 8003ac2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ac6:	d00c      	beq.n	8003ae2 <UART_SetConfig+0x15a>
 8003ac8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003acc:	d003      	beq.n	8003ad6 <UART_SetConfig+0x14e>
 8003ace:	e00b      	b.n	8003ae8 <UART_SetConfig+0x160>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e060      	b.n	8003b98 <UART_SetConfig+0x210>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e05d      	b.n	8003b98 <UART_SetConfig+0x210>
 8003adc:	2304      	movs	r3, #4
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e05a      	b.n	8003b98 <UART_SetConfig+0x210>
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e057      	b.n	8003b98 <UART_SetConfig+0x210>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	bf00      	nop
 8003aee:	e053      	b.n	8003b98 <UART_SetConfig+0x210>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a61      	ldr	r2, [pc, #388]	; (8003c7c <UART_SetConfig+0x2f4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d123      	bne.n	8003b42 <UART_SetConfig+0x1ba>
 8003afa:	4b5d      	ldr	r3, [pc, #372]	; (8003c70 <UART_SetConfig+0x2e8>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b06:	d012      	beq.n	8003b2e <UART_SetConfig+0x1a6>
 8003b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0c:	d802      	bhi.n	8003b14 <UART_SetConfig+0x18c>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <UART_SetConfig+0x19a>
 8003b12:	e012      	b.n	8003b3a <UART_SetConfig+0x1b2>
 8003b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b18:	d00c      	beq.n	8003b34 <UART_SetConfig+0x1ac>
 8003b1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b1e:	d003      	beq.n	8003b28 <UART_SetConfig+0x1a0>
 8003b20:	e00b      	b.n	8003b3a <UART_SetConfig+0x1b2>
 8003b22:	2300      	movs	r3, #0
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e037      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e034      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b2e:	2304      	movs	r3, #4
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e031      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b34:	2308      	movs	r3, #8
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e02e      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	bf00      	nop
 8003b40:	e02a      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a4e      	ldr	r2, [pc, #312]	; (8003c80 <UART_SetConfig+0x2f8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d123      	bne.n	8003b94 <UART_SetConfig+0x20c>
 8003b4c:	4b48      	ldr	r3, [pc, #288]	; (8003c70 <UART_SetConfig+0x2e8>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b58:	d012      	beq.n	8003b80 <UART_SetConfig+0x1f8>
 8003b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b5e:	d802      	bhi.n	8003b66 <UART_SetConfig+0x1de>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <UART_SetConfig+0x1ec>
 8003b64:	e012      	b.n	8003b8c <UART_SetConfig+0x204>
 8003b66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b6a:	d00c      	beq.n	8003b86 <UART_SetConfig+0x1fe>
 8003b6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b70:	d003      	beq.n	8003b7a <UART_SetConfig+0x1f2>
 8003b72:	e00b      	b.n	8003b8c <UART_SetConfig+0x204>
 8003b74:	2300      	movs	r3, #0
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e00e      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	77fb      	strb	r3, [r7, #31]
 8003b7e:	e00b      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b80:	2304      	movs	r3, #4
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	e008      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b86:	2308      	movs	r3, #8
 8003b88:	77fb      	strb	r3, [r7, #31]
 8003b8a:	e005      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	bf00      	nop
 8003b92:	e001      	b.n	8003b98 <UART_SetConfig+0x210>
 8003b94:	2310      	movs	r3, #16
 8003b96:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba0:	f040 8090 	bne.w	8003cc4 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003ba4:	7ffb      	ldrb	r3, [r7, #31]
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d86c      	bhi.n	8003c84 <UART_SetConfig+0x2fc>
 8003baa:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <UART_SetConfig+0x228>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003bd5 	.word	0x08003bd5
 8003bb4:	08003bf5 	.word	0x08003bf5
 8003bb8:	08003c15 	.word	0x08003c15
 8003bbc:	08003c85 	.word	0x08003c85
 8003bc0:	08003c31 	.word	0x08003c31
 8003bc4:	08003c85 	.word	0x08003c85
 8003bc8:	08003c85 	.word	0x08003c85
 8003bcc:	08003c85 	.word	0x08003c85
 8003bd0:	08003c51 	.word	0x08003c51
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd4:	f7fe fd60 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8003bd8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	005a      	lsls	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	441a      	add	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	61bb      	str	r3, [r7, #24]
        break;
 8003bf2:	e04a      	b.n	8003c8a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7fe fd72 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8003bf8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	005a      	lsls	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	441a      	add	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	61bb      	str	r3, [r7, #24]
        break;
 8003c12:	e03a      	b.n	8003c8a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003c1e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6852      	ldr	r2, [r2, #4]
 8003c26:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	61bb      	str	r3, [r7, #24]
        break;
 8003c2e:	e02c      	b.n	8003c8a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c30:	f7fe fcbc 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8003c34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	005a      	lsls	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	441a      	add	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	61bb      	str	r3, [r7, #24]
        break;
 8003c4e:	e01c      	b.n	8003c8a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	61bb      	str	r3, [r7, #24]
        break;
 8003c66:	e010      	b.n	8003c8a <UART_SetConfig+0x302>
 8003c68:	efff69f3 	.word	0xefff69f3
 8003c6c:	40013800 	.word	0x40013800
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40004400 	.word	0x40004400
 8003c78:	40004800 	.word	0x40004800
 8003c7c:	40004c00 	.word	0x40004c00
 8003c80:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
        break;
 8003c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b0f      	cmp	r3, #15
 8003c8e:	d916      	bls.n	8003cbe <UART_SetConfig+0x336>
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c96:	d212      	bcs.n	8003cbe <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f023 030f 	bic.w	r3, r3, #15
 8003ca0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	897b      	ldrh	r3, [r7, #10]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	897a      	ldrh	r2, [r7, #10]
 8003cba:	60da      	str	r2, [r3, #12]
 8003cbc:	e072      	b.n	8003da4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
 8003cc2:	e06f      	b.n	8003da4 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003cc4:	7ffb      	ldrb	r3, [r7, #31]
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d85b      	bhi.n	8003d82 <UART_SetConfig+0x3fa>
 8003cca:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <UART_SetConfig+0x348>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	08003d13 	.word	0x08003d13
 8003cd8:	08003d31 	.word	0x08003d31
 8003cdc:	08003d83 	.word	0x08003d83
 8003ce0:	08003d4d 	.word	0x08003d4d
 8003ce4:	08003d83 	.word	0x08003d83
 8003ce8:	08003d83 	.word	0x08003d83
 8003cec:	08003d83 	.word	0x08003d83
 8003cf0:	08003d6b 	.word	0x08003d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf4:	f7fe fcd0 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8003cf8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	085a      	lsrs	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	441a      	add	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	61bb      	str	r3, [r7, #24]
        break;
 8003d10:	e03a      	b.n	8003d88 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d12:	f7fe fce3 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8003d16:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	085a      	lsrs	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	441a      	add	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	61bb      	str	r3, [r7, #24]
        break;
 8003d2e:	e02b      	b.n	8003d88 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003d3a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6852      	ldr	r2, [r2, #4]
 8003d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	61bb      	str	r3, [r7, #24]
        break;
 8003d4a:	e01d      	b.n	8003d88 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4c:	f7fe fc2e 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8003d50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	085a      	lsrs	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	441a      	add	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	61bb      	str	r3, [r7, #24]
        break;
 8003d68:	e00e      	b.n	8003d88 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	61bb      	str	r3, [r7, #24]
        break;
 8003d80:	e002      	b.n	8003d88 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	75fb      	strb	r3, [r7, #23]
        break;
 8003d86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b0f      	cmp	r3, #15
 8003d8c:	d908      	bls.n	8003da0 <UART_SetConfig+0x418>
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d204      	bcs.n	8003da0 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	60da      	str	r2, [r3, #12]
 8003d9e:	e001      	b.n	8003da4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3720      	adds	r7, #32
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop

08003dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01a      	beq.n	8003ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eba:	d10a      	bne.n	8003ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	605a      	str	r2, [r3, #4]
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f0e:	f7fc ff81 	bl	8000e14 <HAL_GetTick>
 8003f12:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d10e      	bne.n	8003f40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f82a 	bl	8003f8a <UART_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e020      	b.n	8003f82 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d10e      	bne.n	8003f6c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f814 	bl	8003f8a <UART_WaitOnFlagUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e00a      	b.n	8003f82 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	4613      	mov	r3, r2
 8003f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9a:	e05d      	b.n	8004058 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa2:	d059      	beq.n	8004058 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa4:	f7fc ff36 	bl	8000e14 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d302      	bcc.n	8003fba <UART_WaitOnFlagUntilTimeout+0x30>
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d11b      	bne.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fc8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e042      	b.n	8004078 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d02b      	beq.n	8004058 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800400a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400e:	d123      	bne.n	8004058 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004018:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004028:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e00f      	b.n	8004078 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4013      	ands	r3, r2
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	429a      	cmp	r2, r3
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	461a      	mov	r2, r3
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	429a      	cmp	r2, r3
 8004074:	d092      	beq.n	8003f9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004096:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f7ff fc48 	bl	8003974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e4:	bf00      	nop
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004102:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff fc25 	bl	8003960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800412c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004132:	2b22      	cmp	r3, #34	; 0x22
 8004134:	d13a      	bne.n	80041ac <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800413c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800413e:	89bb      	ldrh	r3, [r7, #12]
 8004140:	b2d9      	uxtb	r1, r3
 8004142:	89fb      	ldrh	r3, [r7, #14]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	400a      	ands	r2, r1
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d121      	bne.n	80041bc <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004186:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7fc fd41 	bl	8000c2c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041aa:	e007      	b.n	80041bc <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0208 	orr.w	r2, r2, #8
 80041ba:	619a      	str	r2, [r3, #24]
}
 80041bc:	bf00      	nop
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041d2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041d8:	2b22      	cmp	r3, #34	; 0x22
 80041da:	d13a      	bne.n	8004252 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80041e2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80041ea:	89ba      	ldrh	r2, [r7, #12]
 80041ec:	89fb      	ldrh	r3, [r7, #14]
 80041ee:	4013      	ands	r3, r2
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	1c9a      	adds	r2, r3, #2
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d121      	bne.n	8004262 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800422c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0201 	bic.w	r2, r2, #1
 800423c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fc fcee 	bl	8000c2c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004250:	e007      	b.n	8004262 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0208 	orr.w	r2, r2, #8
 8004260:	619a      	str	r2, [r3, #24]
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <__errno>:
 8004280:	4b01      	ldr	r3, [pc, #4]	; (8004288 <__errno+0x8>)
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	2000000c 	.word	0x2000000c

0800428c <__libc_init_array>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	4e0d      	ldr	r6, [pc, #52]	; (80042c4 <__libc_init_array+0x38>)
 8004290:	4c0d      	ldr	r4, [pc, #52]	; (80042c8 <__libc_init_array+0x3c>)
 8004292:	1ba4      	subs	r4, r4, r6
 8004294:	10a4      	asrs	r4, r4, #2
 8004296:	2500      	movs	r5, #0
 8004298:	42a5      	cmp	r5, r4
 800429a:	d109      	bne.n	80042b0 <__libc_init_array+0x24>
 800429c:	4e0b      	ldr	r6, [pc, #44]	; (80042cc <__libc_init_array+0x40>)
 800429e:	4c0c      	ldr	r4, [pc, #48]	; (80042d0 <__libc_init_array+0x44>)
 80042a0:	f000 ff68 	bl	8005174 <_init>
 80042a4:	1ba4      	subs	r4, r4, r6
 80042a6:	10a4      	asrs	r4, r4, #2
 80042a8:	2500      	movs	r5, #0
 80042aa:	42a5      	cmp	r5, r4
 80042ac:	d105      	bne.n	80042ba <__libc_init_array+0x2e>
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042b4:	4798      	blx	r3
 80042b6:	3501      	adds	r5, #1
 80042b8:	e7ee      	b.n	8004298 <__libc_init_array+0xc>
 80042ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042be:	4798      	blx	r3
 80042c0:	3501      	adds	r5, #1
 80042c2:	e7f2      	b.n	80042aa <__libc_init_array+0x1e>
 80042c4:	08005294 	.word	0x08005294
 80042c8:	08005294 	.word	0x08005294
 80042cc:	08005294 	.word	0x08005294
 80042d0:	08005298 	.word	0x08005298

080042d4 <memset>:
 80042d4:	4402      	add	r2, r0
 80042d6:	4603      	mov	r3, r0
 80042d8:	4293      	cmp	r3, r2
 80042da:	d100      	bne.n	80042de <memset+0xa>
 80042dc:	4770      	bx	lr
 80042de:	f803 1b01 	strb.w	r1, [r3], #1
 80042e2:	e7f9      	b.n	80042d8 <memset+0x4>

080042e4 <iprintf>:
 80042e4:	b40f      	push	{r0, r1, r2, r3}
 80042e6:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <iprintf+0x2c>)
 80042e8:	b513      	push	{r0, r1, r4, lr}
 80042ea:	681c      	ldr	r4, [r3, #0]
 80042ec:	b124      	cbz	r4, 80042f8 <iprintf+0x14>
 80042ee:	69a3      	ldr	r3, [r4, #24]
 80042f0:	b913      	cbnz	r3, 80042f8 <iprintf+0x14>
 80042f2:	4620      	mov	r0, r4
 80042f4:	f000 fa22 	bl	800473c <__sinit>
 80042f8:	ab05      	add	r3, sp, #20
 80042fa:	9a04      	ldr	r2, [sp, #16]
 80042fc:	68a1      	ldr	r1, [r4, #8]
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	4620      	mov	r0, r4
 8004302:	f000 fbdb 	bl	8004abc <_vfiprintf_r>
 8004306:	b002      	add	sp, #8
 8004308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800430c:	b004      	add	sp, #16
 800430e:	4770      	bx	lr
 8004310:	2000000c 	.word	0x2000000c

08004314 <_puts_r>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	460e      	mov	r6, r1
 8004318:	4605      	mov	r5, r0
 800431a:	b118      	cbz	r0, 8004324 <_puts_r+0x10>
 800431c:	6983      	ldr	r3, [r0, #24]
 800431e:	b90b      	cbnz	r3, 8004324 <_puts_r+0x10>
 8004320:	f000 fa0c 	bl	800473c <__sinit>
 8004324:	69ab      	ldr	r3, [r5, #24]
 8004326:	68ac      	ldr	r4, [r5, #8]
 8004328:	b913      	cbnz	r3, 8004330 <_puts_r+0x1c>
 800432a:	4628      	mov	r0, r5
 800432c:	f000 fa06 	bl	800473c <__sinit>
 8004330:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <_puts_r+0xac>)
 8004332:	429c      	cmp	r4, r3
 8004334:	d117      	bne.n	8004366 <_puts_r+0x52>
 8004336:	686c      	ldr	r4, [r5, #4]
 8004338:	89a3      	ldrh	r3, [r4, #12]
 800433a:	071b      	lsls	r3, r3, #28
 800433c:	d51d      	bpl.n	800437a <_puts_r+0x66>
 800433e:	6923      	ldr	r3, [r4, #16]
 8004340:	b1db      	cbz	r3, 800437a <_puts_r+0x66>
 8004342:	3e01      	subs	r6, #1
 8004344:	68a3      	ldr	r3, [r4, #8]
 8004346:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800434a:	3b01      	subs	r3, #1
 800434c:	60a3      	str	r3, [r4, #8]
 800434e:	b9e9      	cbnz	r1, 800438c <_puts_r+0x78>
 8004350:	2b00      	cmp	r3, #0
 8004352:	da2e      	bge.n	80043b2 <_puts_r+0x9e>
 8004354:	4622      	mov	r2, r4
 8004356:	210a      	movs	r1, #10
 8004358:	4628      	mov	r0, r5
 800435a:	f000 f83f 	bl	80043dc <__swbuf_r>
 800435e:	3001      	adds	r0, #1
 8004360:	d011      	beq.n	8004386 <_puts_r+0x72>
 8004362:	200a      	movs	r0, #10
 8004364:	e011      	b.n	800438a <_puts_r+0x76>
 8004366:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <_puts_r+0xb0>)
 8004368:	429c      	cmp	r4, r3
 800436a:	d101      	bne.n	8004370 <_puts_r+0x5c>
 800436c:	68ac      	ldr	r4, [r5, #8]
 800436e:	e7e3      	b.n	8004338 <_puts_r+0x24>
 8004370:	4b15      	ldr	r3, [pc, #84]	; (80043c8 <_puts_r+0xb4>)
 8004372:	429c      	cmp	r4, r3
 8004374:	bf08      	it	eq
 8004376:	68ec      	ldreq	r4, [r5, #12]
 8004378:	e7de      	b.n	8004338 <_puts_r+0x24>
 800437a:	4621      	mov	r1, r4
 800437c:	4628      	mov	r0, r5
 800437e:	f000 f87f 	bl	8004480 <__swsetup_r>
 8004382:	2800      	cmp	r0, #0
 8004384:	d0dd      	beq.n	8004342 <_puts_r+0x2e>
 8004386:	f04f 30ff 	mov.w	r0, #4294967295
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	2b00      	cmp	r3, #0
 800438e:	da04      	bge.n	800439a <_puts_r+0x86>
 8004390:	69a2      	ldr	r2, [r4, #24]
 8004392:	429a      	cmp	r2, r3
 8004394:	dc06      	bgt.n	80043a4 <_puts_r+0x90>
 8004396:	290a      	cmp	r1, #10
 8004398:	d004      	beq.n	80043a4 <_puts_r+0x90>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	6022      	str	r2, [r4, #0]
 80043a0:	7019      	strb	r1, [r3, #0]
 80043a2:	e7cf      	b.n	8004344 <_puts_r+0x30>
 80043a4:	4622      	mov	r2, r4
 80043a6:	4628      	mov	r0, r5
 80043a8:	f000 f818 	bl	80043dc <__swbuf_r>
 80043ac:	3001      	adds	r0, #1
 80043ae:	d1c9      	bne.n	8004344 <_puts_r+0x30>
 80043b0:	e7e9      	b.n	8004386 <_puts_r+0x72>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	200a      	movs	r0, #10
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	6022      	str	r2, [r4, #0]
 80043ba:	7018      	strb	r0, [r3, #0]
 80043bc:	e7e5      	b.n	800438a <_puts_r+0x76>
 80043be:	bf00      	nop
 80043c0:	08005220 	.word	0x08005220
 80043c4:	08005240 	.word	0x08005240
 80043c8:	08005200 	.word	0x08005200

080043cc <puts>:
 80043cc:	4b02      	ldr	r3, [pc, #8]	; (80043d8 <puts+0xc>)
 80043ce:	4601      	mov	r1, r0
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	f7ff bf9f 	b.w	8004314 <_puts_r>
 80043d6:	bf00      	nop
 80043d8:	2000000c 	.word	0x2000000c

080043dc <__swbuf_r>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	460e      	mov	r6, r1
 80043e0:	4614      	mov	r4, r2
 80043e2:	4605      	mov	r5, r0
 80043e4:	b118      	cbz	r0, 80043ee <__swbuf_r+0x12>
 80043e6:	6983      	ldr	r3, [r0, #24]
 80043e8:	b90b      	cbnz	r3, 80043ee <__swbuf_r+0x12>
 80043ea:	f000 f9a7 	bl	800473c <__sinit>
 80043ee:	4b21      	ldr	r3, [pc, #132]	; (8004474 <__swbuf_r+0x98>)
 80043f0:	429c      	cmp	r4, r3
 80043f2:	d12a      	bne.n	800444a <__swbuf_r+0x6e>
 80043f4:	686c      	ldr	r4, [r5, #4]
 80043f6:	69a3      	ldr	r3, [r4, #24]
 80043f8:	60a3      	str	r3, [r4, #8]
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	071a      	lsls	r2, r3, #28
 80043fe:	d52e      	bpl.n	800445e <__swbuf_r+0x82>
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	b363      	cbz	r3, 800445e <__swbuf_r+0x82>
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	1ac0      	subs	r0, r0, r3
 800440a:	6963      	ldr	r3, [r4, #20]
 800440c:	b2f6      	uxtb	r6, r6
 800440e:	4283      	cmp	r3, r0
 8004410:	4637      	mov	r7, r6
 8004412:	dc04      	bgt.n	800441e <__swbuf_r+0x42>
 8004414:	4621      	mov	r1, r4
 8004416:	4628      	mov	r0, r5
 8004418:	f000 f926 	bl	8004668 <_fflush_r>
 800441c:	bb28      	cbnz	r0, 800446a <__swbuf_r+0x8e>
 800441e:	68a3      	ldr	r3, [r4, #8]
 8004420:	3b01      	subs	r3, #1
 8004422:	60a3      	str	r3, [r4, #8]
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	6022      	str	r2, [r4, #0]
 800442a:	701e      	strb	r6, [r3, #0]
 800442c:	6963      	ldr	r3, [r4, #20]
 800442e:	3001      	adds	r0, #1
 8004430:	4283      	cmp	r3, r0
 8004432:	d004      	beq.n	800443e <__swbuf_r+0x62>
 8004434:	89a3      	ldrh	r3, [r4, #12]
 8004436:	07db      	lsls	r3, r3, #31
 8004438:	d519      	bpl.n	800446e <__swbuf_r+0x92>
 800443a:	2e0a      	cmp	r6, #10
 800443c:	d117      	bne.n	800446e <__swbuf_r+0x92>
 800443e:	4621      	mov	r1, r4
 8004440:	4628      	mov	r0, r5
 8004442:	f000 f911 	bl	8004668 <_fflush_r>
 8004446:	b190      	cbz	r0, 800446e <__swbuf_r+0x92>
 8004448:	e00f      	b.n	800446a <__swbuf_r+0x8e>
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <__swbuf_r+0x9c>)
 800444c:	429c      	cmp	r4, r3
 800444e:	d101      	bne.n	8004454 <__swbuf_r+0x78>
 8004450:	68ac      	ldr	r4, [r5, #8]
 8004452:	e7d0      	b.n	80043f6 <__swbuf_r+0x1a>
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <__swbuf_r+0xa0>)
 8004456:	429c      	cmp	r4, r3
 8004458:	bf08      	it	eq
 800445a:	68ec      	ldreq	r4, [r5, #12]
 800445c:	e7cb      	b.n	80043f6 <__swbuf_r+0x1a>
 800445e:	4621      	mov	r1, r4
 8004460:	4628      	mov	r0, r5
 8004462:	f000 f80d 	bl	8004480 <__swsetup_r>
 8004466:	2800      	cmp	r0, #0
 8004468:	d0cc      	beq.n	8004404 <__swbuf_r+0x28>
 800446a:	f04f 37ff 	mov.w	r7, #4294967295
 800446e:	4638      	mov	r0, r7
 8004470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004472:	bf00      	nop
 8004474:	08005220 	.word	0x08005220
 8004478:	08005240 	.word	0x08005240
 800447c:	08005200 	.word	0x08005200

08004480 <__swsetup_r>:
 8004480:	4b32      	ldr	r3, [pc, #200]	; (800454c <__swsetup_r+0xcc>)
 8004482:	b570      	push	{r4, r5, r6, lr}
 8004484:	681d      	ldr	r5, [r3, #0]
 8004486:	4606      	mov	r6, r0
 8004488:	460c      	mov	r4, r1
 800448a:	b125      	cbz	r5, 8004496 <__swsetup_r+0x16>
 800448c:	69ab      	ldr	r3, [r5, #24]
 800448e:	b913      	cbnz	r3, 8004496 <__swsetup_r+0x16>
 8004490:	4628      	mov	r0, r5
 8004492:	f000 f953 	bl	800473c <__sinit>
 8004496:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <__swsetup_r+0xd0>)
 8004498:	429c      	cmp	r4, r3
 800449a:	d10f      	bne.n	80044bc <__swsetup_r+0x3c>
 800449c:	686c      	ldr	r4, [r5, #4]
 800449e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	0715      	lsls	r5, r2, #28
 80044a6:	d42c      	bmi.n	8004502 <__swsetup_r+0x82>
 80044a8:	06d0      	lsls	r0, r2, #27
 80044aa:	d411      	bmi.n	80044d0 <__swsetup_r+0x50>
 80044ac:	2209      	movs	r2, #9
 80044ae:	6032      	str	r2, [r6, #0]
 80044b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044b4:	81a3      	strh	r3, [r4, #12]
 80044b6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ba:	e03e      	b.n	800453a <__swsetup_r+0xba>
 80044bc:	4b25      	ldr	r3, [pc, #148]	; (8004554 <__swsetup_r+0xd4>)
 80044be:	429c      	cmp	r4, r3
 80044c0:	d101      	bne.n	80044c6 <__swsetup_r+0x46>
 80044c2:	68ac      	ldr	r4, [r5, #8]
 80044c4:	e7eb      	b.n	800449e <__swsetup_r+0x1e>
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <__swsetup_r+0xd8>)
 80044c8:	429c      	cmp	r4, r3
 80044ca:	bf08      	it	eq
 80044cc:	68ec      	ldreq	r4, [r5, #12]
 80044ce:	e7e6      	b.n	800449e <__swsetup_r+0x1e>
 80044d0:	0751      	lsls	r1, r2, #29
 80044d2:	d512      	bpl.n	80044fa <__swsetup_r+0x7a>
 80044d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044d6:	b141      	cbz	r1, 80044ea <__swsetup_r+0x6a>
 80044d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044dc:	4299      	cmp	r1, r3
 80044de:	d002      	beq.n	80044e6 <__swsetup_r+0x66>
 80044e0:	4630      	mov	r0, r6
 80044e2:	f000 fa19 	bl	8004918 <_free_r>
 80044e6:	2300      	movs	r3, #0
 80044e8:	6363      	str	r3, [r4, #52]	; 0x34
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044f0:	81a3      	strh	r3, [r4, #12]
 80044f2:	2300      	movs	r3, #0
 80044f4:	6063      	str	r3, [r4, #4]
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	89a3      	ldrh	r3, [r4, #12]
 80044fc:	f043 0308 	orr.w	r3, r3, #8
 8004500:	81a3      	strh	r3, [r4, #12]
 8004502:	6923      	ldr	r3, [r4, #16]
 8004504:	b94b      	cbnz	r3, 800451a <__swsetup_r+0x9a>
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800450c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004510:	d003      	beq.n	800451a <__swsetup_r+0x9a>
 8004512:	4621      	mov	r1, r4
 8004514:	4630      	mov	r0, r6
 8004516:	f000 f9bf 	bl	8004898 <__smakebuf_r>
 800451a:	89a2      	ldrh	r2, [r4, #12]
 800451c:	f012 0301 	ands.w	r3, r2, #1
 8004520:	d00c      	beq.n	800453c <__swsetup_r+0xbc>
 8004522:	2300      	movs	r3, #0
 8004524:	60a3      	str	r3, [r4, #8]
 8004526:	6963      	ldr	r3, [r4, #20]
 8004528:	425b      	negs	r3, r3
 800452a:	61a3      	str	r3, [r4, #24]
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	b953      	cbnz	r3, 8004546 <__swsetup_r+0xc6>
 8004530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004534:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004538:	d1ba      	bne.n	80044b0 <__swsetup_r+0x30>
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	0792      	lsls	r2, r2, #30
 800453e:	bf58      	it	pl
 8004540:	6963      	ldrpl	r3, [r4, #20]
 8004542:	60a3      	str	r3, [r4, #8]
 8004544:	e7f2      	b.n	800452c <__swsetup_r+0xac>
 8004546:	2000      	movs	r0, #0
 8004548:	e7f7      	b.n	800453a <__swsetup_r+0xba>
 800454a:	bf00      	nop
 800454c:	2000000c 	.word	0x2000000c
 8004550:	08005220 	.word	0x08005220
 8004554:	08005240 	.word	0x08005240
 8004558:	08005200 	.word	0x08005200

0800455c <__sflush_r>:
 800455c:	898a      	ldrh	r2, [r1, #12]
 800455e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004562:	4605      	mov	r5, r0
 8004564:	0710      	lsls	r0, r2, #28
 8004566:	460c      	mov	r4, r1
 8004568:	d458      	bmi.n	800461c <__sflush_r+0xc0>
 800456a:	684b      	ldr	r3, [r1, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	dc05      	bgt.n	800457c <__sflush_r+0x20>
 8004570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	dc02      	bgt.n	800457c <__sflush_r+0x20>
 8004576:	2000      	movs	r0, #0
 8004578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800457c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800457e:	2e00      	cmp	r6, #0
 8004580:	d0f9      	beq.n	8004576 <__sflush_r+0x1a>
 8004582:	2300      	movs	r3, #0
 8004584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004588:	682f      	ldr	r7, [r5, #0]
 800458a:	6a21      	ldr	r1, [r4, #32]
 800458c:	602b      	str	r3, [r5, #0]
 800458e:	d032      	beq.n	80045f6 <__sflush_r+0x9a>
 8004590:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004592:	89a3      	ldrh	r3, [r4, #12]
 8004594:	075a      	lsls	r2, r3, #29
 8004596:	d505      	bpl.n	80045a4 <__sflush_r+0x48>
 8004598:	6863      	ldr	r3, [r4, #4]
 800459a:	1ac0      	subs	r0, r0, r3
 800459c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800459e:	b10b      	cbz	r3, 80045a4 <__sflush_r+0x48>
 80045a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045a2:	1ac0      	subs	r0, r0, r3
 80045a4:	2300      	movs	r3, #0
 80045a6:	4602      	mov	r2, r0
 80045a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045aa:	6a21      	ldr	r1, [r4, #32]
 80045ac:	4628      	mov	r0, r5
 80045ae:	47b0      	blx	r6
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	89a3      	ldrh	r3, [r4, #12]
 80045b4:	d106      	bne.n	80045c4 <__sflush_r+0x68>
 80045b6:	6829      	ldr	r1, [r5, #0]
 80045b8:	291d      	cmp	r1, #29
 80045ba:	d848      	bhi.n	800464e <__sflush_r+0xf2>
 80045bc:	4a29      	ldr	r2, [pc, #164]	; (8004664 <__sflush_r+0x108>)
 80045be:	40ca      	lsrs	r2, r1
 80045c0:	07d6      	lsls	r6, r2, #31
 80045c2:	d544      	bpl.n	800464e <__sflush_r+0xf2>
 80045c4:	2200      	movs	r2, #0
 80045c6:	6062      	str	r2, [r4, #4]
 80045c8:	04d9      	lsls	r1, r3, #19
 80045ca:	6922      	ldr	r2, [r4, #16]
 80045cc:	6022      	str	r2, [r4, #0]
 80045ce:	d504      	bpl.n	80045da <__sflush_r+0x7e>
 80045d0:	1c42      	adds	r2, r0, #1
 80045d2:	d101      	bne.n	80045d8 <__sflush_r+0x7c>
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	b903      	cbnz	r3, 80045da <__sflush_r+0x7e>
 80045d8:	6560      	str	r0, [r4, #84]	; 0x54
 80045da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045dc:	602f      	str	r7, [r5, #0]
 80045de:	2900      	cmp	r1, #0
 80045e0:	d0c9      	beq.n	8004576 <__sflush_r+0x1a>
 80045e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045e6:	4299      	cmp	r1, r3
 80045e8:	d002      	beq.n	80045f0 <__sflush_r+0x94>
 80045ea:	4628      	mov	r0, r5
 80045ec:	f000 f994 	bl	8004918 <_free_r>
 80045f0:	2000      	movs	r0, #0
 80045f2:	6360      	str	r0, [r4, #52]	; 0x34
 80045f4:	e7c0      	b.n	8004578 <__sflush_r+0x1c>
 80045f6:	2301      	movs	r3, #1
 80045f8:	4628      	mov	r0, r5
 80045fa:	47b0      	blx	r6
 80045fc:	1c41      	adds	r1, r0, #1
 80045fe:	d1c8      	bne.n	8004592 <__sflush_r+0x36>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0c5      	beq.n	8004592 <__sflush_r+0x36>
 8004606:	2b1d      	cmp	r3, #29
 8004608:	d001      	beq.n	800460e <__sflush_r+0xb2>
 800460a:	2b16      	cmp	r3, #22
 800460c:	d101      	bne.n	8004612 <__sflush_r+0xb6>
 800460e:	602f      	str	r7, [r5, #0]
 8004610:	e7b1      	b.n	8004576 <__sflush_r+0x1a>
 8004612:	89a3      	ldrh	r3, [r4, #12]
 8004614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004618:	81a3      	strh	r3, [r4, #12]
 800461a:	e7ad      	b.n	8004578 <__sflush_r+0x1c>
 800461c:	690f      	ldr	r7, [r1, #16]
 800461e:	2f00      	cmp	r7, #0
 8004620:	d0a9      	beq.n	8004576 <__sflush_r+0x1a>
 8004622:	0793      	lsls	r3, r2, #30
 8004624:	680e      	ldr	r6, [r1, #0]
 8004626:	bf08      	it	eq
 8004628:	694b      	ldreq	r3, [r1, #20]
 800462a:	600f      	str	r7, [r1, #0]
 800462c:	bf18      	it	ne
 800462e:	2300      	movne	r3, #0
 8004630:	eba6 0807 	sub.w	r8, r6, r7
 8004634:	608b      	str	r3, [r1, #8]
 8004636:	f1b8 0f00 	cmp.w	r8, #0
 800463a:	dd9c      	ble.n	8004576 <__sflush_r+0x1a>
 800463c:	4643      	mov	r3, r8
 800463e:	463a      	mov	r2, r7
 8004640:	6a21      	ldr	r1, [r4, #32]
 8004642:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004644:	4628      	mov	r0, r5
 8004646:	47b0      	blx	r6
 8004648:	2800      	cmp	r0, #0
 800464a:	dc06      	bgt.n	800465a <__sflush_r+0xfe>
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004652:	81a3      	strh	r3, [r4, #12]
 8004654:	f04f 30ff 	mov.w	r0, #4294967295
 8004658:	e78e      	b.n	8004578 <__sflush_r+0x1c>
 800465a:	4407      	add	r7, r0
 800465c:	eba8 0800 	sub.w	r8, r8, r0
 8004660:	e7e9      	b.n	8004636 <__sflush_r+0xda>
 8004662:	bf00      	nop
 8004664:	20400001 	.word	0x20400001

08004668 <_fflush_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	690b      	ldr	r3, [r1, #16]
 800466c:	4605      	mov	r5, r0
 800466e:	460c      	mov	r4, r1
 8004670:	b1db      	cbz	r3, 80046aa <_fflush_r+0x42>
 8004672:	b118      	cbz	r0, 800467c <_fflush_r+0x14>
 8004674:	6983      	ldr	r3, [r0, #24]
 8004676:	b90b      	cbnz	r3, 800467c <_fflush_r+0x14>
 8004678:	f000 f860 	bl	800473c <__sinit>
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <_fflush_r+0x48>)
 800467e:	429c      	cmp	r4, r3
 8004680:	d109      	bne.n	8004696 <_fflush_r+0x2e>
 8004682:	686c      	ldr	r4, [r5, #4]
 8004684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004688:	b17b      	cbz	r3, 80046aa <_fflush_r+0x42>
 800468a:	4621      	mov	r1, r4
 800468c:	4628      	mov	r0, r5
 800468e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004692:	f7ff bf63 	b.w	800455c <__sflush_r>
 8004696:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <_fflush_r+0x4c>)
 8004698:	429c      	cmp	r4, r3
 800469a:	d101      	bne.n	80046a0 <_fflush_r+0x38>
 800469c:	68ac      	ldr	r4, [r5, #8]
 800469e:	e7f1      	b.n	8004684 <_fflush_r+0x1c>
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <_fflush_r+0x50>)
 80046a2:	429c      	cmp	r4, r3
 80046a4:	bf08      	it	eq
 80046a6:	68ec      	ldreq	r4, [r5, #12]
 80046a8:	e7ec      	b.n	8004684 <_fflush_r+0x1c>
 80046aa:	2000      	movs	r0, #0
 80046ac:	bd38      	pop	{r3, r4, r5, pc}
 80046ae:	bf00      	nop
 80046b0:	08005220 	.word	0x08005220
 80046b4:	08005240 	.word	0x08005240
 80046b8:	08005200 	.word	0x08005200

080046bc <std>:
 80046bc:	2300      	movs	r3, #0
 80046be:	b510      	push	{r4, lr}
 80046c0:	4604      	mov	r4, r0
 80046c2:	e9c0 3300 	strd	r3, r3, [r0]
 80046c6:	6083      	str	r3, [r0, #8]
 80046c8:	8181      	strh	r1, [r0, #12]
 80046ca:	6643      	str	r3, [r0, #100]	; 0x64
 80046cc:	81c2      	strh	r2, [r0, #14]
 80046ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046d2:	6183      	str	r3, [r0, #24]
 80046d4:	4619      	mov	r1, r3
 80046d6:	2208      	movs	r2, #8
 80046d8:	305c      	adds	r0, #92	; 0x5c
 80046da:	f7ff fdfb 	bl	80042d4 <memset>
 80046de:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <std+0x38>)
 80046e0:	6263      	str	r3, [r4, #36]	; 0x24
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <std+0x3c>)
 80046e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <std+0x40>)
 80046e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <std+0x44>)
 80046ec:	6224      	str	r4, [r4, #32]
 80046ee:	6323      	str	r3, [r4, #48]	; 0x30
 80046f0:	bd10      	pop	{r4, pc}
 80046f2:	bf00      	nop
 80046f4:	08005019 	.word	0x08005019
 80046f8:	0800503b 	.word	0x0800503b
 80046fc:	08005073 	.word	0x08005073
 8004700:	08005097 	.word	0x08005097

08004704 <_cleanup_r>:
 8004704:	4901      	ldr	r1, [pc, #4]	; (800470c <_cleanup_r+0x8>)
 8004706:	f000 b885 	b.w	8004814 <_fwalk_reent>
 800470a:	bf00      	nop
 800470c:	08004669 	.word	0x08004669

08004710 <__sfmoreglue>:
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	1e4a      	subs	r2, r1, #1
 8004714:	2568      	movs	r5, #104	; 0x68
 8004716:	4355      	muls	r5, r2
 8004718:	460e      	mov	r6, r1
 800471a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800471e:	f000 f949 	bl	80049b4 <_malloc_r>
 8004722:	4604      	mov	r4, r0
 8004724:	b140      	cbz	r0, 8004738 <__sfmoreglue+0x28>
 8004726:	2100      	movs	r1, #0
 8004728:	e9c0 1600 	strd	r1, r6, [r0]
 800472c:	300c      	adds	r0, #12
 800472e:	60a0      	str	r0, [r4, #8]
 8004730:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004734:	f7ff fdce 	bl	80042d4 <memset>
 8004738:	4620      	mov	r0, r4
 800473a:	bd70      	pop	{r4, r5, r6, pc}

0800473c <__sinit>:
 800473c:	6983      	ldr	r3, [r0, #24]
 800473e:	b510      	push	{r4, lr}
 8004740:	4604      	mov	r4, r0
 8004742:	bb33      	cbnz	r3, 8004792 <__sinit+0x56>
 8004744:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004748:	6503      	str	r3, [r0, #80]	; 0x50
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <__sinit+0x58>)
 800474c:	4a12      	ldr	r2, [pc, #72]	; (8004798 <__sinit+0x5c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6282      	str	r2, [r0, #40]	; 0x28
 8004752:	4298      	cmp	r0, r3
 8004754:	bf04      	itt	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	6183      	streq	r3, [r0, #24]
 800475a:	f000 f81f 	bl	800479c <__sfp>
 800475e:	6060      	str	r0, [r4, #4]
 8004760:	4620      	mov	r0, r4
 8004762:	f000 f81b 	bl	800479c <__sfp>
 8004766:	60a0      	str	r0, [r4, #8]
 8004768:	4620      	mov	r0, r4
 800476a:	f000 f817 	bl	800479c <__sfp>
 800476e:	2200      	movs	r2, #0
 8004770:	60e0      	str	r0, [r4, #12]
 8004772:	2104      	movs	r1, #4
 8004774:	6860      	ldr	r0, [r4, #4]
 8004776:	f7ff ffa1 	bl	80046bc <std>
 800477a:	2201      	movs	r2, #1
 800477c:	2109      	movs	r1, #9
 800477e:	68a0      	ldr	r0, [r4, #8]
 8004780:	f7ff ff9c 	bl	80046bc <std>
 8004784:	2202      	movs	r2, #2
 8004786:	2112      	movs	r1, #18
 8004788:	68e0      	ldr	r0, [r4, #12]
 800478a:	f7ff ff97 	bl	80046bc <std>
 800478e:	2301      	movs	r3, #1
 8004790:	61a3      	str	r3, [r4, #24]
 8004792:	bd10      	pop	{r4, pc}
 8004794:	080051fc 	.word	0x080051fc
 8004798:	08004705 	.word	0x08004705

0800479c <__sfp>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	4b1b      	ldr	r3, [pc, #108]	; (800480c <__sfp+0x70>)
 80047a0:	681e      	ldr	r6, [r3, #0]
 80047a2:	69b3      	ldr	r3, [r6, #24]
 80047a4:	4607      	mov	r7, r0
 80047a6:	b913      	cbnz	r3, 80047ae <__sfp+0x12>
 80047a8:	4630      	mov	r0, r6
 80047aa:	f7ff ffc7 	bl	800473c <__sinit>
 80047ae:	3648      	adds	r6, #72	; 0x48
 80047b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	d503      	bpl.n	80047c0 <__sfp+0x24>
 80047b8:	6833      	ldr	r3, [r6, #0]
 80047ba:	b133      	cbz	r3, 80047ca <__sfp+0x2e>
 80047bc:	6836      	ldr	r6, [r6, #0]
 80047be:	e7f7      	b.n	80047b0 <__sfp+0x14>
 80047c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80047c4:	b16d      	cbz	r5, 80047e2 <__sfp+0x46>
 80047c6:	3468      	adds	r4, #104	; 0x68
 80047c8:	e7f4      	b.n	80047b4 <__sfp+0x18>
 80047ca:	2104      	movs	r1, #4
 80047cc:	4638      	mov	r0, r7
 80047ce:	f7ff ff9f 	bl	8004710 <__sfmoreglue>
 80047d2:	6030      	str	r0, [r6, #0]
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d1f1      	bne.n	80047bc <__sfp+0x20>
 80047d8:	230c      	movs	r3, #12
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	4604      	mov	r4, r0
 80047de:	4620      	mov	r0, r4
 80047e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e2:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <__sfp+0x74>)
 80047e4:	6665      	str	r5, [r4, #100]	; 0x64
 80047e6:	e9c4 5500 	strd	r5, r5, [r4]
 80047ea:	60a5      	str	r5, [r4, #8]
 80047ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80047f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80047f4:	2208      	movs	r2, #8
 80047f6:	4629      	mov	r1, r5
 80047f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047fc:	f7ff fd6a 	bl	80042d4 <memset>
 8004800:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004804:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004808:	e7e9      	b.n	80047de <__sfp+0x42>
 800480a:	bf00      	nop
 800480c:	080051fc 	.word	0x080051fc
 8004810:	ffff0001 	.word	0xffff0001

08004814 <_fwalk_reent>:
 8004814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004818:	4680      	mov	r8, r0
 800481a:	4689      	mov	r9, r1
 800481c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004820:	2600      	movs	r6, #0
 8004822:	b914      	cbnz	r4, 800482a <_fwalk_reent+0x16>
 8004824:	4630      	mov	r0, r6
 8004826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800482a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800482e:	3f01      	subs	r7, #1
 8004830:	d501      	bpl.n	8004836 <_fwalk_reent+0x22>
 8004832:	6824      	ldr	r4, [r4, #0]
 8004834:	e7f5      	b.n	8004822 <_fwalk_reent+0xe>
 8004836:	89ab      	ldrh	r3, [r5, #12]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d907      	bls.n	800484c <_fwalk_reent+0x38>
 800483c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004840:	3301      	adds	r3, #1
 8004842:	d003      	beq.n	800484c <_fwalk_reent+0x38>
 8004844:	4629      	mov	r1, r5
 8004846:	4640      	mov	r0, r8
 8004848:	47c8      	blx	r9
 800484a:	4306      	orrs	r6, r0
 800484c:	3568      	adds	r5, #104	; 0x68
 800484e:	e7ee      	b.n	800482e <_fwalk_reent+0x1a>

08004850 <__swhatbuf_r>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	460e      	mov	r6, r1
 8004854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004858:	2900      	cmp	r1, #0
 800485a:	b096      	sub	sp, #88	; 0x58
 800485c:	4614      	mov	r4, r2
 800485e:	461d      	mov	r5, r3
 8004860:	da07      	bge.n	8004872 <__swhatbuf_r+0x22>
 8004862:	2300      	movs	r3, #0
 8004864:	602b      	str	r3, [r5, #0]
 8004866:	89b3      	ldrh	r3, [r6, #12]
 8004868:	061a      	lsls	r2, r3, #24
 800486a:	d410      	bmi.n	800488e <__swhatbuf_r+0x3e>
 800486c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004870:	e00e      	b.n	8004890 <__swhatbuf_r+0x40>
 8004872:	466a      	mov	r2, sp
 8004874:	f000 fc36 	bl	80050e4 <_fstat_r>
 8004878:	2800      	cmp	r0, #0
 800487a:	dbf2      	blt.n	8004862 <__swhatbuf_r+0x12>
 800487c:	9a01      	ldr	r2, [sp, #4]
 800487e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004882:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004886:	425a      	negs	r2, r3
 8004888:	415a      	adcs	r2, r3
 800488a:	602a      	str	r2, [r5, #0]
 800488c:	e7ee      	b.n	800486c <__swhatbuf_r+0x1c>
 800488e:	2340      	movs	r3, #64	; 0x40
 8004890:	2000      	movs	r0, #0
 8004892:	6023      	str	r3, [r4, #0]
 8004894:	b016      	add	sp, #88	; 0x58
 8004896:	bd70      	pop	{r4, r5, r6, pc}

08004898 <__smakebuf_r>:
 8004898:	898b      	ldrh	r3, [r1, #12]
 800489a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800489c:	079d      	lsls	r5, r3, #30
 800489e:	4606      	mov	r6, r0
 80048a0:	460c      	mov	r4, r1
 80048a2:	d507      	bpl.n	80048b4 <__smakebuf_r+0x1c>
 80048a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	6123      	str	r3, [r4, #16]
 80048ac:	2301      	movs	r3, #1
 80048ae:	6163      	str	r3, [r4, #20]
 80048b0:	b002      	add	sp, #8
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
 80048b4:	ab01      	add	r3, sp, #4
 80048b6:	466a      	mov	r2, sp
 80048b8:	f7ff ffca 	bl	8004850 <__swhatbuf_r>
 80048bc:	9900      	ldr	r1, [sp, #0]
 80048be:	4605      	mov	r5, r0
 80048c0:	4630      	mov	r0, r6
 80048c2:	f000 f877 	bl	80049b4 <_malloc_r>
 80048c6:	b948      	cbnz	r0, 80048dc <__smakebuf_r+0x44>
 80048c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048cc:	059a      	lsls	r2, r3, #22
 80048ce:	d4ef      	bmi.n	80048b0 <__smakebuf_r+0x18>
 80048d0:	f023 0303 	bic.w	r3, r3, #3
 80048d4:	f043 0302 	orr.w	r3, r3, #2
 80048d8:	81a3      	strh	r3, [r4, #12]
 80048da:	e7e3      	b.n	80048a4 <__smakebuf_r+0xc>
 80048dc:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <__smakebuf_r+0x7c>)
 80048de:	62b3      	str	r3, [r6, #40]	; 0x28
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	6020      	str	r0, [r4, #0]
 80048e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e8:	81a3      	strh	r3, [r4, #12]
 80048ea:	9b00      	ldr	r3, [sp, #0]
 80048ec:	6163      	str	r3, [r4, #20]
 80048ee:	9b01      	ldr	r3, [sp, #4]
 80048f0:	6120      	str	r0, [r4, #16]
 80048f2:	b15b      	cbz	r3, 800490c <__smakebuf_r+0x74>
 80048f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048f8:	4630      	mov	r0, r6
 80048fa:	f000 fc05 	bl	8005108 <_isatty_r>
 80048fe:	b128      	cbz	r0, 800490c <__smakebuf_r+0x74>
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	f023 0303 	bic.w	r3, r3, #3
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	81a3      	strh	r3, [r4, #12]
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	431d      	orrs	r5, r3
 8004910:	81a5      	strh	r5, [r4, #12]
 8004912:	e7cd      	b.n	80048b0 <__smakebuf_r+0x18>
 8004914:	08004705 	.word	0x08004705

08004918 <_free_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4605      	mov	r5, r0
 800491c:	2900      	cmp	r1, #0
 800491e:	d045      	beq.n	80049ac <_free_r+0x94>
 8004920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004924:	1f0c      	subs	r4, r1, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	bfb8      	it	lt
 800492a:	18e4      	addlt	r4, r4, r3
 800492c:	f000 fc0e 	bl	800514c <__malloc_lock>
 8004930:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <_free_r+0x98>)
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	4610      	mov	r0, r2
 8004936:	b933      	cbnz	r3, 8004946 <_free_r+0x2e>
 8004938:	6063      	str	r3, [r4, #4]
 800493a:	6014      	str	r4, [r2, #0]
 800493c:	4628      	mov	r0, r5
 800493e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004942:	f000 bc04 	b.w	800514e <__malloc_unlock>
 8004946:	42a3      	cmp	r3, r4
 8004948:	d90c      	bls.n	8004964 <_free_r+0x4c>
 800494a:	6821      	ldr	r1, [r4, #0]
 800494c:	1862      	adds	r2, r4, r1
 800494e:	4293      	cmp	r3, r2
 8004950:	bf04      	itt	eq
 8004952:	681a      	ldreq	r2, [r3, #0]
 8004954:	685b      	ldreq	r3, [r3, #4]
 8004956:	6063      	str	r3, [r4, #4]
 8004958:	bf04      	itt	eq
 800495a:	1852      	addeq	r2, r2, r1
 800495c:	6022      	streq	r2, [r4, #0]
 800495e:	6004      	str	r4, [r0, #0]
 8004960:	e7ec      	b.n	800493c <_free_r+0x24>
 8004962:	4613      	mov	r3, r2
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	b10a      	cbz	r2, 800496c <_free_r+0x54>
 8004968:	42a2      	cmp	r2, r4
 800496a:	d9fa      	bls.n	8004962 <_free_r+0x4a>
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	1858      	adds	r0, r3, r1
 8004970:	42a0      	cmp	r0, r4
 8004972:	d10b      	bne.n	800498c <_free_r+0x74>
 8004974:	6820      	ldr	r0, [r4, #0]
 8004976:	4401      	add	r1, r0
 8004978:	1858      	adds	r0, r3, r1
 800497a:	4282      	cmp	r2, r0
 800497c:	6019      	str	r1, [r3, #0]
 800497e:	d1dd      	bne.n	800493c <_free_r+0x24>
 8004980:	6810      	ldr	r0, [r2, #0]
 8004982:	6852      	ldr	r2, [r2, #4]
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	4401      	add	r1, r0
 8004988:	6019      	str	r1, [r3, #0]
 800498a:	e7d7      	b.n	800493c <_free_r+0x24>
 800498c:	d902      	bls.n	8004994 <_free_r+0x7c>
 800498e:	230c      	movs	r3, #12
 8004990:	602b      	str	r3, [r5, #0]
 8004992:	e7d3      	b.n	800493c <_free_r+0x24>
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	1821      	adds	r1, r4, r0
 8004998:	428a      	cmp	r2, r1
 800499a:	bf04      	itt	eq
 800499c:	6811      	ldreq	r1, [r2, #0]
 800499e:	6852      	ldreq	r2, [r2, #4]
 80049a0:	6062      	str	r2, [r4, #4]
 80049a2:	bf04      	itt	eq
 80049a4:	1809      	addeq	r1, r1, r0
 80049a6:	6021      	streq	r1, [r4, #0]
 80049a8:	605c      	str	r4, [r3, #4]
 80049aa:	e7c7      	b.n	800493c <_free_r+0x24>
 80049ac:	bd38      	pop	{r3, r4, r5, pc}
 80049ae:	bf00      	nop
 80049b0:	20000090 	.word	0x20000090

080049b4 <_malloc_r>:
 80049b4:	b570      	push	{r4, r5, r6, lr}
 80049b6:	1ccd      	adds	r5, r1, #3
 80049b8:	f025 0503 	bic.w	r5, r5, #3
 80049bc:	3508      	adds	r5, #8
 80049be:	2d0c      	cmp	r5, #12
 80049c0:	bf38      	it	cc
 80049c2:	250c      	movcc	r5, #12
 80049c4:	2d00      	cmp	r5, #0
 80049c6:	4606      	mov	r6, r0
 80049c8:	db01      	blt.n	80049ce <_malloc_r+0x1a>
 80049ca:	42a9      	cmp	r1, r5
 80049cc:	d903      	bls.n	80049d6 <_malloc_r+0x22>
 80049ce:	230c      	movs	r3, #12
 80049d0:	6033      	str	r3, [r6, #0]
 80049d2:	2000      	movs	r0, #0
 80049d4:	bd70      	pop	{r4, r5, r6, pc}
 80049d6:	f000 fbb9 	bl	800514c <__malloc_lock>
 80049da:	4a21      	ldr	r2, [pc, #132]	; (8004a60 <_malloc_r+0xac>)
 80049dc:	6814      	ldr	r4, [r2, #0]
 80049de:	4621      	mov	r1, r4
 80049e0:	b991      	cbnz	r1, 8004a08 <_malloc_r+0x54>
 80049e2:	4c20      	ldr	r4, [pc, #128]	; (8004a64 <_malloc_r+0xb0>)
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	b91b      	cbnz	r3, 80049f0 <_malloc_r+0x3c>
 80049e8:	4630      	mov	r0, r6
 80049ea:	f000 fb05 	bl	8004ff8 <_sbrk_r>
 80049ee:	6020      	str	r0, [r4, #0]
 80049f0:	4629      	mov	r1, r5
 80049f2:	4630      	mov	r0, r6
 80049f4:	f000 fb00 	bl	8004ff8 <_sbrk_r>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	d124      	bne.n	8004a46 <_malloc_r+0x92>
 80049fc:	230c      	movs	r3, #12
 80049fe:	6033      	str	r3, [r6, #0]
 8004a00:	4630      	mov	r0, r6
 8004a02:	f000 fba4 	bl	800514e <__malloc_unlock>
 8004a06:	e7e4      	b.n	80049d2 <_malloc_r+0x1e>
 8004a08:	680b      	ldr	r3, [r1, #0]
 8004a0a:	1b5b      	subs	r3, r3, r5
 8004a0c:	d418      	bmi.n	8004a40 <_malloc_r+0x8c>
 8004a0e:	2b0b      	cmp	r3, #11
 8004a10:	d90f      	bls.n	8004a32 <_malloc_r+0x7e>
 8004a12:	600b      	str	r3, [r1, #0]
 8004a14:	50cd      	str	r5, [r1, r3]
 8004a16:	18cc      	adds	r4, r1, r3
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f000 fb98 	bl	800514e <__malloc_unlock>
 8004a1e:	f104 000b 	add.w	r0, r4, #11
 8004a22:	1d23      	adds	r3, r4, #4
 8004a24:	f020 0007 	bic.w	r0, r0, #7
 8004a28:	1ac3      	subs	r3, r0, r3
 8004a2a:	d0d3      	beq.n	80049d4 <_malloc_r+0x20>
 8004a2c:	425a      	negs	r2, r3
 8004a2e:	50e2      	str	r2, [r4, r3]
 8004a30:	e7d0      	b.n	80049d4 <_malloc_r+0x20>
 8004a32:	428c      	cmp	r4, r1
 8004a34:	684b      	ldr	r3, [r1, #4]
 8004a36:	bf16      	itet	ne
 8004a38:	6063      	strne	r3, [r4, #4]
 8004a3a:	6013      	streq	r3, [r2, #0]
 8004a3c:	460c      	movne	r4, r1
 8004a3e:	e7eb      	b.n	8004a18 <_malloc_r+0x64>
 8004a40:	460c      	mov	r4, r1
 8004a42:	6849      	ldr	r1, [r1, #4]
 8004a44:	e7cc      	b.n	80049e0 <_malloc_r+0x2c>
 8004a46:	1cc4      	adds	r4, r0, #3
 8004a48:	f024 0403 	bic.w	r4, r4, #3
 8004a4c:	42a0      	cmp	r0, r4
 8004a4e:	d005      	beq.n	8004a5c <_malloc_r+0xa8>
 8004a50:	1a21      	subs	r1, r4, r0
 8004a52:	4630      	mov	r0, r6
 8004a54:	f000 fad0 	bl	8004ff8 <_sbrk_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d0cf      	beq.n	80049fc <_malloc_r+0x48>
 8004a5c:	6025      	str	r5, [r4, #0]
 8004a5e:	e7db      	b.n	8004a18 <_malloc_r+0x64>
 8004a60:	20000090 	.word	0x20000090
 8004a64:	20000094 	.word	0x20000094

08004a68 <__sfputc_r>:
 8004a68:	6893      	ldr	r3, [r2, #8]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	b410      	push	{r4}
 8004a70:	6093      	str	r3, [r2, #8]
 8004a72:	da08      	bge.n	8004a86 <__sfputc_r+0x1e>
 8004a74:	6994      	ldr	r4, [r2, #24]
 8004a76:	42a3      	cmp	r3, r4
 8004a78:	db01      	blt.n	8004a7e <__sfputc_r+0x16>
 8004a7a:	290a      	cmp	r1, #10
 8004a7c:	d103      	bne.n	8004a86 <__sfputc_r+0x1e>
 8004a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a82:	f7ff bcab 	b.w	80043dc <__swbuf_r>
 8004a86:	6813      	ldr	r3, [r2, #0]
 8004a88:	1c58      	adds	r0, r3, #1
 8004a8a:	6010      	str	r0, [r2, #0]
 8004a8c:	7019      	strb	r1, [r3, #0]
 8004a8e:	4608      	mov	r0, r1
 8004a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <__sfputs_r>:
 8004a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a98:	4606      	mov	r6, r0
 8004a9a:	460f      	mov	r7, r1
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	18d5      	adds	r5, r2, r3
 8004aa0:	42ac      	cmp	r4, r5
 8004aa2:	d101      	bne.n	8004aa8 <__sfputs_r+0x12>
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	e007      	b.n	8004ab8 <__sfputs_r+0x22>
 8004aa8:	463a      	mov	r2, r7
 8004aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f7ff ffda 	bl	8004a68 <__sfputc_r>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d1f3      	bne.n	8004aa0 <__sfputs_r+0xa>
 8004ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004abc <_vfiprintf_r>:
 8004abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	b09d      	sub	sp, #116	; 0x74
 8004ac4:	4617      	mov	r7, r2
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	4606      	mov	r6, r0
 8004aca:	b118      	cbz	r0, 8004ad4 <_vfiprintf_r+0x18>
 8004acc:	6983      	ldr	r3, [r0, #24]
 8004ace:	b90b      	cbnz	r3, 8004ad4 <_vfiprintf_r+0x18>
 8004ad0:	f7ff fe34 	bl	800473c <__sinit>
 8004ad4:	4b7c      	ldr	r3, [pc, #496]	; (8004cc8 <_vfiprintf_r+0x20c>)
 8004ad6:	429c      	cmp	r4, r3
 8004ad8:	d158      	bne.n	8004b8c <_vfiprintf_r+0xd0>
 8004ada:	6874      	ldr	r4, [r6, #4]
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	0718      	lsls	r0, r3, #28
 8004ae0:	d55e      	bpl.n	8004ba0 <_vfiprintf_r+0xe4>
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d05b      	beq.n	8004ba0 <_vfiprintf_r+0xe4>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	9309      	str	r3, [sp, #36]	; 0x24
 8004aec:	2320      	movs	r3, #32
 8004aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004af2:	2330      	movs	r3, #48	; 0x30
 8004af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004af8:	9503      	str	r5, [sp, #12]
 8004afa:	f04f 0b01 	mov.w	fp, #1
 8004afe:	46b8      	mov	r8, r7
 8004b00:	4645      	mov	r5, r8
 8004b02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b06:	b10b      	cbz	r3, 8004b0c <_vfiprintf_r+0x50>
 8004b08:	2b25      	cmp	r3, #37	; 0x25
 8004b0a:	d154      	bne.n	8004bb6 <_vfiprintf_r+0xfa>
 8004b0c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004b10:	d00b      	beq.n	8004b2a <_vfiprintf_r+0x6e>
 8004b12:	4653      	mov	r3, sl
 8004b14:	463a      	mov	r2, r7
 8004b16:	4621      	mov	r1, r4
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f7ff ffbc 	bl	8004a96 <__sfputs_r>
 8004b1e:	3001      	adds	r0, #1
 8004b20:	f000 80c2 	beq.w	8004ca8 <_vfiprintf_r+0x1ec>
 8004b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b26:	4453      	add	r3, sl
 8004b28:	9309      	str	r3, [sp, #36]	; 0x24
 8004b2a:	f898 3000 	ldrb.w	r3, [r8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80ba 	beq.w	8004ca8 <_vfiprintf_r+0x1ec>
 8004b34:	2300      	movs	r3, #0
 8004b36:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b3e:	9304      	str	r3, [sp, #16]
 8004b40:	9307      	str	r3, [sp, #28]
 8004b42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b46:	931a      	str	r3, [sp, #104]	; 0x68
 8004b48:	46a8      	mov	r8, r5
 8004b4a:	2205      	movs	r2, #5
 8004b4c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004b50:	485e      	ldr	r0, [pc, #376]	; (8004ccc <_vfiprintf_r+0x210>)
 8004b52:	f7fb fb45 	bl	80001e0 <memchr>
 8004b56:	9b04      	ldr	r3, [sp, #16]
 8004b58:	bb78      	cbnz	r0, 8004bba <_vfiprintf_r+0xfe>
 8004b5a:	06d9      	lsls	r1, r3, #27
 8004b5c:	bf44      	itt	mi
 8004b5e:	2220      	movmi	r2, #32
 8004b60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b64:	071a      	lsls	r2, r3, #28
 8004b66:	bf44      	itt	mi
 8004b68:	222b      	movmi	r2, #43	; 0x2b
 8004b6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b6e:	782a      	ldrb	r2, [r5, #0]
 8004b70:	2a2a      	cmp	r2, #42	; 0x2a
 8004b72:	d02a      	beq.n	8004bca <_vfiprintf_r+0x10e>
 8004b74:	9a07      	ldr	r2, [sp, #28]
 8004b76:	46a8      	mov	r8, r5
 8004b78:	2000      	movs	r0, #0
 8004b7a:	250a      	movs	r5, #10
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b82:	3b30      	subs	r3, #48	; 0x30
 8004b84:	2b09      	cmp	r3, #9
 8004b86:	d969      	bls.n	8004c5c <_vfiprintf_r+0x1a0>
 8004b88:	b360      	cbz	r0, 8004be4 <_vfiprintf_r+0x128>
 8004b8a:	e024      	b.n	8004bd6 <_vfiprintf_r+0x11a>
 8004b8c:	4b50      	ldr	r3, [pc, #320]	; (8004cd0 <_vfiprintf_r+0x214>)
 8004b8e:	429c      	cmp	r4, r3
 8004b90:	d101      	bne.n	8004b96 <_vfiprintf_r+0xda>
 8004b92:	68b4      	ldr	r4, [r6, #8]
 8004b94:	e7a2      	b.n	8004adc <_vfiprintf_r+0x20>
 8004b96:	4b4f      	ldr	r3, [pc, #316]	; (8004cd4 <_vfiprintf_r+0x218>)
 8004b98:	429c      	cmp	r4, r3
 8004b9a:	bf08      	it	eq
 8004b9c:	68f4      	ldreq	r4, [r6, #12]
 8004b9e:	e79d      	b.n	8004adc <_vfiprintf_r+0x20>
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f7ff fc6c 	bl	8004480 <__swsetup_r>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d09d      	beq.n	8004ae8 <_vfiprintf_r+0x2c>
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	b01d      	add	sp, #116	; 0x74
 8004bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb6:	46a8      	mov	r8, r5
 8004bb8:	e7a2      	b.n	8004b00 <_vfiprintf_r+0x44>
 8004bba:	4a44      	ldr	r2, [pc, #272]	; (8004ccc <_vfiprintf_r+0x210>)
 8004bbc:	1a80      	subs	r0, r0, r2
 8004bbe:	fa0b f000 	lsl.w	r0, fp, r0
 8004bc2:	4318      	orrs	r0, r3
 8004bc4:	9004      	str	r0, [sp, #16]
 8004bc6:	4645      	mov	r5, r8
 8004bc8:	e7be      	b.n	8004b48 <_vfiprintf_r+0x8c>
 8004bca:	9a03      	ldr	r2, [sp, #12]
 8004bcc:	1d11      	adds	r1, r2, #4
 8004bce:	6812      	ldr	r2, [r2, #0]
 8004bd0:	9103      	str	r1, [sp, #12]
 8004bd2:	2a00      	cmp	r2, #0
 8004bd4:	db01      	blt.n	8004bda <_vfiprintf_r+0x11e>
 8004bd6:	9207      	str	r2, [sp, #28]
 8004bd8:	e004      	b.n	8004be4 <_vfiprintf_r+0x128>
 8004bda:	4252      	negs	r2, r2
 8004bdc:	f043 0302 	orr.w	r3, r3, #2
 8004be0:	9207      	str	r2, [sp, #28]
 8004be2:	9304      	str	r3, [sp, #16]
 8004be4:	f898 3000 	ldrb.w	r3, [r8]
 8004be8:	2b2e      	cmp	r3, #46	; 0x2e
 8004bea:	d10e      	bne.n	8004c0a <_vfiprintf_r+0x14e>
 8004bec:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf2:	d138      	bne.n	8004c66 <_vfiprintf_r+0x1aa>
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	9203      	str	r2, [sp, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bfb8      	it	lt
 8004c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c04:	f108 0802 	add.w	r8, r8, #2
 8004c08:	9305      	str	r3, [sp, #20]
 8004c0a:	4d33      	ldr	r5, [pc, #204]	; (8004cd8 <_vfiprintf_r+0x21c>)
 8004c0c:	f898 1000 	ldrb.w	r1, [r8]
 8004c10:	2203      	movs	r2, #3
 8004c12:	4628      	mov	r0, r5
 8004c14:	f7fb fae4 	bl	80001e0 <memchr>
 8004c18:	b140      	cbz	r0, 8004c2c <_vfiprintf_r+0x170>
 8004c1a:	2340      	movs	r3, #64	; 0x40
 8004c1c:	1b40      	subs	r0, r0, r5
 8004c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8004c22:	9b04      	ldr	r3, [sp, #16]
 8004c24:	4303      	orrs	r3, r0
 8004c26:	f108 0801 	add.w	r8, r8, #1
 8004c2a:	9304      	str	r3, [sp, #16]
 8004c2c:	f898 1000 	ldrb.w	r1, [r8]
 8004c30:	482a      	ldr	r0, [pc, #168]	; (8004cdc <_vfiprintf_r+0x220>)
 8004c32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c36:	2206      	movs	r2, #6
 8004c38:	f108 0701 	add.w	r7, r8, #1
 8004c3c:	f7fb fad0 	bl	80001e0 <memchr>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d037      	beq.n	8004cb4 <_vfiprintf_r+0x1f8>
 8004c44:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <_vfiprintf_r+0x224>)
 8004c46:	bb1b      	cbnz	r3, 8004c90 <_vfiprintf_r+0x1d4>
 8004c48:	9b03      	ldr	r3, [sp, #12]
 8004c4a:	3307      	adds	r3, #7
 8004c4c:	f023 0307 	bic.w	r3, r3, #7
 8004c50:	3308      	adds	r3, #8
 8004c52:	9303      	str	r3, [sp, #12]
 8004c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c56:	444b      	add	r3, r9
 8004c58:	9309      	str	r3, [sp, #36]	; 0x24
 8004c5a:	e750      	b.n	8004afe <_vfiprintf_r+0x42>
 8004c5c:	fb05 3202 	mla	r2, r5, r2, r3
 8004c60:	2001      	movs	r0, #1
 8004c62:	4688      	mov	r8, r1
 8004c64:	e78a      	b.n	8004b7c <_vfiprintf_r+0xc0>
 8004c66:	2300      	movs	r3, #0
 8004c68:	f108 0801 	add.w	r8, r8, #1
 8004c6c:	9305      	str	r3, [sp, #20]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	250a      	movs	r5, #10
 8004c72:	4640      	mov	r0, r8
 8004c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c78:	3a30      	subs	r2, #48	; 0x30
 8004c7a:	2a09      	cmp	r2, #9
 8004c7c:	d903      	bls.n	8004c86 <_vfiprintf_r+0x1ca>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0c3      	beq.n	8004c0a <_vfiprintf_r+0x14e>
 8004c82:	9105      	str	r1, [sp, #20]
 8004c84:	e7c1      	b.n	8004c0a <_vfiprintf_r+0x14e>
 8004c86:	fb05 2101 	mla	r1, r5, r1, r2
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4680      	mov	r8, r0
 8004c8e:	e7f0      	b.n	8004c72 <_vfiprintf_r+0x1b6>
 8004c90:	ab03      	add	r3, sp, #12
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	4622      	mov	r2, r4
 8004c96:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <_vfiprintf_r+0x228>)
 8004c98:	a904      	add	r1, sp, #16
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f3af 8000 	nop.w
 8004ca0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ca4:	4681      	mov	r9, r0
 8004ca6:	d1d5      	bne.n	8004c54 <_vfiprintf_r+0x198>
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	065b      	lsls	r3, r3, #25
 8004cac:	f53f af7e 	bmi.w	8004bac <_vfiprintf_r+0xf0>
 8004cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cb2:	e77d      	b.n	8004bb0 <_vfiprintf_r+0xf4>
 8004cb4:	ab03      	add	r3, sp, #12
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	4622      	mov	r2, r4
 8004cba:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <_vfiprintf_r+0x228>)
 8004cbc:	a904      	add	r1, sp, #16
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f000 f888 	bl	8004dd4 <_printf_i>
 8004cc4:	e7ec      	b.n	8004ca0 <_vfiprintf_r+0x1e4>
 8004cc6:	bf00      	nop
 8004cc8:	08005220 	.word	0x08005220
 8004ccc:	08005260 	.word	0x08005260
 8004cd0:	08005240 	.word	0x08005240
 8004cd4:	08005200 	.word	0x08005200
 8004cd8:	08005266 	.word	0x08005266
 8004cdc:	0800526a 	.word	0x0800526a
 8004ce0:	00000000 	.word	0x00000000
 8004ce4:	08004a97 	.word	0x08004a97

08004ce8 <_printf_common>:
 8004ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cec:	4691      	mov	r9, r2
 8004cee:	461f      	mov	r7, r3
 8004cf0:	688a      	ldr	r2, [r1, #8]
 8004cf2:	690b      	ldr	r3, [r1, #16]
 8004cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	bfb8      	it	lt
 8004cfc:	4613      	movlt	r3, r2
 8004cfe:	f8c9 3000 	str.w	r3, [r9]
 8004d02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d06:	4606      	mov	r6, r0
 8004d08:	460c      	mov	r4, r1
 8004d0a:	b112      	cbz	r2, 8004d12 <_printf_common+0x2a>
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f8c9 3000 	str.w	r3, [r9]
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	0699      	lsls	r1, r3, #26
 8004d16:	bf42      	ittt	mi
 8004d18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d1c:	3302      	addmi	r3, #2
 8004d1e:	f8c9 3000 	strmi.w	r3, [r9]
 8004d22:	6825      	ldr	r5, [r4, #0]
 8004d24:	f015 0506 	ands.w	r5, r5, #6
 8004d28:	d107      	bne.n	8004d3a <_printf_common+0x52>
 8004d2a:	f104 0a19 	add.w	sl, r4, #25
 8004d2e:	68e3      	ldr	r3, [r4, #12]
 8004d30:	f8d9 2000 	ldr.w	r2, [r9]
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	42ab      	cmp	r3, r5
 8004d38:	dc28      	bgt.n	8004d8c <_printf_common+0xa4>
 8004d3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	3300      	adds	r3, #0
 8004d42:	bf18      	it	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	0692      	lsls	r2, r2, #26
 8004d48:	d42d      	bmi.n	8004da6 <_printf_common+0xbe>
 8004d4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d4e:	4639      	mov	r1, r7
 8004d50:	4630      	mov	r0, r6
 8004d52:	47c0      	blx	r8
 8004d54:	3001      	adds	r0, #1
 8004d56:	d020      	beq.n	8004d9a <_printf_common+0xb2>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	68e5      	ldr	r5, [r4, #12]
 8004d5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004d60:	f003 0306 	and.w	r3, r3, #6
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	bf08      	it	eq
 8004d68:	1aad      	subeq	r5, r5, r2
 8004d6a:	68a3      	ldr	r3, [r4, #8]
 8004d6c:	6922      	ldr	r2, [r4, #16]
 8004d6e:	bf0c      	ite	eq
 8004d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d74:	2500      	movne	r5, #0
 8004d76:	4293      	cmp	r3, r2
 8004d78:	bfc4      	itt	gt
 8004d7a:	1a9b      	subgt	r3, r3, r2
 8004d7c:	18ed      	addgt	r5, r5, r3
 8004d7e:	f04f 0900 	mov.w	r9, #0
 8004d82:	341a      	adds	r4, #26
 8004d84:	454d      	cmp	r5, r9
 8004d86:	d11a      	bne.n	8004dbe <_printf_common+0xd6>
 8004d88:	2000      	movs	r0, #0
 8004d8a:	e008      	b.n	8004d9e <_printf_common+0xb6>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4652      	mov	r2, sl
 8004d90:	4639      	mov	r1, r7
 8004d92:	4630      	mov	r0, r6
 8004d94:	47c0      	blx	r8
 8004d96:	3001      	adds	r0, #1
 8004d98:	d103      	bne.n	8004da2 <_printf_common+0xba>
 8004d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da2:	3501      	adds	r5, #1
 8004da4:	e7c3      	b.n	8004d2e <_printf_common+0x46>
 8004da6:	18e1      	adds	r1, r4, r3
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	2030      	movs	r0, #48	; 0x30
 8004dac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004db0:	4422      	add	r2, r4
 8004db2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004db6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dba:	3302      	adds	r3, #2
 8004dbc:	e7c5      	b.n	8004d4a <_printf_common+0x62>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4622      	mov	r2, r4
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	47c0      	blx	r8
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d0e6      	beq.n	8004d9a <_printf_common+0xb2>
 8004dcc:	f109 0901 	add.w	r9, r9, #1
 8004dd0:	e7d8      	b.n	8004d84 <_printf_common+0x9c>
	...

08004dd4 <_printf_i>:
 8004dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ddc:	460c      	mov	r4, r1
 8004dde:	7e09      	ldrb	r1, [r1, #24]
 8004de0:	b085      	sub	sp, #20
 8004de2:	296e      	cmp	r1, #110	; 0x6e
 8004de4:	4617      	mov	r7, r2
 8004de6:	4606      	mov	r6, r0
 8004de8:	4698      	mov	r8, r3
 8004dea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dec:	f000 80b3 	beq.w	8004f56 <_printf_i+0x182>
 8004df0:	d822      	bhi.n	8004e38 <_printf_i+0x64>
 8004df2:	2963      	cmp	r1, #99	; 0x63
 8004df4:	d036      	beq.n	8004e64 <_printf_i+0x90>
 8004df6:	d80a      	bhi.n	8004e0e <_printf_i+0x3a>
 8004df8:	2900      	cmp	r1, #0
 8004dfa:	f000 80b9 	beq.w	8004f70 <_printf_i+0x19c>
 8004dfe:	2958      	cmp	r1, #88	; 0x58
 8004e00:	f000 8083 	beq.w	8004f0a <_printf_i+0x136>
 8004e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e0c:	e032      	b.n	8004e74 <_printf_i+0xa0>
 8004e0e:	2964      	cmp	r1, #100	; 0x64
 8004e10:	d001      	beq.n	8004e16 <_printf_i+0x42>
 8004e12:	2969      	cmp	r1, #105	; 0x69
 8004e14:	d1f6      	bne.n	8004e04 <_printf_i+0x30>
 8004e16:	6820      	ldr	r0, [r4, #0]
 8004e18:	6813      	ldr	r3, [r2, #0]
 8004e1a:	0605      	lsls	r5, r0, #24
 8004e1c:	f103 0104 	add.w	r1, r3, #4
 8004e20:	d52a      	bpl.n	8004e78 <_printf_i+0xa4>
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6011      	str	r1, [r2, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	da03      	bge.n	8004e32 <_printf_i+0x5e>
 8004e2a:	222d      	movs	r2, #45	; 0x2d
 8004e2c:	425b      	negs	r3, r3
 8004e2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e32:	486f      	ldr	r0, [pc, #444]	; (8004ff0 <_printf_i+0x21c>)
 8004e34:	220a      	movs	r2, #10
 8004e36:	e039      	b.n	8004eac <_printf_i+0xd8>
 8004e38:	2973      	cmp	r1, #115	; 0x73
 8004e3a:	f000 809d 	beq.w	8004f78 <_printf_i+0x1a4>
 8004e3e:	d808      	bhi.n	8004e52 <_printf_i+0x7e>
 8004e40:	296f      	cmp	r1, #111	; 0x6f
 8004e42:	d020      	beq.n	8004e86 <_printf_i+0xb2>
 8004e44:	2970      	cmp	r1, #112	; 0x70
 8004e46:	d1dd      	bne.n	8004e04 <_printf_i+0x30>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	f043 0320 	orr.w	r3, r3, #32
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	e003      	b.n	8004e5a <_printf_i+0x86>
 8004e52:	2975      	cmp	r1, #117	; 0x75
 8004e54:	d017      	beq.n	8004e86 <_printf_i+0xb2>
 8004e56:	2978      	cmp	r1, #120	; 0x78
 8004e58:	d1d4      	bne.n	8004e04 <_printf_i+0x30>
 8004e5a:	2378      	movs	r3, #120	; 0x78
 8004e5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e60:	4864      	ldr	r0, [pc, #400]	; (8004ff4 <_printf_i+0x220>)
 8004e62:	e055      	b.n	8004f10 <_printf_i+0x13c>
 8004e64:	6813      	ldr	r3, [r2, #0]
 8004e66:	1d19      	adds	r1, r3, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6011      	str	r1, [r2, #0]
 8004e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e74:	2301      	movs	r3, #1
 8004e76:	e08c      	b.n	8004f92 <_printf_i+0x1be>
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6011      	str	r1, [r2, #0]
 8004e7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e80:	bf18      	it	ne
 8004e82:	b21b      	sxthne	r3, r3
 8004e84:	e7cf      	b.n	8004e26 <_printf_i+0x52>
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	6825      	ldr	r5, [r4, #0]
 8004e8a:	1d18      	adds	r0, r3, #4
 8004e8c:	6010      	str	r0, [r2, #0]
 8004e8e:	0628      	lsls	r0, r5, #24
 8004e90:	d501      	bpl.n	8004e96 <_printf_i+0xc2>
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	e002      	b.n	8004e9c <_printf_i+0xc8>
 8004e96:	0668      	lsls	r0, r5, #25
 8004e98:	d5fb      	bpl.n	8004e92 <_printf_i+0xbe>
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	4854      	ldr	r0, [pc, #336]	; (8004ff0 <_printf_i+0x21c>)
 8004e9e:	296f      	cmp	r1, #111	; 0x6f
 8004ea0:	bf14      	ite	ne
 8004ea2:	220a      	movne	r2, #10
 8004ea4:	2208      	moveq	r2, #8
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eac:	6865      	ldr	r5, [r4, #4]
 8004eae:	60a5      	str	r5, [r4, #8]
 8004eb0:	2d00      	cmp	r5, #0
 8004eb2:	f2c0 8095 	blt.w	8004fe0 <_printf_i+0x20c>
 8004eb6:	6821      	ldr	r1, [r4, #0]
 8004eb8:	f021 0104 	bic.w	r1, r1, #4
 8004ebc:	6021      	str	r1, [r4, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d13d      	bne.n	8004f3e <_printf_i+0x16a>
 8004ec2:	2d00      	cmp	r5, #0
 8004ec4:	f040 808e 	bne.w	8004fe4 <_printf_i+0x210>
 8004ec8:	4665      	mov	r5, ip
 8004eca:	2a08      	cmp	r2, #8
 8004ecc:	d10b      	bne.n	8004ee6 <_printf_i+0x112>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	07db      	lsls	r3, r3, #31
 8004ed2:	d508      	bpl.n	8004ee6 <_printf_i+0x112>
 8004ed4:	6923      	ldr	r3, [r4, #16]
 8004ed6:	6862      	ldr	r2, [r4, #4]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	bfde      	ittt	le
 8004edc:	2330      	movle	r3, #48	; 0x30
 8004ede:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ee2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ee6:	ebac 0305 	sub.w	r3, ip, r5
 8004eea:	6123      	str	r3, [r4, #16]
 8004eec:	f8cd 8000 	str.w	r8, [sp]
 8004ef0:	463b      	mov	r3, r7
 8004ef2:	aa03      	add	r2, sp, #12
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f7ff fef6 	bl	8004ce8 <_printf_common>
 8004efc:	3001      	adds	r0, #1
 8004efe:	d14d      	bne.n	8004f9c <_printf_i+0x1c8>
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	b005      	add	sp, #20
 8004f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f0a:	4839      	ldr	r0, [pc, #228]	; (8004ff0 <_printf_i+0x21c>)
 8004f0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f10:	6813      	ldr	r3, [r2, #0]
 8004f12:	6821      	ldr	r1, [r4, #0]
 8004f14:	1d1d      	adds	r5, r3, #4
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6015      	str	r5, [r2, #0]
 8004f1a:	060a      	lsls	r2, r1, #24
 8004f1c:	d50b      	bpl.n	8004f36 <_printf_i+0x162>
 8004f1e:	07ca      	lsls	r2, r1, #31
 8004f20:	bf44      	itt	mi
 8004f22:	f041 0120 	orrmi.w	r1, r1, #32
 8004f26:	6021      	strmi	r1, [r4, #0]
 8004f28:	b91b      	cbnz	r3, 8004f32 <_printf_i+0x15e>
 8004f2a:	6822      	ldr	r2, [r4, #0]
 8004f2c:	f022 0220 	bic.w	r2, r2, #32
 8004f30:	6022      	str	r2, [r4, #0]
 8004f32:	2210      	movs	r2, #16
 8004f34:	e7b7      	b.n	8004ea6 <_printf_i+0xd2>
 8004f36:	064d      	lsls	r5, r1, #25
 8004f38:	bf48      	it	mi
 8004f3a:	b29b      	uxthmi	r3, r3
 8004f3c:	e7ef      	b.n	8004f1e <_printf_i+0x14a>
 8004f3e:	4665      	mov	r5, ip
 8004f40:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f44:	fb02 3311 	mls	r3, r2, r1, r3
 8004f48:	5cc3      	ldrb	r3, [r0, r3]
 8004f4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f4e:	460b      	mov	r3, r1
 8004f50:	2900      	cmp	r1, #0
 8004f52:	d1f5      	bne.n	8004f40 <_printf_i+0x16c>
 8004f54:	e7b9      	b.n	8004eca <_printf_i+0xf6>
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	6825      	ldr	r5, [r4, #0]
 8004f5a:	6961      	ldr	r1, [r4, #20]
 8004f5c:	1d18      	adds	r0, r3, #4
 8004f5e:	6010      	str	r0, [r2, #0]
 8004f60:	0628      	lsls	r0, r5, #24
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	d501      	bpl.n	8004f6a <_printf_i+0x196>
 8004f66:	6019      	str	r1, [r3, #0]
 8004f68:	e002      	b.n	8004f70 <_printf_i+0x19c>
 8004f6a:	066a      	lsls	r2, r5, #25
 8004f6c:	d5fb      	bpl.n	8004f66 <_printf_i+0x192>
 8004f6e:	8019      	strh	r1, [r3, #0]
 8004f70:	2300      	movs	r3, #0
 8004f72:	6123      	str	r3, [r4, #16]
 8004f74:	4665      	mov	r5, ip
 8004f76:	e7b9      	b.n	8004eec <_printf_i+0x118>
 8004f78:	6813      	ldr	r3, [r2, #0]
 8004f7a:	1d19      	adds	r1, r3, #4
 8004f7c:	6011      	str	r1, [r2, #0]
 8004f7e:	681d      	ldr	r5, [r3, #0]
 8004f80:	6862      	ldr	r2, [r4, #4]
 8004f82:	2100      	movs	r1, #0
 8004f84:	4628      	mov	r0, r5
 8004f86:	f7fb f92b 	bl	80001e0 <memchr>
 8004f8a:	b108      	cbz	r0, 8004f90 <_printf_i+0x1bc>
 8004f8c:	1b40      	subs	r0, r0, r5
 8004f8e:	6060      	str	r0, [r4, #4]
 8004f90:	6863      	ldr	r3, [r4, #4]
 8004f92:	6123      	str	r3, [r4, #16]
 8004f94:	2300      	movs	r3, #0
 8004f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f9a:	e7a7      	b.n	8004eec <_printf_i+0x118>
 8004f9c:	6923      	ldr	r3, [r4, #16]
 8004f9e:	462a      	mov	r2, r5
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	47c0      	blx	r8
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d0aa      	beq.n	8004f00 <_printf_i+0x12c>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	079b      	lsls	r3, r3, #30
 8004fae:	d413      	bmi.n	8004fd8 <_printf_i+0x204>
 8004fb0:	68e0      	ldr	r0, [r4, #12]
 8004fb2:	9b03      	ldr	r3, [sp, #12]
 8004fb4:	4298      	cmp	r0, r3
 8004fb6:	bfb8      	it	lt
 8004fb8:	4618      	movlt	r0, r3
 8004fba:	e7a3      	b.n	8004f04 <_printf_i+0x130>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	464a      	mov	r2, r9
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	47c0      	blx	r8
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d09a      	beq.n	8004f00 <_printf_i+0x12c>
 8004fca:	3501      	adds	r5, #1
 8004fcc:	68e3      	ldr	r3, [r4, #12]
 8004fce:	9a03      	ldr	r2, [sp, #12]
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	42ab      	cmp	r3, r5
 8004fd4:	dcf2      	bgt.n	8004fbc <_printf_i+0x1e8>
 8004fd6:	e7eb      	b.n	8004fb0 <_printf_i+0x1dc>
 8004fd8:	2500      	movs	r5, #0
 8004fda:	f104 0919 	add.w	r9, r4, #25
 8004fde:	e7f5      	b.n	8004fcc <_printf_i+0x1f8>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1ac      	bne.n	8004f3e <_printf_i+0x16a>
 8004fe4:	7803      	ldrb	r3, [r0, #0]
 8004fe6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fee:	e76c      	b.n	8004eca <_printf_i+0xf6>
 8004ff0:	08005271 	.word	0x08005271
 8004ff4:	08005282 	.word	0x08005282

08004ff8 <_sbrk_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4c06      	ldr	r4, [pc, #24]	; (8005014 <_sbrk_r+0x1c>)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	4605      	mov	r5, r0
 8005000:	4608      	mov	r0, r1
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	f7fb fbf4 	bl	80007f0 <_sbrk>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_sbrk_r+0x1a>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	b103      	cbz	r3, 8005012 <_sbrk_r+0x1a>
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	200001d8 	.word	0x200001d8

08005018 <__sread>:
 8005018:	b510      	push	{r4, lr}
 800501a:	460c      	mov	r4, r1
 800501c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005020:	f000 f896 	bl	8005150 <_read_r>
 8005024:	2800      	cmp	r0, #0
 8005026:	bfab      	itete	ge
 8005028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800502a:	89a3      	ldrhlt	r3, [r4, #12]
 800502c:	181b      	addge	r3, r3, r0
 800502e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005032:	bfac      	ite	ge
 8005034:	6563      	strge	r3, [r4, #84]	; 0x54
 8005036:	81a3      	strhlt	r3, [r4, #12]
 8005038:	bd10      	pop	{r4, pc}

0800503a <__swrite>:
 800503a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800503e:	461f      	mov	r7, r3
 8005040:	898b      	ldrh	r3, [r1, #12]
 8005042:	05db      	lsls	r3, r3, #23
 8005044:	4605      	mov	r5, r0
 8005046:	460c      	mov	r4, r1
 8005048:	4616      	mov	r6, r2
 800504a:	d505      	bpl.n	8005058 <__swrite+0x1e>
 800504c:	2302      	movs	r3, #2
 800504e:	2200      	movs	r2, #0
 8005050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005054:	f000 f868 	bl	8005128 <_lseek_r>
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800505e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005062:	81a3      	strh	r3, [r4, #12]
 8005064:	4632      	mov	r2, r6
 8005066:	463b      	mov	r3, r7
 8005068:	4628      	mov	r0, r5
 800506a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800506e:	f000 b817 	b.w	80050a0 <_write_r>

08005072 <__sseek>:
 8005072:	b510      	push	{r4, lr}
 8005074:	460c      	mov	r4, r1
 8005076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507a:	f000 f855 	bl	8005128 <_lseek_r>
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	bf15      	itete	ne
 8005084:	6560      	strne	r0, [r4, #84]	; 0x54
 8005086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800508a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800508e:	81a3      	strheq	r3, [r4, #12]
 8005090:	bf18      	it	ne
 8005092:	81a3      	strhne	r3, [r4, #12]
 8005094:	bd10      	pop	{r4, pc}

08005096 <__sclose>:
 8005096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509a:	f000 b813 	b.w	80050c4 <_close_r>
	...

080050a0 <_write_r>:
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4c07      	ldr	r4, [pc, #28]	; (80050c0 <_write_r+0x20>)
 80050a4:	4605      	mov	r5, r0
 80050a6:	4608      	mov	r0, r1
 80050a8:	4611      	mov	r1, r2
 80050aa:	2200      	movs	r2, #0
 80050ac:	6022      	str	r2, [r4, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	f7fb fb4d 	bl	800074e <_write>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	d102      	bne.n	80050be <_write_r+0x1e>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	b103      	cbz	r3, 80050be <_write_r+0x1e>
 80050bc:	602b      	str	r3, [r5, #0]
 80050be:	bd38      	pop	{r3, r4, r5, pc}
 80050c0:	200001d8 	.word	0x200001d8

080050c4 <_close_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4c06      	ldr	r4, [pc, #24]	; (80050e0 <_close_r+0x1c>)
 80050c8:	2300      	movs	r3, #0
 80050ca:	4605      	mov	r5, r0
 80050cc:	4608      	mov	r0, r1
 80050ce:	6023      	str	r3, [r4, #0]
 80050d0:	f7fb fb59 	bl	8000786 <_close>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d102      	bne.n	80050de <_close_r+0x1a>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	b103      	cbz	r3, 80050de <_close_r+0x1a>
 80050dc:	602b      	str	r3, [r5, #0]
 80050de:	bd38      	pop	{r3, r4, r5, pc}
 80050e0:	200001d8 	.word	0x200001d8

080050e4 <_fstat_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4c07      	ldr	r4, [pc, #28]	; (8005104 <_fstat_r+0x20>)
 80050e8:	2300      	movs	r3, #0
 80050ea:	4605      	mov	r5, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	4611      	mov	r1, r2
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	f7fb fb54 	bl	800079e <_fstat>
 80050f6:	1c43      	adds	r3, r0, #1
 80050f8:	d102      	bne.n	8005100 <_fstat_r+0x1c>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	b103      	cbz	r3, 8005100 <_fstat_r+0x1c>
 80050fe:	602b      	str	r3, [r5, #0]
 8005100:	bd38      	pop	{r3, r4, r5, pc}
 8005102:	bf00      	nop
 8005104:	200001d8 	.word	0x200001d8

08005108 <_isatty_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4c06      	ldr	r4, [pc, #24]	; (8005124 <_isatty_r+0x1c>)
 800510c:	2300      	movs	r3, #0
 800510e:	4605      	mov	r5, r0
 8005110:	4608      	mov	r0, r1
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	f7fb fb53 	bl	80007be <_isatty>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_isatty_r+0x1a>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	b103      	cbz	r3, 8005122 <_isatty_r+0x1a>
 8005120:	602b      	str	r3, [r5, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	200001d8 	.word	0x200001d8

08005128 <_lseek_r>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	4c07      	ldr	r4, [pc, #28]	; (8005148 <_lseek_r+0x20>)
 800512c:	4605      	mov	r5, r0
 800512e:	4608      	mov	r0, r1
 8005130:	4611      	mov	r1, r2
 8005132:	2200      	movs	r2, #0
 8005134:	6022      	str	r2, [r4, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	f7fb fb4c 	bl	80007d4 <_lseek>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_lseek_r+0x1e>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	b103      	cbz	r3, 8005146 <_lseek_r+0x1e>
 8005144:	602b      	str	r3, [r5, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	200001d8 	.word	0x200001d8

0800514c <__malloc_lock>:
 800514c:	4770      	bx	lr

0800514e <__malloc_unlock>:
 800514e:	4770      	bx	lr

08005150 <_read_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4c07      	ldr	r4, [pc, #28]	; (8005170 <_read_r+0x20>)
 8005154:	4605      	mov	r5, r0
 8005156:	4608      	mov	r0, r1
 8005158:	4611      	mov	r1, r2
 800515a:	2200      	movs	r2, #0
 800515c:	6022      	str	r2, [r4, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	f7fb fad8 	bl	8000714 <_read>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d102      	bne.n	800516e <_read_r+0x1e>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	b103      	cbz	r3, 800516e <_read_r+0x1e>
 800516c:	602b      	str	r3, [r5, #0]
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	200001d8 	.word	0x200001d8

08005174 <_init>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	bf00      	nop
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr

08005180 <_fini>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr
