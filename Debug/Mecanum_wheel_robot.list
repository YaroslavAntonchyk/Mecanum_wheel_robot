
Mecanum_wheel_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003484  08003484  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003484  08003484  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003484  08003484  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003488  08003488  00013488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800348c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003498  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003498  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092a1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001968  00000000  00000000  000292dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000758  00000000  00000000  0002ac48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000670  00000000  00000000  0002b3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c284  00000000  00000000  0002ba10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000857f  00000000  00000000  00047c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6cc5  00000000  00000000  00050213  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bd8  00000000  00000000  000f6f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003424 	.word	0x08003424

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003424 	.word	0x08003424

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b40      	ldr	r3, [pc, #256]	; (80002ec <MX_GPIO_Init+0x118>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a3f      	ldr	r2, [pc, #252]	; (80002ec <MX_GPIO_Init+0x118>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b3d      	ldr	r3, [pc, #244]	; (80002ec <MX_GPIO_Init+0x118>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000202:	4b3a      	ldr	r3, [pc, #232]	; (80002ec <MX_GPIO_Init+0x118>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a39      	ldr	r2, [pc, #228]	; (80002ec <MX_GPIO_Init+0x118>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b37      	ldr	r3, [pc, #220]	; (80002ec <MX_GPIO_Init+0x118>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b34      	ldr	r3, [pc, #208]	; (80002ec <MX_GPIO_Init+0x118>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a33      	ldr	r2, [pc, #204]	; (80002ec <MX_GPIO_Init+0x118>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b31      	ldr	r3, [pc, #196]	; (80002ec <MX_GPIO_Init+0x118>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b2e      	ldr	r3, [pc, #184]	; (80002ec <MX_GPIO_Init+0x118>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a2d      	ldr	r2, [pc, #180]	; (80002ec <MX_GPIO_Init+0x118>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b2b      	ldr	r3, [pc, #172]	; (80002ec <MX_GPIO_Init+0x118>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Z_DIR_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000254:	f000 fd84 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin|Z_STEP_Pin 
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800025e:	4824      	ldr	r0, [pc, #144]	; (80002f0 <MX_GPIO_Init+0x11c>)
 8000260:	f000 fd7e 	bl	8000d60 <HAL_GPIO_WritePin>
                          |A_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_STEP_GPIO_Port, A_STEP_Pin, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2180      	movs	r1, #128	; 0x80
 8000268:	4822      	ldr	r0, [pc, #136]	; (80002f4 <MX_GPIO_Init+0x120>)
 800026a:	f000 fd79 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800026e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <MX_GPIO_Init+0x124>)
 8000276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000278:	2300      	movs	r3, #0
 800027a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	4619      	mov	r1, r3
 8000282:	481c      	ldr	r0, [pc, #112]	; (80002f4 <MX_GPIO_Init+0x120>)
 8000284:	f000 fbe2 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Z_DIR_Pin|X_STEP_Pin;
 8000288:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800028c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028e:	2301      	movs	r3, #1
 8000290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2300      	movs	r3, #0
 8000298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	4619      	mov	r1, r3
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a4:	f000 fbd2 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin|Z_STEP_Pin 
 80002a8:	f44f 638f 	mov.w	r3, #1144	; 0x478
 80002ac:	617b      	str	r3, [r7, #20]
                          |A_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ae:	2301      	movs	r3, #1
 80002b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b6:	2300      	movs	r3, #0
 80002b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	4619      	mov	r1, r3
 80002c0:	480b      	ldr	r0, [pc, #44]	; (80002f0 <MX_GPIO_Init+0x11c>)
 80002c2:	f000 fbc3 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A_STEP_Pin;
 80002c6:	2380      	movs	r3, #128	; 0x80
 80002c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ce:	2300      	movs	r3, #0
 80002d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d2:	2300      	movs	r3, #0
 80002d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A_STEP_GPIO_Port, &GPIO_InitStruct);
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	4619      	mov	r1, r3
 80002dc:	4805      	ldr	r0, [pc, #20]	; (80002f4 <MX_GPIO_Init+0x120>)
 80002de:	f000 fbb5 	bl	8000a4c <HAL_GPIO_Init>

}
 80002e2:	bf00      	nop
 80002e4:	3728      	adds	r7, #40	; 0x28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40021000 	.word	0x40021000
 80002f0:	48000400 	.word	0x48000400
 80002f4:	48000800 	.word	0x48000800
 80002f8:	10210000 	.word	0x10210000

080002fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000300:	f000 f9cc 	bl	800069c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000304:	f000 f816 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000308:	f7ff ff64 	bl	80001d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800030c:	f000 f8ea 	bl	80004e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &message, 1);
 8000310:	2201      	movs	r2, #1
 8000312:	4906      	ldr	r1, [pc, #24]	; (800032c <main+0x30>)
 8000314:	4806      	ldr	r0, [pc, #24]	; (8000330 <main+0x34>)
 8000316:	f002 f969 	bl	80025ec <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800031a:	2120      	movs	r1, #32
 800031c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000320:	f000 fd36 	bl	8000d90 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000324:	20c8      	movs	r0, #200	; 0xc8
 8000326:	f000 fa1f 	bl	8000768 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800032a:	e7f6      	b.n	800031a <main+0x1e>
 800032c:	2000003c 	.word	0x2000003c
 8000330:	20000040 	.word	0x20000040

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b0a6      	sub	sp, #152	; 0x98
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800033e:	2228      	movs	r2, #40	; 0x28
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f003 f866 	bl	8003414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	609a      	str	r2, [r3, #8]
 8000354:	60da      	str	r2, [r3, #12]
 8000356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2258      	movs	r2, #88	; 0x58
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f003 f858 	bl	8003414 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000364:	2302      	movs	r3, #2
 8000366:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036c:	2310      	movs	r3, #16
 800036e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000372:	2302      	movs	r3, #2
 8000374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800037c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000380:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000384:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fd16 	bl	8000dc4 <HAL_RCC_OscConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800039e:	f000 f827 	bl	80003f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	230f      	movs	r3, #15
 80003a4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a6:	2302      	movs	r3, #2
 80003a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003bc:	2102      	movs	r1, #2
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 fc16 	bl	8001bf0 <HAL_RCC_ClockConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ca:	f000 f811 	bl	80003f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	4618      	mov	r0, r3
 80003da:	f001 fe3f 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003e4:	f000 f804 	bl	80003f0 <Error_Handler>
  }
}
 80003e8:	bf00      	nop
 80003ea:	3798      	adds	r7, #152	; 0x98
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
	...

08000400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <HAL_MspInit+0x44>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <HAL_MspInit+0x44>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6193      	str	r3, [r2, #24]
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <HAL_MspInit+0x44>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041e:	4b09      	ldr	r3, [pc, #36]	; (8000444 <HAL_MspInit+0x44>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	4a08      	ldr	r2, [pc, #32]	; (8000444 <HAL_MspInit+0x44>)
 8000424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000428:	61d3      	str	r3, [r2, #28]
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <HAL_MspInit+0x44>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000436:	2007      	movs	r0, #7
 8000438:	f000 fa88 	bl	800094c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40021000 	.word	0x40021000

08000448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <HardFault_Handler+0x4>

0800045c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <MemManage_Handler+0x4>

08000462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000466:	e7fe      	b.n	8000466 <BusFault_Handler+0x4>

08000468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800046c:	e7fe      	b.n	800046c <UsageFault_Handler+0x4>

0800046e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049c:	f000 f944 	bl	8000728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004a8:	4802      	ldr	r0, [pc, #8]	; (80004b4 <USART2_IRQHandler+0x10>)
 80004aa:	f002 f941 	bl	8002730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000040 	.word	0x20000040

080004b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <SystemInit+0x28>)
 80004be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004c2:	4a07      	ldr	r2, [pc, #28]	; (80004e0 <SystemInit+0x28>)
 80004c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <SystemInit+0x28>)
 80004ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004d2:	609a      	str	r2, [r3, #8]
#endif
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	e000ed00 	.word	0xe000ed00

080004e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004ea:	4a15      	ldr	r2, [pc, #84]	; (8000540 <MX_USART2_UART_Init+0x5c>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USART2_UART_Init+0x58>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000528:	f001 ffb6 	bl	8002498 <HAL_UART_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000532:	f7ff ff5d 	bl	80003f0 <Error_Handler>
  }

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000040 	.word	0x20000040
 8000540:	40004400 	.word	0x40004400

08000544 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <HAL_UART_MspInit+0x8c>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d130      	bne.n	80005c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <HAL_UART_MspInit+0x90>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	4a1a      	ldr	r2, [pc, #104]	; (80005d4 <HAL_UART_MspInit+0x90>)
 800056c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000570:	61d3      	str	r3, [r2, #28]
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <HAL_UART_MspInit+0x90>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <HAL_UART_MspInit+0x90>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <HAL_UART_MspInit+0x90>)
 8000584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HAL_UART_MspInit+0x90>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000596:	230c      	movs	r3, #12
 8000598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059a:	2302      	movs	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005a6:	2307      	movs	r3, #7
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4619      	mov	r1, r3
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b4:	f000 fa4a 	bl	8000a4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2026      	movs	r0, #38	; 0x26
 80005be:	f000 f9d0 	bl	8000962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005c2:	2026      	movs	r0, #38	; 0x26
 80005c4:	f000 f9e9 	bl	800099a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */
  /* USER CODE END USART2_MspInit 1 */
  }
}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	; 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40004400 	.word	0x40004400
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_UART_RxCpltCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <HAL_UART_RxCpltCallback+0x58>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d11e      	bne.n	8000628 <HAL_UART_RxCpltCallback+0x50>
	{
		if(message == 'q')
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_UART_RxCpltCallback+0x5c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b71      	cmp	r3, #113	; 0x71
 80005f0:	d115      	bne.n	800061e <HAL_UART_RxCpltCallback+0x46>
		{
			message_out_len = sprintf((char *)message_out, "Hello world!\r\n");
 80005f2:	4a11      	ldr	r2, [pc, #68]	; (8000638 <HAL_UART_RxCpltCallback+0x60>)
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <HAL_UART_RxCpltCallback+0x64>)
 80005f6:	4614      	mov	r4, r2
 80005f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005fa:	6020      	str	r0, [r4, #0]
 80005fc:	6061      	str	r1, [r4, #4]
 80005fe:	60a2      	str	r2, [r4, #8]
 8000600:	881a      	ldrh	r2, [r3, #0]
 8000602:	789b      	ldrb	r3, [r3, #2]
 8000604:	81a2      	strh	r2, [r4, #12]
 8000606:	73a3      	strb	r3, [r4, #14]
 8000608:	230e      	movs	r3, #14
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_UART_RxCpltCallback+0x68>)
 800060e:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message_out, message_out_len);
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <HAL_UART_RxCpltCallback+0x68>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4908      	ldr	r1, [pc, #32]	; (8000638 <HAL_UART_RxCpltCallback+0x60>)
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <HAL_UART_RxCpltCallback+0x6c>)
 800061a:	f001 ff8b 	bl	8002534 <HAL_UART_Transmit_IT>
		}
		HAL_UART_Receive_IT(&huart2, &message, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	4904      	ldr	r1, [pc, #16]	; (8000634 <HAL_UART_RxCpltCallback+0x5c>)
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <HAL_UART_RxCpltCallback+0x6c>)
 8000624:	f001 ffe2 	bl	80025ec <HAL_UART_Receive_IT>
	}
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	40004400 	.word	0x40004400
 8000634:	2000003c 	.word	0x2000003c
 8000638:	20000028 	.word	0x20000028
 800063c:	0800343c 	.word	0x0800343c
 8000640:	2000003e 	.word	0x2000003e
 8000644:	20000040 	.word	0x20000040

08000648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000680 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800064c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800064e:	e003      	b.n	8000658 <LoopCopyDataInit>

08000650 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000652:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000654:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000656:	3104      	adds	r1, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <LoopForever+0xa>)
	ldr	r3, =_edata
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <LoopForever+0xe>)
	adds	r2, r0, r1
 800065c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800065e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000660:	d3f6      	bcc.n	8000650 <CopyDataInit>
	ldr	r2, =_sbss
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000664:	e002      	b.n	800066c <LoopFillZerobss>

08000666 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000666:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000668:	f842 3b04 	str.w	r3, [r2], #4

0800066c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <LoopForever+0x16>)
	cmp	r2, r3
 800066e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000670:	d3f9      	bcc.n	8000666 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000672:	f7ff ff21 	bl	80004b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000676:	f002 fea9 	bl	80033cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800067a:	f7ff fe3f 	bl	80002fc <main>

0800067e <LoopForever>:

LoopForever:
    b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000680:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000684:	0800348c 	.word	0x0800348c
	ldr	r0, =_sdata
 8000688:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800068c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000690:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000694:	200000c4 	.word	0x200000c4

08000698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_2_IRQHandler>
	...

0800069c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <HAL_Init+0x28>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <HAL_Init+0x28>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f94d 	bl	800094c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f808 	bl	80006c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b8:	f7ff fea2 	bl	8000400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40022000 	.word	0x40022000

080006c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_InitTick+0x54>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_InitTick+0x58>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006de:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f965 	bl	80009b6 <HAL_SYSTICK_Config>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e00e      	b.n	8000714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d80a      	bhi.n	8000712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	f04f 30ff 	mov.w	r0, #4294967295
 8000704:	f000 f92d 	bl	8000962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000708:	4a06      	ldr	r2, [pc, #24]	; (8000724 <HAL_InitTick+0x5c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
 8000710:	e000      	b.n	8000714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000000 	.word	0x20000000
 8000720:	20000008 	.word	0x20000008
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_IncTick+0x20>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_IncTick+0x24>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4413      	add	r3, r2
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <HAL_IncTick+0x24>)
 800073a:	6013      	str	r3, [r2, #0]
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000008 	.word	0x20000008
 800074c:	200000c0 	.word	0x200000c0

08000750 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;  
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <HAL_GetTick+0x14>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200000c0 	.word	0x200000c0

08000768 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff ffee 	bl	8000750 <HAL_GetTick>
 8000774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000780:	d005      	beq.n	800078e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_Delay+0x40>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800078e:	bf00      	nop
 8000790:	f7ff ffde 	bl	8000750 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8f7      	bhi.n	8000790 <HAL_Delay+0x28>
  {
  }
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000008 	.word	0x20000008

080007ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	60d3      	str	r3, [r2, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <__NVIC_GetPriorityGrouping+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 0307 	and.w	r3, r3, #7
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	db0b      	blt.n	800083a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f003 021f 	and.w	r2, r3, #31
 8000828:	4907      	ldr	r1, [pc, #28]	; (8000848 <__NVIC_EnableIRQ+0x38>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	095b      	lsrs	r3, r3, #5
 8000830:	2001      	movs	r0, #1
 8000832:	fa00 f202 	lsl.w	r2, r0, r2
 8000836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000918:	d301      	bcc.n	800091e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091a:	2301      	movs	r3, #1
 800091c:	e00f      	b.n	800093e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <SysTick_Config+0x40>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000926:	210f      	movs	r1, #15
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f7ff ff8e 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <SysTick_Config+0x40>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <SysTick_Config+0x40>)
 8000938:	2207      	movs	r2, #7
 800093a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ff29 	bl	80007ac <__NVIC_SetPriorityGrouping>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000974:	f7ff ff3e 	bl	80007f4 <__NVIC_GetPriorityGrouping>
 8000978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	6978      	ldr	r0, [r7, #20]
 8000980:	f7ff ff8e 	bl	80008a0 <NVIC_EncodePriority>
 8000984:	4602      	mov	r2, r0
 8000986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff5d 	bl	800084c <__NVIC_SetPriority>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff31 	bl	8000810 <__NVIC_EnableIRQ>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ffa2 	bl	8000908 <SysTick_Config>
 80009c4:	4603      	mov	r3, r0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d005      	beq.n	80009f0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e027      	b.n	8000a40 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f022 020e 	bic.w	r2, r2, #14
 80009fe:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 0201 	bic.w	r2, r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2201      	movs	r2, #1
 8000a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d003      	beq.n	8000a40 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	4798      	blx	r3
    } 
  }
  return status;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5a:	e160      	b.n	8000d1e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 8152 	beq.w	8000d18 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x38>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b12      	cmp	r3, #18
 8000a82:	d123      	bne.n	8000acc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	08da      	lsrs	r2, r3, #3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3208      	adds	r2, #8
 8000a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f003 0307 	and.w	r3, r3, #7
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	691a      	ldr	r2, [r3, #16]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	08da      	lsrs	r2, r3, #3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	6939      	ldr	r1, [r7, #16]
 8000ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 0203 	and.w	r2, r3, #3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d00b      	beq.n	8000b20 <HAL_GPIO_Init+0xd4>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d007      	beq.n	8000b20 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b14:	2b11      	cmp	r3, #17
 8000b16:	d003      	beq.n	8000b20 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b12      	cmp	r3, #18
 8000b1e:	d130      	bne.n	8000b82 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b56:	2201      	movs	r2, #1
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	091b      	lsrs	r3, r3, #4
 8000b6c:	f003 0201 	and.w	r2, r3, #1
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 80ac 	beq.w	8000d18 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	4b5e      	ldr	r3, [pc, #376]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a5d      	ldr	r2, [pc, #372]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b5b      	ldr	r3, [pc, #364]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd8:	4a59      	ldr	r2, [pc, #356]	; (8000d40 <HAL_GPIO_Init+0x2f4>)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3302      	adds	r3, #2
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c02:	d025      	beq.n	8000c50 <HAL_GPIO_Init+0x204>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a4f      	ldr	r2, [pc, #316]	; (8000d44 <HAL_GPIO_Init+0x2f8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d01f      	beq.n	8000c4c <HAL_GPIO_Init+0x200>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a4e      	ldr	r2, [pc, #312]	; (8000d48 <HAL_GPIO_Init+0x2fc>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d019      	beq.n	8000c48 <HAL_GPIO_Init+0x1fc>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a4d      	ldr	r2, [pc, #308]	; (8000d4c <HAL_GPIO_Init+0x300>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d013      	beq.n	8000c44 <HAL_GPIO_Init+0x1f8>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a4c      	ldr	r2, [pc, #304]	; (8000d50 <HAL_GPIO_Init+0x304>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d00d      	beq.n	8000c40 <HAL_GPIO_Init+0x1f4>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a4b      	ldr	r2, [pc, #300]	; (8000d54 <HAL_GPIO_Init+0x308>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d007      	beq.n	8000c3c <HAL_GPIO_Init+0x1f0>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a4a      	ldr	r2, [pc, #296]	; (8000d58 <HAL_GPIO_Init+0x30c>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d101      	bne.n	8000c38 <HAL_GPIO_Init+0x1ec>
 8000c34:	2306      	movs	r3, #6
 8000c36:	e00c      	b.n	8000c52 <HAL_GPIO_Init+0x206>
 8000c38:	2307      	movs	r3, #7
 8000c3a:	e00a      	b.n	8000c52 <HAL_GPIO_Init+0x206>
 8000c3c:	2305      	movs	r3, #5
 8000c3e:	e008      	b.n	8000c52 <HAL_GPIO_Init+0x206>
 8000c40:	2304      	movs	r3, #4
 8000c42:	e006      	b.n	8000c52 <HAL_GPIO_Init+0x206>
 8000c44:	2303      	movs	r3, #3
 8000c46:	e004      	b.n	8000c52 <HAL_GPIO_Init+0x206>
 8000c48:	2302      	movs	r3, #2
 8000c4a:	e002      	b.n	8000c52 <HAL_GPIO_Init+0x206>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <HAL_GPIO_Init+0x206>
 8000c50:	2300      	movs	r3, #0
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	f002 0203 	and.w	r2, r2, #3
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	4093      	lsls	r3, r2
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c62:	4937      	ldr	r1, [pc, #220]	; (8000d40 <HAL_GPIO_Init+0x2f4>)
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	3302      	adds	r3, #2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c70:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <HAL_GPIO_Init+0x310>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c94:	4a31      	ldr	r2, [pc, #196]	; (8000d5c <HAL_GPIO_Init+0x310>)
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c9a:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <HAL_GPIO_Init+0x310>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cbe:	4a27      	ldr	r2, [pc, #156]	; (8000d5c <HAL_GPIO_Init+0x310>)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc4:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <HAL_GPIO_Init+0x310>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ce8:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <HAL_GPIO_Init+0x310>)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_GPIO_Init+0x310>)
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <HAL_GPIO_Init+0x310>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	fa22 f303 	lsr.w	r3, r2, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f47f ae97 	bne.w	8000a5c <HAL_GPIO_Init+0x10>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	48000400 	.word	0x48000400
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	48000c00 	.word	0x48000c00
 8000d50:	48001000 	.word	0x48001000
 8000d54:	48001400 	.word	0x48001400
 8000d58:	48001800 	.word	0x48001800
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d70:	787b      	ldrb	r3, [r7, #1]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d76:	887a      	ldrh	r2, [r7, #2]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d7e:	887a      	ldrh	r2, [r7, #2]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695a      	ldr	r2, [r3, #20]
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	041a      	lsls	r2, r3, #16
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000db0:	e002      	b.n	8000db8 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db2:	887a      	ldrh	r2, [r7, #2]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	619a      	str	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f000 bf01 	b.w	8001be0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 8160 	beq.w	80010ae <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dee:	4bae      	ldr	r3, [pc, #696]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d00c      	beq.n	8000e14 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dfa:	4bab      	ldr	r3, [pc, #684]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b08      	cmp	r3, #8
 8000e04:	d159      	bne.n	8000eba <HAL_RCC_OscConfig+0xf6>
 8000e06:	4ba8      	ldr	r3, [pc, #672]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e12:	d152      	bne.n	8000eba <HAL_RCC_OscConfig+0xf6>
 8000e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e18:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e20:	fa93 f3a3 	rbit	r3, r3
 8000e24:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e28:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2c:	fab3 f383 	clz	r3, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d102      	bne.n	8000e46 <HAL_RCC_OscConfig+0x82>
 8000e40:	4b99      	ldr	r3, [pc, #612]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	e015      	b.n	8000e72 <HAL_RCC_OscConfig+0xae>
 8000e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e4a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e52:	fa93 f3a3 	rbit	r3, r3
 8000e56:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e5e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e62:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e6e:	4b8e      	ldr	r3, [pc, #568]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e76:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e7a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e7e:	fa92 f2a2 	rbit	r2, r2
 8000e82:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e86:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e8a:	fab2 f282 	clz	r2, r2
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	f042 0220 	orr.w	r2, r2, #32
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	f002 021f 	and.w	r2, r2, #31
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8102 	beq.w	80010ac <HAL_RCC_OscConfig+0x2e8>
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 80fc 	bne.w	80010ac <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f000 be93 	b.w	8001be0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec4:	d106      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x110>
 8000ec6:	4b78      	ldr	r3, [pc, #480]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a77      	ldr	r2, [pc, #476]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e030      	b.n	8000f36 <HAL_RCC_OscConfig+0x172>
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x134>
 8000ede:	4b72      	ldr	r3, [pc, #456]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a71      	ldr	r2, [pc, #452]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b6f      	ldr	r3, [pc, #444]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a6e      	ldr	r2, [pc, #440]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e01e      	b.n	8000f36 <HAL_RCC_OscConfig+0x172>
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f02:	d10c      	bne.n	8000f1e <HAL_RCC_OscConfig+0x15a>
 8000f04:	4b68      	ldr	r3, [pc, #416]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a67      	ldr	r2, [pc, #412]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b65      	ldr	r3, [pc, #404]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a64      	ldr	r2, [pc, #400]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	e00b      	b.n	8000f36 <HAL_RCC_OscConfig+0x172>
 8000f1e:	4b62      	ldr	r3, [pc, #392]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a61      	ldr	r2, [pc, #388]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b5f      	ldr	r3, [pc, #380]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a5e      	ldr	r2, [pc, #376]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d059      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fc06 	bl	8000750 <HAL_GetTick>
 8000f44:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f48:	e00a      	b.n	8000f60 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fc01 	bl	8000750 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b64      	cmp	r3, #100	; 0x64
 8000f58:	d902      	bls.n	8000f60 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	f000 be40 	b.w	8001be0 <HAL_RCC_OscConfig+0xe1c>
 8000f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f64:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f68:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000f74:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d102      	bne.n	8000f92 <HAL_RCC_OscConfig+0x1ce>
 8000f8c:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	e015      	b.n	8000fbe <HAL_RCC_OscConfig+0x1fa>
 8000f92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f96:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f9e:	fa93 f3a3 	rbit	r3, r3
 8000fa2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000faa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fc2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000fc6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000fca:	fa92 f2a2 	rbit	r2, r2
 8000fce:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000fd2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fd6:	fab2 f282 	clz	r2, r2
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	f042 0220 	orr.w	r2, r2, #32
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	f002 021f 	and.w	r2, r2, #31
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0ab      	beq.n	8000f4a <HAL_RCC_OscConfig+0x186>
 8000ff2:	e05c      	b.n	80010ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fbac 	bl	8000750 <HAL_GetTick>
 8000ff8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffc:	e00a      	b.n	8001014 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffe:	f7ff fba7 	bl	8000750 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d902      	bls.n	8001014 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	f000 bde6 	b.w	8001be0 <HAL_RCC_OscConfig+0xe1c>
 8001014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001018:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001020:	fa93 f3a3 	rbit	r3, r3
 8001024:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001028:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102c:	fab3 f383 	clz	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d102      	bne.n	8001046 <HAL_RCC_OscConfig+0x282>
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	e015      	b.n	8001072 <HAL_RCC_OscConfig+0x2ae>
 8001046:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800104a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800105a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800105e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001062:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001066:	fa93 f3a3 	rbit	r3, r3
 800106a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_RCC_OscConfig+0x2e4>)
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001076:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800107a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800107e:	fa92 f2a2 	rbit	r2, r2
 8001082:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001086:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800108a:	fab2 f282 	clz	r2, r2
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	f042 0220 	orr.w	r2, r2, #32
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	f002 021f 	and.w	r2, r2, #31
 800109a:	2101      	movs	r1, #1
 800109c:	fa01 f202 	lsl.w	r2, r1, r2
 80010a0:	4013      	ands	r3, r2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1ab      	bne.n	8000ffe <HAL_RCC_OscConfig+0x23a>
 80010a6:	e002      	b.n	80010ae <HAL_RCC_OscConfig+0x2ea>
 80010a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 8170 	beq.w	800139e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010be:	4bd0      	ldr	r3, [pc, #832]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00c      	beq.n	80010e4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010ca:	4bcd      	ldr	r3, [pc, #820]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d16d      	bne.n	80011b2 <HAL_RCC_OscConfig+0x3ee>
 80010d6:	4bca      	ldr	r3, [pc, #808]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010e2:	d166      	bne.n	80011b2 <HAL_RCC_OscConfig+0x3ee>
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80010f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	fab3 f383 	clz	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	095b      	lsrs	r3, r3, #5
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b01      	cmp	r3, #1
 800110c:	d102      	bne.n	8001114 <HAL_RCC_OscConfig+0x350>
 800110e:	4bbc      	ldr	r3, [pc, #752]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	e013      	b.n	800113c <HAL_RCC_OscConfig+0x378>
 8001114:	2302      	movs	r3, #2
 8001116:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800112c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001138:	4bb1      	ldr	r3, [pc, #708]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	2202      	movs	r2, #2
 800113e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001142:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001146:	fa92 f2a2 	rbit	r2, r2
 800114a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800114e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001152:	fab2 f282 	clz	r2, r2
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	f042 0220 	orr.w	r2, r2, #32
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	f002 021f 	and.w	r2, r2, #31
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f202 	lsl.w	r2, r1, r2
 8001168:	4013      	ands	r3, r2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <HAL_RCC_OscConfig+0x3ba>
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d002      	beq.n	800117e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	f000 bd31 	b.w	8001be0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117e:	4ba0      	ldr	r3, [pc, #640]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	21f8      	movs	r1, #248	; 0xf8
 800118e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001196:	fa91 f1a1 	rbit	r1, r1
 800119a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800119e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011a2:	fab1 f181 	clz	r1, r1
 80011a6:	b2c9      	uxtb	r1, r1
 80011a8:	408b      	lsls	r3, r1
 80011aa:	4995      	ldr	r1, [pc, #596]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b0:	e0f5      	b.n	800139e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8085 	beq.w	80012c8 <HAL_RCC_OscConfig+0x504>
 80011be:	2301      	movs	r3, #1
 80011c0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80011d0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d4:	fab3 f383 	clz	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	461a      	mov	r2, r3
 80011e6:	2301      	movs	r3, #1
 80011e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff fab1 	bl	8000750 <HAL_GetTick>
 80011ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f2:	e00a      	b.n	800120a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff faac 	bl	8000750 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d902      	bls.n	800120a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	f000 bceb 	b.w	8001be0 <HAL_RCC_OscConfig+0xe1c>
 800120a:	2302      	movs	r3, #2
 800120c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001214:	fa93 f3a3 	rbit	r3, r3
 8001218:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800121c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	fab3 f383 	clz	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d102      	bne.n	800123a <HAL_RCC_OscConfig+0x476>
 8001234:	4b72      	ldr	r3, [pc, #456]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	e013      	b.n	8001262 <HAL_RCC_OscConfig+0x49e>
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001240:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001244:	fa93 f3a3 	rbit	r3, r3
 8001248:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001252:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800125e:	4b68      	ldr	r3, [pc, #416]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	2202      	movs	r2, #2
 8001264:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001268:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800126c:	fa92 f2a2 	rbit	r2, r2
 8001270:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001274:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001278:	fab2 f282 	clz	r2, r2
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	f042 0220 	orr.w	r2, r2, #32
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	f002 021f 	and.w	r2, r2, #31
 8001288:	2101      	movs	r1, #1
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	4013      	ands	r3, r2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0af      	beq.n	80011f4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001294:	4b5a      	ldr	r3, [pc, #360]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	21f8      	movs	r1, #248	; 0xf8
 80012a4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80012ac:	fa91 f1a1 	rbit	r1, r1
 80012b0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80012b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012b8:	fab1 f181 	clz	r1, r1
 80012bc:	b2c9      	uxtb	r1, r1
 80012be:	408b      	lsls	r3, r1
 80012c0:	494f      	ldr	r1, [pc, #316]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
 80012c6:	e06a      	b.n	800139e <HAL_RCC_OscConfig+0x5da>
 80012c8:	2301      	movs	r3, #1
 80012ca:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80012da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	461a      	mov	r2, r3
 80012f0:	2300      	movs	r3, #0
 80012f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fa2c 	bl	8000750 <HAL_GetTick>
 80012f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fc:	e00a      	b.n	8001314 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fa27 	bl	8000750 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d902      	bls.n	8001314 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	f000 bc66 	b.w	8001be0 <HAL_RCC_OscConfig+0xe1c>
 8001314:	2302      	movs	r3, #2
 8001316:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001326:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	fab3 f383 	clz	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b01      	cmp	r3, #1
 800133c:	d102      	bne.n	8001344 <HAL_RCC_OscConfig+0x580>
 800133e:	4b30      	ldr	r3, [pc, #192]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	e013      	b.n	800136c <HAL_RCC_OscConfig+0x5a8>
 8001344:	2302      	movs	r3, #2
 8001346:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001356:	2302      	movs	r3, #2
 8001358:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800135c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001360:	fa93 f3a3 	rbit	r3, r3
 8001364:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <HAL_RCC_OscConfig+0x63c>)
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	2202      	movs	r2, #2
 800136e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001372:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001376:	fa92 f2a2 	rbit	r2, r2
 800137a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800137e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001382:	fab2 f282 	clz	r2, r2
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	f042 0220 	orr.w	r2, r2, #32
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	f002 021f 	and.w	r2, r2, #31
 8001392:	2101      	movs	r1, #1
 8001394:	fa01 f202 	lsl.w	r2, r1, r2
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1af      	bne.n	80012fe <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80da 	beq.w	8001562 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d069      	beq.n	800148c <HAL_RCC_OscConfig+0x6c8>
 80013b8:	2301      	movs	r3, #1
 80013ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80013ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_RCC_OscConfig+0x640>)
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	461a      	mov	r2, r3
 80013de:	2301      	movs	r3, #1
 80013e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e2:	f7ff f9b5 	bl	8000750 <HAL_GetTick>
 80013e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	e00d      	b.n	8001408 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ec:	f7ff f9b0 	bl	8000750 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d905      	bls.n	8001408 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e3ef      	b.n	8001be0 <HAL_RCC_OscConfig+0xe1c>
 8001400:	40021000 	.word	0x40021000
 8001404:	10908120 	.word	0x10908120
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001412:	fa93 f2a3 	rbit	r2, r3
 8001416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001420:	2202      	movs	r2, #2
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	fa93 f2a3 	rbit	r2, r3
 800142e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001438:	2202      	movs	r2, #2
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	fa93 f2a3 	rbit	r2, r3
 8001446:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800144a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144c:	4ba4      	ldr	r3, [pc, #656]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 800144e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001450:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001454:	2102      	movs	r1, #2
 8001456:	6019      	str	r1, [r3, #0]
 8001458:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	fa93 f1a3 	rbit	r1, r3
 8001462:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001466:	6019      	str	r1, [r3, #0]
  return result;
 8001468:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	fab3 f383 	clz	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	2101      	movs	r1, #1
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	4013      	ands	r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0b0      	beq.n	80013ec <HAL_RCC_OscConfig+0x628>
 800148a:	e06a      	b.n	8001562 <HAL_RCC_OscConfig+0x79e>
 800148c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	fa93 f2a3 	rbit	r2, r3
 800149e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014a2:	601a      	str	r2, [r3, #0]
  return result;
 80014a4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014a8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014aa:	fab3 f383 	clz	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b8c      	ldr	r3, [pc, #560]	; (80016e4 <HAL_RCC_OscConfig+0x920>)
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	461a      	mov	r2, r3
 80014ba:	2300      	movs	r3, #0
 80014bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff f947 	bl	8000750 <HAL_GetTick>
 80014c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c6:	e009      	b.n	80014dc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff f942 	bl	8000750 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e381      	b.n	8001be0 <HAL_RCC_OscConfig+0xe1c>
 80014dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014e0:	2202      	movs	r2, #2
 80014e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014f8:	2202      	movs	r2, #2
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	fa93 f2a3 	rbit	r2, r3
 8001506:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001510:	2202      	movs	r2, #2
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	fa93 f2a3 	rbit	r2, r3
 800151e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001522:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001524:	4b6e      	ldr	r3, [pc, #440]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 8001526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001528:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800152c:	2102      	movs	r1, #2
 800152e:	6019      	str	r1, [r3, #0]
 8001530:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	fa93 f1a3 	rbit	r1, r3
 800153a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800153e:	6019      	str	r1, [r3, #0]
  return result;
 8001540:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f003 031f 	and.w	r3, r3, #31
 8001556:	2101      	movs	r1, #1
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	4013      	ands	r3, r2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1b2      	bne.n	80014c8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 8157 	beq.w	8001820 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001578:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d112      	bne.n	80015aa <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	4b56      	ldr	r3, [pc, #344]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	4a55      	ldr	r2, [pc, #340]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158e:	61d3      	str	r3, [r2, #28]
 8001590:	4b53      	ldr	r3, [pc, #332]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b4f      	ldr	r3, [pc, #316]	; (80016e8 <HAL_RCC_OscConfig+0x924>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d11a      	bne.n	80015ec <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b6:	4b4c      	ldr	r3, [pc, #304]	; (80016e8 <HAL_RCC_OscConfig+0x924>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a4b      	ldr	r2, [pc, #300]	; (80016e8 <HAL_RCC_OscConfig+0x924>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c2:	f7ff f8c5 	bl	8000750 <HAL_GetTick>
 80015c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	e009      	b.n	80015e0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015cc:	f7ff f8c0 	bl	8000750 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b64      	cmp	r3, #100	; 0x64
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e2ff      	b.n	8001be0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <HAL_RCC_OscConfig+0x924>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0ef      	beq.n	80015cc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d106      	bne.n	8001604 <HAL_RCC_OscConfig+0x840>
 80015f6:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a39      	ldr	r2, [pc, #228]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	e02f      	b.n	8001664 <HAL_RCC_OscConfig+0x8a0>
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x864>
 800160e:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a33      	ldr	r2, [pc, #204]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	6213      	str	r3, [r2, #32]
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4a30      	ldr	r2, [pc, #192]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 8001620:	f023 0304 	bic.w	r3, r3, #4
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	e01d      	b.n	8001664 <HAL_RCC_OscConfig+0x8a0>
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b05      	cmp	r3, #5
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x888>
 8001632:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a2a      	ldr	r2, [pc, #168]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a27      	ldr	r2, [pc, #156]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x8a0>
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d06a      	beq.n	8001744 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7ff f86f 	bl	8000750 <HAL_GetTick>
 8001672:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff f86a 	bl	8000750 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e2a7      	b.n	8001be0 <HAL_RCC_OscConfig+0xe1c>
 8001690:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001694:	2202      	movs	r2, #2
 8001696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001698:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	fa93 f2a3 	rbit	r2, r3
 80016a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016ac:	2202      	movs	r2, #2
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f2a3 	rbit	r2, r3
 80016ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016be:	601a      	str	r2, [r3, #0]
  return result;
 80016c0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	095b      	lsrs	r3, r3, #5
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d108      	bne.n	80016ec <HAL_RCC_OscConfig+0x928>
 80016da:	4b01      	ldr	r3, [pc, #4]	; (80016e0 <HAL_RCC_OscConfig+0x91c>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	e013      	b.n	8001708 <HAL_RCC_OscConfig+0x944>
 80016e0:	40021000 	.word	0x40021000
 80016e4:	10908120 	.word	0x10908120
 80016e8:	40007000 	.word	0x40007000
 80016ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4bc0      	ldr	r3, [pc, #768]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800170c:	2102      	movs	r1, #2
 800170e:	6011      	str	r1, [r2, #0]
 8001710:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	fa92 f1a2 	rbit	r1, r2
 800171a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800171e:	6011      	str	r1, [r2, #0]
  return result;
 8001720:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	fab2 f282 	clz	r2, r2
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	f002 021f 	and.w	r2, r2, #31
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f202 	lsl.w	r2, r1, r2
 800173c:	4013      	ands	r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d09a      	beq.n	8001678 <HAL_RCC_OscConfig+0x8b4>
 8001742:	e063      	b.n	800180c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001744:	f7ff f804 	bl	8000750 <HAL_GetTick>
 8001748:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174c:	e00b      	b.n	8001766 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7fe ffff 	bl	8000750 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e23c      	b.n	8001be0 <HAL_RCC_OscConfig+0xe1c>
 8001766:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800176a:	2202      	movs	r2, #2
 800176c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	fa93 f2a3 	rbit	r2, r3
 8001778:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001782:	2202      	movs	r2, #2
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001794:	601a      	str	r2, [r3, #0]
  return result;
 8001796:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800179a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d102      	bne.n	80017b6 <HAL_RCC_OscConfig+0x9f2>
 80017b0:	4b95      	ldr	r3, [pc, #596]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	e00d      	b.n	80017d2 <HAL_RCC_OscConfig+0xa0e>
 80017b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017ba:	2202      	movs	r2, #2
 80017bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	fa93 f2a3 	rbit	r2, r3
 80017c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	4b8e      	ldr	r3, [pc, #568]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80017d6:	2102      	movs	r1, #2
 80017d8:	6011      	str	r1, [r2, #0]
 80017da:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	fa92 f1a2 	rbit	r1, r2
 80017e4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017e8:	6011      	str	r1, [r2, #0]
  return result;
 80017ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	fab2 f282 	clz	r2, r2
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1a0      	bne.n	800174e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800180c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001814:	4b7c      	ldr	r3, [pc, #496]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	4a7b      	ldr	r2, [pc, #492]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 800181a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 81d9 	beq.w	8001bde <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182c:	4b76      	ldr	r3, [pc, #472]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	f000 81a6 	beq.w	8001b86 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b02      	cmp	r3, #2
 8001842:	f040 811e 	bne.w	8001a82 <HAL_RCC_OscConfig+0xcbe>
 8001846:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800184a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800184e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	fa93 f2a3 	rbit	r2, r3
 800185a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800185e:	601a      	str	r2, [r3, #0]
  return result;
 8001860:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001864:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001870:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	461a      	mov	r2, r3
 8001878:	2300      	movs	r3, #0
 800187a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7fe ff68 	bl	8000750 <HAL_GetTick>
 8001880:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	e009      	b.n	800189a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001886:	f7fe ff63 	bl	8000750 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1a2      	b.n	8001be0 <HAL_RCC_OscConfig+0xe1c>
 800189a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800189e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018b2:	601a      	str	r2, [r3, #0]
  return result;
 80018b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	095b      	lsrs	r3, r3, #5
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d102      	bne.n	80018d4 <HAL_RCC_OscConfig+0xb10>
 80018ce:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	e01b      	b.n	800190c <HAL_RCC_OscConfig+0xb48>
 80018d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	fa93 f2a3 	rbit	r2, r3
 8001902:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001910:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001914:	6011      	str	r1, [r2, #0]
 8001916:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	fa92 f1a2 	rbit	r1, r2
 8001920:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001924:	6011      	str	r1, [r2, #0]
  return result;
 8001926:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	fab2 f282 	clz	r2, r2
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	f042 0220 	orr.w	r2, r2, #32
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f002 021f 	and.w	r2, r2, #31
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d19e      	bne.n	8001886 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001948:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	f023 020f 	bic.w	r2, r3, #15
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	492c      	ldr	r1, [pc, #176]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 8001958:	4313      	orrs	r3, r2
 800195a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6a19      	ldr	r1, [r3, #32]
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	430b      	orrs	r3, r1
 8001972:	4925      	ldr	r1, [pc, #148]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
 8001978:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800197c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001990:	601a      	str	r2, [r3, #0]
  return result;
 8001992:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001996:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	461a      	mov	r2, r3
 80019aa:	2301      	movs	r3, #1
 80019ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7fe fecf 	bl	8000750 <HAL_GetTick>
 80019b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b6:	e009      	b.n	80019cc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b8:	f7fe feca 	bl	8000750 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e109      	b.n	8001be0 <HAL_RCC_OscConfig+0xe1c>
 80019cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fa93 f2a3 	rbit	r2, r3
 80019e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019e4:	601a      	str	r2, [r3, #0]
  return result;
 80019e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_RCC_OscConfig+0xc48>
 8001a00:	4b01      	ldr	r3, [pc, #4]	; (8001a08 <HAL_RCC_OscConfig+0xc44>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e01e      	b.n	8001a44 <HAL_RCC_OscConfig+0xc80>
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	fa93 f2a3 	rbit	r2, r3
 8001a20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	4b6a      	ldr	r3, [pc, #424]	; (8001bec <HAL_RCC_OscConfig+0xe28>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a4c:	6011      	str	r1, [r2, #0]
 8001a4e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	fa92 f1a2 	rbit	r1, r2
 8001a58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a5c:	6011      	str	r1, [r2, #0]
  return result;
 8001a5e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	fab2 f282 	clz	r2, r2
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	f042 0220 	orr.w	r2, r2, #32
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	f002 021f 	and.w	r2, r2, #31
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d09b      	beq.n	80019b8 <HAL_RCC_OscConfig+0xbf4>
 8001a80:	e0ad      	b.n	8001bde <HAL_RCC_OscConfig+0xe1a>
 8001a82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a9a:	601a      	str	r2, [r3, #0]
  return result;
 8001a9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7fe fe4a 	bl	8000750 <HAL_GetTick>
 8001abc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac0:	e009      	b.n	8001ad6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7fe fe45 	bl	8000750 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e084      	b.n	8001be0 <HAL_RCC_OscConfig+0xe1c>
 8001ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aee:	601a      	str	r2, [r3, #0]
  return result;
 8001af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	095b      	lsrs	r3, r3, #5
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d102      	bne.n	8001b10 <HAL_RCC_OscConfig+0xd4c>
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <HAL_RCC_OscConfig+0xe28>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	e01b      	b.n	8001b48 <HAL_RCC_OscConfig+0xd84>
 8001b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	fa93 f2a3 	rbit	r2, r3
 8001b24:	f107 0320 	add.w	r3, r7, #32
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f107 0318 	add.w	r3, r7, #24
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <HAL_RCC_OscConfig+0xe28>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	f107 0214 	add.w	r2, r7, #20
 8001b4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b50:	6011      	str	r1, [r2, #0]
 8001b52:	f107 0214 	add.w	r2, r7, #20
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fa92 f1a2 	rbit	r1, r2
 8001b5c:	f107 0210 	add.w	r2, r7, #16
 8001b60:	6011      	str	r1, [r2, #0]
  return result;
 8001b62:	f107 0210 	add.w	r2, r7, #16
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	fab2 f282 	clz	r2, r2
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f042 0220 	orr.w	r2, r2, #32
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f002 021f 	and.w	r2, r2, #31
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d19e      	bne.n	8001ac2 <HAL_RCC_OscConfig+0xcfe>
 8001b84:	e02b      	b.n	8001bde <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e025      	b.n	8001be0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_RCC_OscConfig+0xe28>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_RCC_OscConfig+0xe28>)
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ba4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ba8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d111      	bne.n	8001bda <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001bb6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001bba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d108      	bne.n	8001bda <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001bc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bcc:	f003 020f 	and.w	r2, r3, #15
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b09e      	sub	sp, #120	; 0x78
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e162      	b.n	8001ece <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b90      	ldr	r3, [pc, #576]	; (8001e4c <HAL_RCC_ClockConfig+0x25c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d910      	bls.n	8001c38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b8d      	ldr	r3, [pc, #564]	; (8001e4c <HAL_RCC_ClockConfig+0x25c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 0207 	bic.w	r2, r3, #7
 8001c1e:	498b      	ldr	r1, [pc, #556]	; (8001e4c <HAL_RCC_ClockConfig+0x25c>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <HAL_RCC_ClockConfig+0x25c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e14a      	b.n	8001ece <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c44:	4b82      	ldr	r3, [pc, #520]	; (8001e50 <HAL_RCC_ClockConfig+0x260>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	497f      	ldr	r1, [pc, #508]	; (8001e50 <HAL_RCC_ClockConfig+0x260>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80dc 	beq.w	8001e1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d13c      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xf6>
 8001c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d102      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xa6>
 8001c90:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_RCC_ClockConfig+0x260>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	e00f      	b.n	8001cb6 <HAL_RCC_ClockConfig+0xc6>
 8001c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8001caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cb2:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_ClockConfig+0x260>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cba:	65ba      	str	r2, [r7, #88]	; 0x58
 8001cbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cbe:	fa92 f2a2 	rbit	r2, r2
 8001cc2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001cc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cc6:	fab2 f282 	clz	r2, r2
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	f042 0220 	orr.w	r2, r2, #32
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f002 021f 	and.w	r2, r2, #31
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d17b      	bne.n	8001dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0f3      	b.n	8001ece <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d13c      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x178>
 8001cee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cf2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	095b      	lsrs	r3, r3, #5
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d102      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x128>
 8001d12:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <HAL_RCC_ClockConfig+0x260>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	e00f      	b.n	8001d38 <HAL_RCC_ClockConfig+0x148>
 8001d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	647b      	str	r3, [r7, #68]	; 0x44
 8001d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8001d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d34:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_RCC_ClockConfig+0x260>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d3c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d40:	fa92 f2a2 	rbit	r2, r2
 8001d44:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d48:	fab2 f282 	clz	r2, r2
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f042 0220 	orr.w	r2, r2, #32
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	f002 021f 	and.w	r2, r2, #31
 8001d58:	2101      	movs	r1, #1
 8001d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d13a      	bne.n	8001dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0b2      	b.n	8001ece <HAL_RCC_ClockConfig+0x2de>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d102      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x1a0>
 8001d8a:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	e00d      	b.n	8001dac <HAL_RCC_ClockConfig+0x1bc>
 8001d90:	2302      	movs	r3, #2
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	623b      	str	r3, [r7, #32]
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_RCC_ClockConfig+0x260>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	2202      	movs	r2, #2
 8001dae:	61ba      	str	r2, [r7, #24]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	fa92 f2a2 	rbit	r2, r2
 8001db6:	617a      	str	r2, [r7, #20]
  return result;
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	fab2 f282 	clz	r2, r2
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	f042 0220 	orr.w	r2, r2, #32
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	f002 021f 	and.w	r2, r2, #31
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e079      	b.n	8001ece <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_RCC_ClockConfig+0x260>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f023 0203 	bic.w	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	491a      	ldr	r1, [pc, #104]	; (8001e50 <HAL_RCC_ClockConfig+0x260>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dec:	f7fe fcb0 	bl	8000750 <HAL_GetTick>
 8001df0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df4:	f7fe fcac 	bl	8000750 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e061      	b.n	8001ece <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_RCC_ClockConfig+0x260>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 020c 	and.w	r2, r3, #12
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d1eb      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_ClockConfig+0x25c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d214      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_RCC_ClockConfig+0x25c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 0207 	bic.w	r2, r3, #7
 8001e32:	4906      	ldr	r1, [pc, #24]	; (8001e4c <HAL_RCC_ClockConfig+0x25c>)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <HAL_RCC_ClockConfig+0x25c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e040      	b.n	8001ece <HAL_RCC_ClockConfig+0x2de>
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	491a      	ldr	r1, [pc, #104]	; (8001ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4912      	ldr	r1, [pc, #72]	; (8001ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e92:	f000 f829 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001e96:	4601      	mov	r1, r0
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea0:	22f0      	movs	r2, #240	; 0xf0
 8001ea2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	fa92 f2a2 	rbit	r2, r2
 8001eaa:	60fa      	str	r2, [r7, #12]
  return result;
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	fab2 f282 	clz	r2, r2
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	40d3      	lsrs	r3, r2
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x2ec>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	fa21 f303 	lsr.w	r3, r1, r3
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_RCC_ClockConfig+0x2f0>)
 8001ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_RCC_ClockConfig+0x2f4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fbfe 	bl	80006c8 <HAL_InitTick>
  
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3778      	adds	r7, #120	; 0x78
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	0800344c 	.word	0x0800344c
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	20000004 	.word	0x20000004

08001ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b08b      	sub	sp, #44	; 0x2c
 8001eec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d002      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x30>
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x36>
 8001f16:	e03f      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f1a:	623b      	str	r3, [r7, #32]
      break;
 8001f1c:	e03f      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f24:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f28:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	fa92 f2a2 	rbit	r2, r2
 8001f30:	607a      	str	r2, [r7, #4]
  return result;
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	fab2 f282 	clz	r2, r2
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	40d3      	lsrs	r3, r2
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	fa92 f2a2 	rbit	r2, r2
 8001f54:	60fa      	str	r2, [r7, #12]
  return result;
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	fab2 f282 	clz	r2, r2
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	40d3      	lsrs	r3, r2
 8001f60:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f70:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	e007      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	623b      	str	r3, [r7, #32]
      break;
 8001f96:	e002      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f9a:	623b      	str	r3, [r7, #32]
      break;
 8001f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	372c      	adds	r7, #44	; 0x2c
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	007a1200 	.word	0x007a1200
 8001fb4:	08003464 	.word	0x08003464
 8001fb8:	08003474 	.word	0x08003474

08001fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000000 	.word	0x20000000

08001fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001fda:	f7ff ffef 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001fde:	4601      	mov	r1, r0
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fe8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	fa92 f2a2 	rbit	r2, r2
 8001ff4:	603a      	str	r2, [r7, #0]
  return result;
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	40d3      	lsrs	r3, r2
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	0800345c 	.word	0x0800345c

08002018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800201e:	f7ff ffcd 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8002022:	4601      	mov	r1, r0
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800202c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002030:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	fa92 f2a2 	rbit	r2, r2
 8002038:	603a      	str	r2, [r7, #0]
  return result;
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	40d3      	lsrs	r3, r2
 8002044:	4a04      	ldr	r2, [pc, #16]	; (8002058 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	0800345c 	.word	0x0800345c

0800205c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b092      	sub	sp, #72	; 0x48
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80d7 	beq.w	8002228 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002080:	4b4e      	ldr	r3, [pc, #312]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10e      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4a4a      	ldr	r2, [pc, #296]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002096:	61d3      	str	r3, [r2, #28]
 8002098:	4b48      	ldr	r3, [pc, #288]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a4:	2301      	movs	r3, #1
 80020a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	4b45      	ldr	r3, [pc, #276]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d118      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b6:	4b42      	ldr	r3, [pc, #264]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a41      	ldr	r2, [pc, #260]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c2:	f7fe fb45 	bl	8000750 <HAL_GetTick>
 80020c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	e008      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ca:	f7fe fb41 	bl	8000750 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b64      	cmp	r3, #100	; 0x64
 80020d6:	d901      	bls.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e1d6      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020e8:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8084 	beq.w	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002104:	429a      	cmp	r2, r3
 8002106:	d07c      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002108:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	461a      	mov	r2, r3
 8002132:	2301      	movs	r3, #1
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800213a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	461a      	mov	r2, r3
 8002156:	2300      	movs	r3, #0
 8002158:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800215c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d04b      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7fe faf1 	bl	8000750 <HAL_GetTick>
 800216e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe faed 	bl	8000750 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e180      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002188:	2302      	movs	r3, #2
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
 8002194:	2302      	movs	r3, #2
 8002196:	623b      	str	r3, [r7, #32]
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	61fb      	str	r3, [r7, #28]
  return result;
 80021a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d108      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80021b6:	4b01      	ldr	r3, [pc, #4]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	e00d      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40007000 	.word	0x40007000
 80021c4:	10908100 	.word	0x10908100
 80021c8:	2302      	movs	r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	4ba0      	ldr	r3, [pc, #640]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2202      	movs	r2, #2
 80021da:	613a      	str	r2, [r7, #16]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	fa92 f2a2 	rbit	r2, r2
 80021e2:	60fa      	str	r2, [r7, #12]
  return result;
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0b7      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002202:	4b95      	ldr	r3, [pc, #596]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4992      	ldr	r1, [pc, #584]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002210:	4313      	orrs	r3, r2
 8002212:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002214:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002218:	2b01      	cmp	r3, #1
 800221a:	d105      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221c:	4b8e      	ldr	r3, [pc, #568]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	4a8d      	ldr	r2, [pc, #564]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002226:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002234:	4b88      	ldr	r3, [pc, #544]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	f023 0203 	bic.w	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4985      	ldr	r1, [pc, #532]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002252:	4b81      	ldr	r3, [pc, #516]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	497e      	ldr	r1, [pc, #504]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002270:	4b79      	ldr	r3, [pc, #484]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4976      	ldr	r1, [pc, #472]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800228e:	4b72      	ldr	r3, [pc, #456]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f023 0210 	bic.w	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	496f      	ldr	r1, [pc, #444]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80022ac:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b8:	4967      	ldr	r1, [pc, #412]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022ca:	4b63      	ldr	r3, [pc, #396]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f023 0220 	bic.w	r2, r3, #32
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4960      	ldr	r1, [pc, #384]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022e8:	4b5b      	ldr	r3, [pc, #364]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	4958      	ldr	r1, [pc, #352]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002306:	4b54      	ldr	r3, [pc, #336]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	4951      	ldr	r1, [pc, #324]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002314:	4313      	orrs	r3, r2
 8002316:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002324:	4b4c      	ldr	r3, [pc, #304]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4949      	ldr	r1, [pc, #292]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002342:	4b45      	ldr	r3, [pc, #276]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4942      	ldr	r1, [pc, #264]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002360:	4b3d      	ldr	r3, [pc, #244]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	493a      	ldr	r1, [pc, #232]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800237e:	4b36      	ldr	r3, [pc, #216]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	4933      	ldr	r1, [pc, #204]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238c:	4313      	orrs	r3, r2
 800238e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800239c:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a8:	492b      	ldr	r1, [pc, #172]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80023ba:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4924      	ldr	r1, [pc, #144]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80023d8:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	491c      	ldr	r1, [pc, #112]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	4915      	ldr	r1, [pc, #84]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002414:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	490d      	ldr	r1, [pc, #52]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243e:	4906      	ldr	r1, [pc, #24]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00c      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002450:	4b01      	ldr	r3, [pc, #4]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	e002      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	490b      	ldr	r1, [pc, #44]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002466:	4313      	orrs	r3, r2
 8002468:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002482:	4904      	ldr	r1, [pc, #16]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002484:	4313      	orrs	r3, r2
 8002486:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3748      	adds	r7, #72	; 0x48
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000

08002498 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e040      	b.n	800252c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe f842 	bl	8000544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2224      	movs	r2, #36	; 0x24
 80024c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa84 	bl	80029e4 <UART_SetConfig>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e022      	b.n	800252c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fc92 	bl	8002e18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fd19 	bl	8002f5c <UART_CheckIdleState>
 800252a:	4603      	mov	r3, r0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002546:	2b20      	cmp	r3, #32
 8002548:	d144      	bne.n	80025d4 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_UART_Transmit_IT+0x22>
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e03d      	b.n	80025d6 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_UART_Transmit_IT+0x34>
 8002564:	2302      	movs	r3, #2
 8002566:	e036      	b.n	80025d6 <HAL_UART_Transmit_IT+0xa2>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	88fa      	ldrh	r2, [r7, #6]
 8002582:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2221      	movs	r2, #33	; 0x21
 8002596:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a0:	d107      	bne.n	80025b2 <HAL_UART_Transmit_IT+0x7e>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <HAL_UART_Transmit_IT+0xb0>)
 80025ae:	665a      	str	r2, [r3, #100]	; 0x64
 80025b0:	e002      	b.n	80025b8 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <HAL_UART_Transmit_IT+0xb4>)
 80025b6:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	080031bd 	.word	0x080031bd
 80025e8:	08003149 	.word	0x08003149

080025ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025fe:	2b20      	cmp	r3, #32
 8002600:	f040 808a 	bne.w	8002718 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_UART_Receive_IT+0x24>
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e082      	b.n	800271a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_UART_Receive_IT+0x36>
 800261e:	2302      	movs	r3, #2
 8002620:	e07b      	b.n	800271a <HAL_UART_Receive_IT+0x12e>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	88fa      	ldrh	r2, [r7, #6]
 8002634:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	88fa      	ldrh	r2, [r7, #6]
 800263c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264e:	d10e      	bne.n	800266e <HAL_UART_Receive_IT+0x82>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_UART_Receive_IT+0x78>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800265e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002662:	e02d      	b.n	80026c0 <HAL_UART_Receive_IT+0xd4>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	22ff      	movs	r2, #255	; 0xff
 8002668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800266c:	e028      	b.n	80026c0 <HAL_UART_Receive_IT+0xd4>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <HAL_UART_Receive_IT+0xa6>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d104      	bne.n	8002688 <HAL_UART_Receive_IT+0x9c>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	22ff      	movs	r2, #255	; 0xff
 8002682:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002686:	e01b      	b.n	80026c0 <HAL_UART_Receive_IT+0xd4>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	227f      	movs	r2, #127	; 0x7f
 800268c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002690:	e016      	b.n	80026c0 <HAL_UART_Receive_IT+0xd4>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800269a:	d10d      	bne.n	80026b8 <HAL_UART_Receive_IT+0xcc>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d104      	bne.n	80026ae <HAL_UART_Receive_IT+0xc2>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	227f      	movs	r2, #127	; 0x7f
 80026a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026ac:	e008      	b.n	80026c0 <HAL_UART_Receive_IT+0xd4>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	223f      	movs	r2, #63	; 0x3f
 80026b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026b6:	e003      	b.n	80026c0 <HAL_UART_Receive_IT+0xd4>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2222      	movs	r2, #34	; 0x22
 80026ca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e4:	d107      	bne.n	80026f6 <HAL_UART_Receive_IT+0x10a>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a0d      	ldr	r2, [pc, #52]	; (8002728 <HAL_UART_Receive_IT+0x13c>)
 80026f2:	661a      	str	r2, [r3, #96]	; 0x60
 80026f4:	e002      	b.n	80026fc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4a0c      	ldr	r2, [pc, #48]	; (800272c <HAL_UART_Receive_IT+0x140>)
 80026fa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002712:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	08003311 	.word	0x08003311
 800272c:	0800326b 	.word	0x0800326b

08002730 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	f640 030f 	movw	r3, #2063	; 0x80f
 8002756:	4013      	ands	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d113      	bne.n	8002788 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00e      	beq.n	8002788 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d009      	beq.n	8002788 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 8114 	beq.w	80029a6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
      }
      return;
 8002786:	e10e      	b.n	80029a6 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80d6 	beq.w	800293c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80cb 	beq.w	800293c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00e      	beq.n	80027ce <HAL_UART_IRQHandler+0x9e>
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c6:	f043 0201 	orr.w	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00e      	beq.n	80027f6 <HAL_UART_IRQHandler+0xc6>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2202      	movs	r2, #2
 80027e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ee:	f043 0204 	orr.w	r2, r3, #4
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00e      	beq.n	800281e <HAL_UART_IRQHandler+0xee>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2204      	movs	r2, #4
 8002810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002816:	f043 0202 	orr.w	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b00      	cmp	r3, #0
 8002830:	d104      	bne.n	800283c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2208      	movs	r2, #8
 8002842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002848:	f043 0208 	orr.w	r2, r3, #8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00f      	beq.n	800287a <HAL_UART_IRQHandler+0x14a>
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800286c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8093 	beq.w	80029aa <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00c      	beq.n	80028a8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ac:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b40      	cmp	r3, #64	; 0x40
 80028ba:	d004      	beq.n	80028c6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d031      	beq.n	800292a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fc08 	bl	80030dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d123      	bne.n	8002922 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d013      	beq.n	800291a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f6:	4a30      	ldr	r2, [pc, #192]	; (80029b8 <HAL_UART_IRQHandler+0x288>)
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe f865 	bl	80009ce <HAL_DMA_Abort_IT>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002914:	4610      	mov	r0, r2
 8002916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002918:	e00e      	b.n	8002938 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f858 	bl	80029d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002920:	e00a      	b.n	8002938 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f854 	bl	80029d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002928:	e006      	b.n	8002938 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f850 	bl	80029d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002936:	e038      	b.n	80029aa <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002938:	bf00      	nop
    return;
 800293a:	e036      	b.n	80029aa <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <HAL_UART_IRQHandler+0x232>
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fd2b 	bl	80033b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002960:	e026      	b.n	80029b0 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00d      	beq.n	8002988 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297a:	2b00      	cmp	r3, #0
 800297c:	d017      	beq.n	80029ae <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
    }
    return;
 8002986:	e012      	b.n	80029ae <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00e      	beq.n	80029b0 <HAL_UART_IRQHandler+0x280>
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fc4b 	bl	8003238 <UART_EndTransmit_IT>
    return;
 80029a2:	bf00      	nop
 80029a4:	e004      	b.n	80029b0 <HAL_UART_IRQHandler+0x280>
      return;
 80029a6:	bf00      	nop
 80029a8:	e002      	b.n	80029b0 <HAL_UART_IRQHandler+0x280>
    return;
 80029aa:	bf00      	nop
 80029ac:	e000      	b.n	80029b0 <HAL_UART_IRQHandler+0x280>
    return;
 80029ae:	bf00      	nop
  }

}
 80029b0:	3720      	adds	r7, #32
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	0800311d 	.word	0x0800311d

080029bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4bac      	ldr	r3, [pc, #688]	; (8002cc4 <UART_SetConfig+0x2e0>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	6939      	ldr	r1, [r7, #16]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a9a      	ldr	r2, [pc, #616]	; (8002cc8 <UART_SetConfig+0x2e4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d121      	bne.n	8002aa8 <UART_SetConfig+0xc4>
 8002a64:	4b99      	ldr	r3, [pc, #612]	; (8002ccc <UART_SetConfig+0x2e8>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d817      	bhi.n	8002aa0 <UART_SetConfig+0xbc>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <UART_SetConfig+0x94>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002a89 	.word	0x08002a89
 8002a7c:	08002a95 	.word	0x08002a95
 8002a80:	08002a9b 	.word	0x08002a9b
 8002a84:	08002a8f 	.word	0x08002a8f
 8002a88:	2301      	movs	r3, #1
 8002a8a:	77fb      	strb	r3, [r7, #31]
 8002a8c:	e0b2      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	77fb      	strb	r3, [r7, #31]
 8002a92:	e0af      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002a94:	2304      	movs	r3, #4
 8002a96:	77fb      	strb	r3, [r7, #31]
 8002a98:	e0ac      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	77fb      	strb	r3, [r7, #31]
 8002a9e:	e0a9      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	77fb      	strb	r3, [r7, #31]
 8002aa4:	bf00      	nop
 8002aa6:	e0a5      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a88      	ldr	r2, [pc, #544]	; (8002cd0 <UART_SetConfig+0x2ec>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d123      	bne.n	8002afa <UART_SetConfig+0x116>
 8002ab2:	4b86      	ldr	r3, [pc, #536]	; (8002ccc <UART_SetConfig+0x2e8>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abe:	d012      	beq.n	8002ae6 <UART_SetConfig+0x102>
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac4:	d802      	bhi.n	8002acc <UART_SetConfig+0xe8>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <UART_SetConfig+0xf6>
 8002aca:	e012      	b.n	8002af2 <UART_SetConfig+0x10e>
 8002acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ad0:	d00c      	beq.n	8002aec <UART_SetConfig+0x108>
 8002ad2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ad6:	d003      	beq.n	8002ae0 <UART_SetConfig+0xfc>
 8002ad8:	e00b      	b.n	8002af2 <UART_SetConfig+0x10e>
 8002ada:	2300      	movs	r3, #0
 8002adc:	77fb      	strb	r3, [r7, #31]
 8002ade:	e089      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	e086      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	77fb      	strb	r3, [r7, #31]
 8002aea:	e083      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002aec:	2308      	movs	r3, #8
 8002aee:	77fb      	strb	r3, [r7, #31]
 8002af0:	e080      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002af2:	2310      	movs	r3, #16
 8002af4:	77fb      	strb	r3, [r7, #31]
 8002af6:	bf00      	nop
 8002af8:	e07c      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a75      	ldr	r2, [pc, #468]	; (8002cd4 <UART_SetConfig+0x2f0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d123      	bne.n	8002b4c <UART_SetConfig+0x168>
 8002b04:	4b71      	ldr	r3, [pc, #452]	; (8002ccc <UART_SetConfig+0x2e8>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002b0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b10:	d012      	beq.n	8002b38 <UART_SetConfig+0x154>
 8002b12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b16:	d802      	bhi.n	8002b1e <UART_SetConfig+0x13a>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <UART_SetConfig+0x148>
 8002b1c:	e012      	b.n	8002b44 <UART_SetConfig+0x160>
 8002b1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b22:	d00c      	beq.n	8002b3e <UART_SetConfig+0x15a>
 8002b24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b28:	d003      	beq.n	8002b32 <UART_SetConfig+0x14e>
 8002b2a:	e00b      	b.n	8002b44 <UART_SetConfig+0x160>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	77fb      	strb	r3, [r7, #31]
 8002b30:	e060      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002b32:	2302      	movs	r3, #2
 8002b34:	77fb      	strb	r3, [r7, #31]
 8002b36:	e05d      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002b38:	2304      	movs	r3, #4
 8002b3a:	77fb      	strb	r3, [r7, #31]
 8002b3c:	e05a      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002b3e:	2308      	movs	r3, #8
 8002b40:	77fb      	strb	r3, [r7, #31]
 8002b42:	e057      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002b44:	2310      	movs	r3, #16
 8002b46:	77fb      	strb	r3, [r7, #31]
 8002b48:	bf00      	nop
 8002b4a:	e053      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a61      	ldr	r2, [pc, #388]	; (8002cd8 <UART_SetConfig+0x2f4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d123      	bne.n	8002b9e <UART_SetConfig+0x1ba>
 8002b56:	4b5d      	ldr	r3, [pc, #372]	; (8002ccc <UART_SetConfig+0x2e8>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b62:	d012      	beq.n	8002b8a <UART_SetConfig+0x1a6>
 8002b64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b68:	d802      	bhi.n	8002b70 <UART_SetConfig+0x18c>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <UART_SetConfig+0x19a>
 8002b6e:	e012      	b.n	8002b96 <UART_SetConfig+0x1b2>
 8002b70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b74:	d00c      	beq.n	8002b90 <UART_SetConfig+0x1ac>
 8002b76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b7a:	d003      	beq.n	8002b84 <UART_SetConfig+0x1a0>
 8002b7c:	e00b      	b.n	8002b96 <UART_SetConfig+0x1b2>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	77fb      	strb	r3, [r7, #31]
 8002b82:	e037      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002b84:	2302      	movs	r3, #2
 8002b86:	77fb      	strb	r3, [r7, #31]
 8002b88:	e034      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	77fb      	strb	r3, [r7, #31]
 8002b8e:	e031      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002b90:	2308      	movs	r3, #8
 8002b92:	77fb      	strb	r3, [r7, #31]
 8002b94:	e02e      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002b96:	2310      	movs	r3, #16
 8002b98:	77fb      	strb	r3, [r7, #31]
 8002b9a:	bf00      	nop
 8002b9c:	e02a      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a4e      	ldr	r2, [pc, #312]	; (8002cdc <UART_SetConfig+0x2f8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d123      	bne.n	8002bf0 <UART_SetConfig+0x20c>
 8002ba8:	4b48      	ldr	r3, [pc, #288]	; (8002ccc <UART_SetConfig+0x2e8>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb4:	d012      	beq.n	8002bdc <UART_SetConfig+0x1f8>
 8002bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bba:	d802      	bhi.n	8002bc2 <UART_SetConfig+0x1de>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <UART_SetConfig+0x1ec>
 8002bc0:	e012      	b.n	8002be8 <UART_SetConfig+0x204>
 8002bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bc6:	d00c      	beq.n	8002be2 <UART_SetConfig+0x1fe>
 8002bc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bcc:	d003      	beq.n	8002bd6 <UART_SetConfig+0x1f2>
 8002bce:	e00b      	b.n	8002be8 <UART_SetConfig+0x204>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e00e      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	77fb      	strb	r3, [r7, #31]
 8002bda:	e00b      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002bdc:	2304      	movs	r3, #4
 8002bde:	77fb      	strb	r3, [r7, #31]
 8002be0:	e008      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002be2:	2308      	movs	r3, #8
 8002be4:	77fb      	strb	r3, [r7, #31]
 8002be6:	e005      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002be8:	2310      	movs	r3, #16
 8002bea:	77fb      	strb	r3, [r7, #31]
 8002bec:	bf00      	nop
 8002bee:	e001      	b.n	8002bf4 <UART_SetConfig+0x210>
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfc:	f040 8090 	bne.w	8002d20 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8002c00:	7ffb      	ldrb	r3, [r7, #31]
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d86c      	bhi.n	8002ce0 <UART_SetConfig+0x2fc>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <UART_SetConfig+0x228>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c31 	.word	0x08002c31
 8002c10:	08002c51 	.word	0x08002c51
 8002c14:	08002c71 	.word	0x08002c71
 8002c18:	08002ce1 	.word	0x08002ce1
 8002c1c:	08002c8d 	.word	0x08002c8d
 8002c20:	08002ce1 	.word	0x08002ce1
 8002c24:	08002ce1 	.word	0x08002ce1
 8002c28:	08002ce1 	.word	0x08002ce1
 8002c2c:	08002cad 	.word	0x08002cad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c30:	f7ff f9d0 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8002c34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	005a      	lsls	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	441a      	add	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	61bb      	str	r3, [r7, #24]
        break;
 8002c4e:	e04a      	b.n	8002ce6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c50:	f7ff f9e2 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8002c54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	005a      	lsls	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	085b      	lsrs	r3, r3, #1
 8002c60:	441a      	add	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	61bb      	str	r3, [r7, #24]
        break;
 8002c6e:	e03a      	b.n	8002ce6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002c7a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6852      	ldr	r2, [r2, #4]
 8002c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	61bb      	str	r3, [r7, #24]
        break;
 8002c8a:	e02c      	b.n	8002ce6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c8c:	f7ff f92c 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8002c90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	005a      	lsls	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	085b      	lsrs	r3, r3, #1
 8002c9c:	441a      	add	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	61bb      	str	r3, [r7, #24]
        break;
 8002caa:	e01c      	b.n	8002ce6 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	61bb      	str	r3, [r7, #24]
        break;
 8002cc2:	e010      	b.n	8002ce6 <UART_SetConfig+0x302>
 8002cc4:	efff69f3 	.word	0xefff69f3
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40004400 	.word	0x40004400
 8002cd4:	40004800 	.word	0x40004800
 8002cd8:	40004c00 	.word	0x40004c00
 8002cdc:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	75fb      	strb	r3, [r7, #23]
        break;
 8002ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b0f      	cmp	r3, #15
 8002cea:	d916      	bls.n	8002d1a <UART_SetConfig+0x336>
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf2:	d212      	bcs.n	8002d1a <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f023 030f 	bic.w	r3, r3, #15
 8002cfc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	085b      	lsrs	r3, r3, #1
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	897b      	ldrh	r3, [r7, #10]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	897a      	ldrh	r2, [r7, #10]
 8002d16:	60da      	str	r2, [r3, #12]
 8002d18:	e072      	b.n	8002e00 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	75fb      	strb	r3, [r7, #23]
 8002d1e:	e06f      	b.n	8002e00 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8002d20:	7ffb      	ldrb	r3, [r7, #31]
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d85b      	bhi.n	8002dde <UART_SetConfig+0x3fa>
 8002d26:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <UART_SetConfig+0x348>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d51 	.word	0x08002d51
 8002d30:	08002d6f 	.word	0x08002d6f
 8002d34:	08002d8d 	.word	0x08002d8d
 8002d38:	08002ddf 	.word	0x08002ddf
 8002d3c:	08002da9 	.word	0x08002da9
 8002d40:	08002ddf 	.word	0x08002ddf
 8002d44:	08002ddf 	.word	0x08002ddf
 8002d48:	08002ddf 	.word	0x08002ddf
 8002d4c:	08002dc7 	.word	0x08002dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d50:	f7ff f940 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8002d54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	085a      	lsrs	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	441a      	add	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	61bb      	str	r3, [r7, #24]
        break;
 8002d6c:	e03a      	b.n	8002de4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d6e:	f7ff f953 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8002d72:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	085a      	lsrs	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	441a      	add	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	61bb      	str	r3, [r7, #24]
        break;
 8002d8a:	e02b      	b.n	8002de4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002d96:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6852      	ldr	r2, [r2, #4]
 8002d9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	61bb      	str	r3, [r7, #24]
        break;
 8002da6:	e01d      	b.n	8002de4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002da8:	f7ff f89e 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8002dac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	085a      	lsrs	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	441a      	add	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	61bb      	str	r3, [r7, #24]
        break;
 8002dc4:	e00e      	b.n	8002de4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	61bb      	str	r3, [r7, #24]
        break;
 8002ddc:	e002      	b.n	8002de4 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
        break;
 8002de2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	d908      	bls.n	8002dfc <UART_SetConfig+0x418>
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df0:	d204      	bcs.n	8002dfc <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	e001      	b.n	8002e00 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop

08002e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d01a      	beq.n	8002f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f16:	d10a      	bne.n	8002f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
  }
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f6a:	f7fd fbf1 	bl	8000750 <HAL_GetTick>
 8002f6e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d10e      	bne.n	8002f9c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f82a 	bl	8002fe6 <UART_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e020      	b.n	8002fde <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d10e      	bne.n	8002fc8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002faa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f814 	bl	8002fe6 <UART_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e00a      	b.n	8002fde <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff6:	e05d      	b.n	80030b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d059      	beq.n	80030b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003000:	f7fd fba6 	bl	8000750 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	429a      	cmp	r2, r3
 800300e:	d302      	bcc.n	8003016 <UART_WaitOnFlagUntilTimeout+0x30>
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11b      	bne.n	800304e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003024:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e042      	b.n	80030d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d02b      	beq.n	80030b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306a:	d123      	bne.n	80030b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003074:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003084:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e00f      	b.n	80030d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4013      	ands	r3, r2
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d092      	beq.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f7ff fc48 	bl	80029d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003154:	2b21      	cmp	r3, #33	; 0x21
 8003156:	d12b      	bne.n	80031b0 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d110      	bne.n	8003186 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003172:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003182:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003184:	e014      	b.n	80031b0 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	b292      	uxth	r2, r2
 8003192:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c8:	2b21      	cmp	r3, #33	; 0x21
 80031ca:	d12f      	bne.n	800322c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d110      	bne.n	80031fa <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80031f8:	e018      	b.n	800322c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	881a      	ldrh	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800320c:	b292      	uxth	r2, r2
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003214:	1c9a      	adds	r2, r3, #2
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fbad 	bl	80029bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003278:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800327e:	2b22      	cmp	r3, #34	; 0x22
 8003280:	d13a      	bne.n	80032f8 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003288:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800328a:	89bb      	ldrh	r3, [r7, #12]
 800328c:	b2d9      	uxtb	r1, r3
 800328e:	89fb      	ldrh	r3, [r7, #14]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	400a      	ands	r2, r1
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d121      	bne.n	8003308 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032d2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fd f971 	bl	80005d8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80032f6:	e007      	b.n	8003308 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0208 	orr.w	r2, r2, #8
 8003306:	619a      	str	r2, [r3, #24]
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800331e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003324:	2b22      	cmp	r3, #34	; 0x22
 8003326:	d13a      	bne.n	800339e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800332e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003334:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003336:	89ba      	ldrh	r2, [r7, #12]
 8003338:	89fb      	ldrh	r3, [r7, #14]
 800333a:	4013      	ands	r3, r2
 800333c:	b29a      	uxth	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	1c9a      	adds	r2, r3, #2
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d121      	bne.n	80033ae <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003378:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd f91e 	bl	80005d8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800339c:	e007      	b.n	80033ae <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699a      	ldr	r2, [r3, #24]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0208 	orr.w	r2, r2, #8
 80033ac:	619a      	str	r2, [r3, #24]
}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <__libc_init_array>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	4e0d      	ldr	r6, [pc, #52]	; (8003404 <__libc_init_array+0x38>)
 80033d0:	4c0d      	ldr	r4, [pc, #52]	; (8003408 <__libc_init_array+0x3c>)
 80033d2:	1ba4      	subs	r4, r4, r6
 80033d4:	10a4      	asrs	r4, r4, #2
 80033d6:	2500      	movs	r5, #0
 80033d8:	42a5      	cmp	r5, r4
 80033da:	d109      	bne.n	80033f0 <__libc_init_array+0x24>
 80033dc:	4e0b      	ldr	r6, [pc, #44]	; (800340c <__libc_init_array+0x40>)
 80033de:	4c0c      	ldr	r4, [pc, #48]	; (8003410 <__libc_init_array+0x44>)
 80033e0:	f000 f820 	bl	8003424 <_init>
 80033e4:	1ba4      	subs	r4, r4, r6
 80033e6:	10a4      	asrs	r4, r4, #2
 80033e8:	2500      	movs	r5, #0
 80033ea:	42a5      	cmp	r5, r4
 80033ec:	d105      	bne.n	80033fa <__libc_init_array+0x2e>
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033f4:	4798      	blx	r3
 80033f6:	3501      	adds	r5, #1
 80033f8:	e7ee      	b.n	80033d8 <__libc_init_array+0xc>
 80033fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033fe:	4798      	blx	r3
 8003400:	3501      	adds	r5, #1
 8003402:	e7f2      	b.n	80033ea <__libc_init_array+0x1e>
 8003404:	08003484 	.word	0x08003484
 8003408:	08003484 	.word	0x08003484
 800340c:	08003484 	.word	0x08003484
 8003410:	08003488 	.word	0x08003488

08003414 <memset>:
 8003414:	4402      	add	r2, r0
 8003416:	4603      	mov	r3, r0
 8003418:	4293      	cmp	r3, r2
 800341a:	d100      	bne.n	800341e <memset+0xa>
 800341c:	4770      	bx	lr
 800341e:	f803 1b01 	strb.w	r1, [r3], #1
 8003422:	e7f9      	b.n	8003418 <memset+0x4>

08003424 <_init>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr

08003430 <_fini>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	bf00      	nop
 8003434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003436:	bc08      	pop	{r3}
 8003438:	469e      	mov	lr, r3
 800343a:	4770      	bx	lr
