
Mecanum_wheel_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004370  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004618  08004618  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004618  08004618  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004618  08004618  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08004690  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08004690  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b373  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e36  00000000  00000000  0002b413  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000838  00000000  00000000  0002d250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000730  00000000  00000000  0002da88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dbd4  00000000  00000000  0002e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097c0  00000000  00000000  0004bd8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7f0f  00000000  00000000  0005554c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd45b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000263c  00000000  00000000  000fd4d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080044f8 	.word	0x080044f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080044f8 	.word	0x080044f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b40      	ldr	r3, [pc, #256]	; (8000398 <MX_GPIO_Init+0x118>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a3f      	ldr	r2, [pc, #252]	; (8000398 <MX_GPIO_Init+0x118>)
 800029c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b3d      	ldr	r3, [pc, #244]	; (8000398 <MX_GPIO_Init+0x118>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b3a      	ldr	r3, [pc, #232]	; (8000398 <MX_GPIO_Init+0x118>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a39      	ldr	r2, [pc, #228]	; (8000398 <MX_GPIO_Init+0x118>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b37      	ldr	r3, [pc, #220]	; (8000398 <MX_GPIO_Init+0x118>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b34      	ldr	r3, [pc, #208]	; (8000398 <MX_GPIO_Init+0x118>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a33      	ldr	r2, [pc, #204]	; (8000398 <MX_GPIO_Init+0x118>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b31      	ldr	r3, [pc, #196]	; (8000398 <MX_GPIO_Init+0x118>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b2e      	ldr	r3, [pc, #184]	; (8000398 <MX_GPIO_Init+0x118>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <MX_GPIO_Init+0x118>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <MX_GPIO_Init+0x118>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Z_DIR_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000300:	f000 fe8a 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin|Z_STEP_Pin 
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800030a:	4824      	ldr	r0, [pc, #144]	; (800039c <MX_GPIO_Init+0x11c>)
 800030c:	f000 fe84 	bl	8001018 <HAL_GPIO_WritePin>
                          |A_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_STEP_GPIO_Port, A_STEP_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2180      	movs	r1, #128	; 0x80
 8000314:	4822      	ldr	r0, [pc, #136]	; (80003a0 <MX_GPIO_Init+0x120>)
 8000316:	f000 fe7f 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800031a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000320:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <MX_GPIO_Init+0x124>)
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	4619      	mov	r1, r3
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <MX_GPIO_Init+0x120>)
 8000330:	f000 fce8 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Z_DIR_Pin|X_STEP_Pin;
 8000334:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2300      	movs	r3, #0
 8000344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000346:	f107 0314 	add.w	r3, r7, #20
 800034a:	4619      	mov	r1, r3
 800034c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000350:	f000 fcd8 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin|Z_STEP_Pin 
 8000354:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000358:	617b      	str	r3, [r7, #20]
                          |A_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	2300      	movs	r3, #0
 8000364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	4619      	mov	r1, r3
 800036c:	480b      	ldr	r0, [pc, #44]	; (800039c <MX_GPIO_Init+0x11c>)
 800036e:	f000 fcc9 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A_STEP_Pin;
 8000372:	2380      	movs	r3, #128	; 0x80
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000376:	2301      	movs	r3, #1
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037e:	2300      	movs	r3, #0
 8000380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A_STEP_GPIO_Port, &GPIO_InitStruct);
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	4619      	mov	r1, r3
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_GPIO_Init+0x120>)
 800038a:	f000 fcbb 	bl	8000d04 <HAL_GPIO_Init>

}
 800038e:	bf00      	nop
 8000390:	3728      	adds	r7, #40	; 0x28
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000
 800039c:	48000400 	.word	0x48000400
 80003a0:	48000800 	.word	0x48000800
 80003a4:	10210000 	.word	0x10210000

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 fad2 	bl	8000954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f828 	bl	8000404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f7ff ff64 	bl	8000280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003b8:	f000 f996 	bl	80006e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &incoming_byte, 1);
 80003bc:	2201      	movs	r2, #1
 80003be:	490d      	ldr	r1, [pc, #52]	; (80003f4 <main+0x4c>)
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <main+0x50>)
 80003c2:	f002 faa7 	bl	8002914 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("goal position x = %d, y = %d, fi = %d\n", goal_pos[0], goal_pos[1], goal_pos[2]);
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <main+0x54>)
 80003c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003cc:	4619      	mov	r1, r3
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <main+0x54>)
 80003d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <main+0x54>)
 80003d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80003dc:	4808      	ldr	r0, [pc, #32]	; (8000400 <main+0x58>)
 80003de:	f003 f943 	bl	8003668 <iprintf>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80003e2:	2120      	movs	r1, #32
 80003e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e8:	f000 fe2e 	bl	8001048 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80003ec:	20c8      	movs	r0, #200	; 0xc8
 80003ee:	f000 fb17 	bl	8000a20 <HAL_Delay>
	  printf("goal position x = %d, y = %d, fi = %d\n", goal_pos[0], goal_pos[1], goal_pos[2]);
 80003f2:	e7e8      	b.n	80003c6 <main+0x1e>
 80003f4:	200000ac 	.word	0x200000ac
 80003f8:	200000b8 	.word	0x200000b8
 80003fc:	200000b0 	.word	0x200000b0
 8000400:	08004510 	.word	0x08004510

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b0a6      	sub	sp, #152	; 0x98
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800040e:	2228      	movs	r2, #40	; 0x28
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f003 f920 	bl	8003658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]
 8000424:	60da      	str	r2, [r3, #12]
 8000426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2258      	movs	r2, #88	; 0x58
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f003 f912 	bl	8003658 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000434:	2302      	movs	r3, #2
 8000436:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000438:	2301      	movs	r3, #1
 800043a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043c:	2310      	movs	r3, #16
 800043e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800044c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000450:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fe0a 	bl	800107c <HAL_RCC_OscConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800046e:	f000 f827 	bl	80004c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000472:	230f      	movs	r3, #15
 8000474:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000476:	2302      	movs	r3, #2
 8000478:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800047e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000482:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000488:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800048c:	2102      	movs	r1, #2
 800048e:	4618      	mov	r0, r3
 8000490:	f001 fd0a 	bl	8001ea8 <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800049a:	f000 f811 	bl	80004c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800049e:	2302      	movs	r3, #2
 80004a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4618      	mov	r0, r3
 80004aa:	f001 ff33 	bl	8002314 <HAL_RCCEx_PeriphCLKConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004b4:	f000 f804 	bl	80004c0 <Error_Handler>
  }
}
 80004b8:	bf00      	nop
 80004ba:	3798      	adds	r7, #152	; 0x98
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
	...

080004d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <HAL_MspInit+0x44>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_MspInit+0x44>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <HAL_MspInit+0x44>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <HAL_MspInit+0x44>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a08      	ldr	r2, [pc, #32]	; (8000514 <HAL_MspInit+0x44>)
 80004f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_MspInit+0x44>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000506:	2007      	movs	r0, #7
 8000508:	f000 fb7c 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <HardFault_Handler+0x4>

0800052c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <MemManage_Handler+0x4>

08000532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <BusFault_Handler+0x4>

08000538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <UsageFault_Handler+0x4>

0800053e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056c:	f000 fa38 	bl	80009e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <USART2_IRQHandler+0x10>)
 800057a:	f002 fa6d 	bl	8002a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000b8 	.word	0x200000b8

08000588 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	e00a      	b.n	80005b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800059a:	f3af 8000 	nop.w
 800059e:	4601      	mov	r1, r0
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	60ba      	str	r2, [r7, #8]
 80005a6:	b2ca      	uxtb	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3301      	adds	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbf0      	blt.n	800059a <_read+0x12>
	}

return len;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e009      	b.n	80005e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f90f 	bl	8000800 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	3301      	adds	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbf1      	blt.n	80005d4 <_write+0x12>
	}
	return len;
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <_close>:

int _close(int file)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
	return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000622:	605a      	str	r2, [r3, #4]
	return 0;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <_isatty>:

int _isatty(int file)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
	return 1;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
	return 0;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <_sbrk+0x50>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d102      	bne.n	800067a <_sbrk+0x16>
		heap_end = &end;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <_sbrk+0x50>)
 8000676:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <_sbrk+0x54>)
 8000678:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <_sbrk+0x50>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <_sbrk+0x50>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4413      	add	r3, r2
 8000688:	466a      	mov	r2, sp
 800068a:	4293      	cmp	r3, r2
 800068c:	d907      	bls.n	800069e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800068e:	f002 ffb9 	bl	8003604 <__errno>
 8000692:	4602      	mov	r2, r0
 8000694:	230c      	movs	r3, #12
 8000696:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	e006      	b.n	80006ac <_sbrk+0x48>
	}

	heap_end += incr;
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <_sbrk+0x50>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <_sbrk+0x50>)
 80006a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80006aa:	68fb      	ldr	r3, [r7, #12]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	20000140 	.word	0x20000140

080006bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <SystemInit+0x28>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006c6:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <SystemInit+0x28>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <SystemInit+0x28>)
 80006d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d6:	609a      	str	r2, [r3, #8]
#endif
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <MX_USART2_UART_Init+0x5c>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800072c:	f002 f810 	bl	8002750 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000736:	f7ff fec3 	bl	80004c0 <Error_Handler>
  }

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000b8 	.word	0x200000b8
 8000744:	40004400 	.word	0x40004400

08000748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <HAL_UART_MspInit+0x8c>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d130      	bne.n	80007cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <HAL_UART_MspInit+0x90>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <HAL_UART_MspInit+0x90>)
 8000770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_UART_MspInit+0x90>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_UART_MspInit+0x90>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <HAL_UART_MspInit+0x90>)
 8000788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_UART_MspInit+0x90>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800079a:	230c      	movs	r3, #12
 800079c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007aa:	2307      	movs	r3, #7
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f000 faa4 	bl	8000d04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2100      	movs	r1, #0
 80007c0:	2026      	movs	r0, #38	; 0x26
 80007c2:	f000 fa2a 	bl	8000c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007c6:	2026      	movs	r0, #38	; 0x26
 80007c8:	f000 fa43 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */
  /* USER CODE END USART2_MspInit 1 */
  }
}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40004400 	.word	0x40004400
 80007d8:	40021000 	.word	0x40021000

080007dc <send_char>:
  }
} 

/* USER CODE BEGIN 1 */
void send_char(char c)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t*)&c, 1, 1000);
 80007e6:	1df9      	adds	r1, r7, #7
 80007e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ec:	2201      	movs	r2, #1
 80007ee:	4803      	ldr	r0, [pc, #12]	; (80007fc <send_char+0x20>)
 80007f0:	f001 fffc 	bl	80027ec <HAL_UART_Transmit>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000b8 	.word	0x200000b8

08000800 <__io_putchar>:

int __io_putchar(int c)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	if(c == '\n')
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b0a      	cmp	r3, #10
 800080c:	d102      	bne.n	8000814 <__io_putchar+0x14>
		send_char('\r');
 800080e:	200d      	movs	r0, #13
 8000810:	f7ff ffe4 	bl	80007dc <send_char>
	send_char(c);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ffdf 	bl	80007dc <send_char>
	return c;
 800081e:	687b      	ldr	r3, [r7, #4]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_UART_RxCpltCallback+0x28>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d106      	bne.n	8000848 <HAL_UART_RxCpltCallback+0x20>
	{
		pc_interface();
 800083a:	f000 f80f 	bl	800085c <pc_interface>
		HAL_UART_Receive_IT(&huart2, &incoming_byte, 1);
 800083e:	2201      	movs	r2, #1
 8000840:	4904      	ldr	r1, [pc, #16]	; (8000854 <HAL_UART_RxCpltCallback+0x2c>)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <HAL_UART_RxCpltCallback+0x30>)
 8000844:	f002 f866 	bl	8002914 <HAL_UART_Receive_IT>
	}
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40004400 	.word	0x40004400
 8000854:	200000ac 	.word	0x200000ac
 8000858:	200000b8 	.word	0x200000b8

0800085c <pc_interface>:

void pc_interface()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	if ((incoming_byte >= 48) && (incoming_byte <= 57))
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <pc_interface+0x94>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b2f      	cmp	r3, #47	; 0x2f
 8000866:	d917      	bls.n	8000898 <pc_interface+0x3c>
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <pc_interface+0x94>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b39      	cmp	r3, #57	; 0x39
 800086e:	d813      	bhi.n	8000898 <pc_interface+0x3c>
		{
			incoming_byte -= 48;
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <pc_interface+0x94>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	3b30      	subs	r3, #48	; 0x30
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <pc_interface+0x94>)
 800087a:	701a      	strb	r2, [r3, #0]
			buff = buff*10 + incoming_byte;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <pc_interface+0x98>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	0092      	lsls	r2, r2, #2
 8000884:	4413      	add	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <pc_interface+0x94>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4413      	add	r3, r2
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <pc_interface+0x98>)
 8000894:	701a      	strb	r2, [r3, #0]
			goal_pos[2] = buff;
			buff = 0;
		}
		else
			printf("Incorrect input\n");
}
 8000896:	e029      	b.n	80008ec <pc_interface+0x90>
		else if (incoming_byte == 'x')
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <pc_interface+0x94>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b78      	cmp	r3, #120	; 0x78
 800089e:	d108      	bne.n	80008b2 <pc_interface+0x56>
			goal_pos[0] = buff;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <pc_interface+0x98>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <pc_interface+0x9c>)
 80008a8:	801a      	strh	r2, [r3, #0]
			buff = 0;
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <pc_interface+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
}
 80008b0:	e01c      	b.n	80008ec <pc_interface+0x90>
		else if (incoming_byte == 'y')
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <pc_interface+0x94>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b79      	cmp	r3, #121	; 0x79
 80008b8:	d108      	bne.n	80008cc <pc_interface+0x70>
			goal_pos[1] = buff;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <pc_interface+0x98>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b21a      	sxth	r2, r3
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <pc_interface+0x9c>)
 80008c2:	805a      	strh	r2, [r3, #2]
			buff = 0;
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <pc_interface+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
}
 80008ca:	e00f      	b.n	80008ec <pc_interface+0x90>
		else if (incoming_byte == 'f')
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <pc_interface+0x94>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b66      	cmp	r3, #102	; 0x66
 80008d2:	d108      	bne.n	80008e6 <pc_interface+0x8a>
			goal_pos[2] = buff;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <pc_interface+0x98>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b21a      	sxth	r2, r3
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <pc_interface+0x9c>)
 80008dc:	809a      	strh	r2, [r3, #4]
			buff = 0;
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <pc_interface+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
}
 80008e4:	e002      	b.n	80008ec <pc_interface+0x90>
			printf("Incorrect input\n");
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <pc_interface+0xa0>)
 80008e8:	f002 ff32 	bl	8003750 <puts>
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200000ac 	.word	0x200000ac
 80008f4:	200000ad 	.word	0x200000ad
 80008f8:	200000b0 	.word	0x200000b0
 80008fc:	08004538 	.word	0x08004538

08000900 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000938 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000904:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000906:	e003      	b.n	8000910 <LoopCopyDataInit>

08000908 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800090a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800090c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800090e:	3104      	adds	r1, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000914:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000916:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000918:	d3f6      	bcc.n	8000908 <CopyDataInit>
	ldr	r2, =_sbss
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <LoopForever+0x12>)
	b	LoopFillZerobss
 800091c:	e002      	b.n	8000924 <LoopFillZerobss>

0800091e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800091e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000920:	f842 3b04 	str.w	r3, [r2], #4

08000924 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <LoopForever+0x16>)
	cmp	r2, r3
 8000926:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000928:	d3f9      	bcc.n	800091e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800092a:	f7ff fec7 	bl	80006bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092e:	f002 fe6f 	bl	8003610 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000932:	f7ff fd39 	bl	80003a8 <main>

08000936 <LoopForever>:

LoopForever:
    b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000938:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800093c:	08004620 	.word	0x08004620
	ldr	r0, =_sdata
 8000940:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000944:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000948:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800094c:	20000140 	.word	0x20000140

08000950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_2_IRQHandler>
	...

08000954 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_Init+0x28>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a07      	ldr	r2, [pc, #28]	; (800097c <HAL_Init+0x28>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 f94d 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096a:	2000      	movs	r0, #0
 800096c:	f000 f808 	bl	8000980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000970:	f7ff fdae 	bl	80004d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40022000 	.word	0x40022000

08000980 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_InitTick+0x54>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_InitTick+0x58>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000996:	fbb3 f3f1 	udiv	r3, r3, r1
 800099a:	fbb2 f3f3 	udiv	r3, r2, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f965 	bl	8000c6e <HAL_SYSTICK_Config>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00e      	b.n	80009cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	d80a      	bhi.n	80009ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b4:	2200      	movs	r2, #0
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f000 f92d 	bl	8000c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c0:	4a06      	ldr	r2, [pc, #24]	; (80009dc <HAL_InitTick+0x5c>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e000      	b.n	80009cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000004 	.word	0x20000004

080009e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_IncTick+0x20>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_IncTick+0x24>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <HAL_IncTick+0x24>)
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000138 	.word	0x20000138

08000a08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <HAL_GetTick+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000138 	.word	0x20000138

08000a20 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a28:	f7ff ffee 	bl	8000a08 <HAL_GetTick>
 8000a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a38:	d005      	beq.n	8000a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_Delay+0x40>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4413      	add	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a46:	bf00      	nop
 8000a48:	f7ff ffde 	bl	8000a08 <HAL_GetTick>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d8f7      	bhi.n	8000a48 <HAL_Delay+0x28>
  {
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000008 	.word	0x20000008

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4907      	ldr	r1, [pc, #28]	; (8000b00 <__NVIC_EnableIRQ+0x38>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	; 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd0:	d301      	bcc.n	8000bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00f      	b.n	8000bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <SysTick_Config+0x40>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bde:	210f      	movs	r1, #15
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f7ff ff8e 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <SysTick_Config+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SysTick_Config+0x40>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff29 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2c:	f7ff ff3e 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	6978      	ldr	r0, [r7, #20]
 8000c38:	f7ff ff8e 	bl	8000b58 <NVIC_EncodePriority>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff5d 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff31 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffa2 	bl	8000bc0 <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d005      	beq.n	8000ca8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e027      	b.n	8000cf8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 020e 	bic.w	r2, r2, #14
 8000cb6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0201 	bic.w	r2, r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	4798      	blx	r3
    } 
  }
  return status;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d12:	e160      	b.n	8000fd6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	2101      	movs	r1, #1
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 8152 	beq.w	8000fd0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x38>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b12      	cmp	r3, #18
 8000d3a:	d123      	bne.n	8000d84 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	08da      	lsrs	r2, r3, #3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3208      	adds	r2, #8
 8000d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	6939      	ldr	r1, [r7, #16]
 8000d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0203 	and.w	r2, r3, #3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d00b      	beq.n	8000dd8 <HAL_GPIO_Init+0xd4>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d007      	beq.n	8000dd8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dcc:	2b11      	cmp	r3, #17
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b12      	cmp	r3, #18
 8000dd6:	d130      	bne.n	8000e3a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0e:	2201      	movs	r2, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	f003 0201 	and.w	r2, r3, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 80ac 	beq.w	8000fd0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e78:	4b5e      	ldr	r3, [pc, #376]	; (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a5d      	ldr	r2, [pc, #372]	; (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b5b      	ldr	r3, [pc, #364]	; (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e90:	4a59      	ldr	r2, [pc, #356]	; (8000ff8 <HAL_GPIO_Init+0x2f4>)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eba:	d025      	beq.n	8000f08 <HAL_GPIO_Init+0x204>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a4f      	ldr	r2, [pc, #316]	; (8000ffc <HAL_GPIO_Init+0x2f8>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d01f      	beq.n	8000f04 <HAL_GPIO_Init+0x200>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a4e      	ldr	r2, [pc, #312]	; (8001000 <HAL_GPIO_Init+0x2fc>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d019      	beq.n	8000f00 <HAL_GPIO_Init+0x1fc>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4d      	ldr	r2, [pc, #308]	; (8001004 <HAL_GPIO_Init+0x300>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d013      	beq.n	8000efc <HAL_GPIO_Init+0x1f8>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a4c      	ldr	r2, [pc, #304]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d00d      	beq.n	8000ef8 <HAL_GPIO_Init+0x1f4>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a4b      	ldr	r2, [pc, #300]	; (800100c <HAL_GPIO_Init+0x308>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d007      	beq.n	8000ef4 <HAL_GPIO_Init+0x1f0>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a4a      	ldr	r2, [pc, #296]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d101      	bne.n	8000ef0 <HAL_GPIO_Init+0x1ec>
 8000eec:	2306      	movs	r3, #6
 8000eee:	e00c      	b.n	8000f0a <HAL_GPIO_Init+0x206>
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	e00a      	b.n	8000f0a <HAL_GPIO_Init+0x206>
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	e008      	b.n	8000f0a <HAL_GPIO_Init+0x206>
 8000ef8:	2304      	movs	r3, #4
 8000efa:	e006      	b.n	8000f0a <HAL_GPIO_Init+0x206>
 8000efc:	2303      	movs	r3, #3
 8000efe:	e004      	b.n	8000f0a <HAL_GPIO_Init+0x206>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e002      	b.n	8000f0a <HAL_GPIO_Init+0x206>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <HAL_GPIO_Init+0x206>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	f002 0203 	and.w	r2, r2, #3
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	4093      	lsls	r3, r2
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f1a:	4937      	ldr	r1, [pc, #220]	; (8000ff8 <HAL_GPIO_Init+0x2f4>)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f28:	4b3a      	ldr	r3, [pc, #232]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f4c:	4a31      	ldr	r2, [pc, #196]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f52:	4b30      	ldr	r3, [pc, #192]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f76:	4a27      	ldr	r2, [pc, #156]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fa0:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f47f ae97 	bne.w	8000d14 <HAL_GPIO_Init+0x10>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	371c      	adds	r7, #28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	48000400 	.word	0x48000400
 8001000:	48000800 	.word	0x48000800
 8001004:	48000c00 	.word	0x48000c00
 8001008:	48001000 	.word	0x48001000
 800100c:	48001400 	.word	0x48001400
 8001010:	48001800 	.word	0x48001800
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001034:	e002      	b.n	800103c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695a      	ldr	r2, [r3, #20]
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	041a      	lsls	r2, r3, #16
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001068:	e002      	b.n	8001070 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001082:	af00      	add	r7, sp, #0
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	f000 bf01 	b.w	8001e98 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 8160 	beq.w	8001366 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010a6:	4bae      	ldr	r3, [pc, #696]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d00c      	beq.n	80010cc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b2:	4bab      	ldr	r3, [pc, #684]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d159      	bne.n	8001172 <HAL_RCC_OscConfig+0xf6>
 80010be:	4ba8      	ldr	r3, [pc, #672]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ca:	d152      	bne.n	8001172 <HAL_RCC_OscConfig+0xf6>
 80010cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80010d8:	fa93 f3a3 	rbit	r3, r3
 80010dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	fab3 f383 	clz	r3, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d102      	bne.n	80010fe <HAL_RCC_OscConfig+0x82>
 80010f8:	4b99      	ldr	r3, [pc, #612]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	e015      	b.n	800112a <HAL_RCC_OscConfig+0xae>
 80010fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001102:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001112:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001116:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800111a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001126:	4b8e      	ldr	r3, [pc, #568]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800112e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001132:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001136:	fa92 f2a2 	rbit	r2, r2
 800113a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800113e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001142:	fab2 f282 	clz	r2, r2
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	f042 0220 	orr.w	r2, r2, #32
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	f002 021f 	and.w	r2, r2, #31
 8001152:	2101      	movs	r1, #1
 8001154:	fa01 f202 	lsl.w	r2, r1, r2
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 8102 	beq.w	8001364 <HAL_RCC_OscConfig+0x2e8>
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 80fc 	bne.w	8001364 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	f000 be93 	b.w	8001e98 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117c:	d106      	bne.n	800118c <HAL_RCC_OscConfig+0x110>
 800117e:	4b78      	ldr	r3, [pc, #480]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a77      	ldr	r2, [pc, #476]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e030      	b.n	80011ee <HAL_RCC_OscConfig+0x172>
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x134>
 8001196:	4b72      	ldr	r3, [pc, #456]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a71      	ldr	r2, [pc, #452]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 800119c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b6f      	ldr	r3, [pc, #444]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6e      	ldr	r2, [pc, #440]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80011a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e01e      	b.n	80011ee <HAL_RCC_OscConfig+0x172>
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ba:	d10c      	bne.n	80011d6 <HAL_RCC_OscConfig+0x15a>
 80011bc:	4b68      	ldr	r3, [pc, #416]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a67      	ldr	r2, [pc, #412]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80011c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b65      	ldr	r3, [pc, #404]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a64      	ldr	r2, [pc, #400]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e00b      	b.n	80011ee <HAL_RCC_OscConfig+0x172>
 80011d6:	4b62      	ldr	r3, [pc, #392]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a61      	ldr	r2, [pc, #388]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80011dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b5f      	ldr	r3, [pc, #380]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a5e      	ldr	r2, [pc, #376]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80011e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ec:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d059      	beq.n	80012ac <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc06 	bl	8000a08 <HAL_GetTick>
 80011fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001200:	e00a      	b.n	8001218 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001202:	f7ff fc01 	bl	8000a08 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b64      	cmp	r3, #100	; 0x64
 8001210:	d902      	bls.n	8001218 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	f000 be40 	b.w	8001e98 <HAL_RCC_OscConfig+0xe1c>
 8001218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800122c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001230:	fab3 f383 	clz	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d102      	bne.n	800124a <HAL_RCC_OscConfig+0x1ce>
 8001244:	4b46      	ldr	r3, [pc, #280]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x1fa>
 800124a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800124e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001252:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800125e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001262:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001266:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800126a:	fa93 f3a3 	rbit	r3, r3
 800126e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800127e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001282:	fa92 f2a2 	rbit	r2, r2
 8001286:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800128a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800128e:	fab2 f282 	clz	r2, r2
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	f002 021f 	and.w	r2, r2, #31
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0ab      	beq.n	8001202 <HAL_RCC_OscConfig+0x186>
 80012aa:	e05c      	b.n	8001366 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fbac 	bl	8000a08 <HAL_GetTick>
 80012b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b4:	e00a      	b.n	80012cc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b6:	f7ff fba7 	bl	8000a08 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d902      	bls.n	80012cc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	f000 bde6 	b.w	8001e98 <HAL_RCC_OscConfig+0xe1c>
 80012cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80012e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d102      	bne.n	80012fe <HAL_RCC_OscConfig+0x282>
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	e015      	b.n	800132a <HAL_RCC_OscConfig+0x2ae>
 80012fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001302:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001312:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001316:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800131a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_RCC_OscConfig+0x2e4>)
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800132e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001332:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001336:	fa92 f2a2 	rbit	r2, r2
 800133a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800133e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001342:	fab2 f282 	clz	r2, r2
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	f042 0220 	orr.w	r2, r2, #32
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	f002 021f 	and.w	r2, r2, #31
 8001352:	2101      	movs	r1, #1
 8001354:	fa01 f202 	lsl.w	r2, r1, r2
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1ab      	bne.n	80012b6 <HAL_RCC_OscConfig+0x23a>
 800135e:	e002      	b.n	8001366 <HAL_RCC_OscConfig+0x2ea>
 8001360:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 8170 	beq.w	8001656 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001376:	4bd0      	ldr	r3, [pc, #832]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00c      	beq.n	800139c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001382:	4bcd      	ldr	r3, [pc, #820]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b08      	cmp	r3, #8
 800138c:	d16d      	bne.n	800146a <HAL_RCC_OscConfig+0x3ee>
 800138e:	4bca      	ldr	r3, [pc, #808]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800139a:	d166      	bne.n	800146a <HAL_RCC_OscConfig+0x3ee>
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80013ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	fab3 f383 	clz	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	095b      	lsrs	r3, r3, #5
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d102      	bne.n	80013cc <HAL_RCC_OscConfig+0x350>
 80013c6:	4bbc      	ldr	r3, [pc, #752]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	e013      	b.n	80013f4 <HAL_RCC_OscConfig+0x378>
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80013e8:	fa93 f3a3 	rbit	r3, r3
 80013ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013f0:	4bb1      	ldr	r3, [pc, #708]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	2202      	movs	r2, #2
 80013f6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80013fa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80013fe:	fa92 f2a2 	rbit	r2, r2
 8001402:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001406:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800140a:	fab2 f282 	clz	r2, r2
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	f042 0220 	orr.w	r2, r2, #32
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	f002 021f 	and.w	r2, r2, #31
 800141a:	2101      	movs	r1, #1
 800141c:	fa01 f202 	lsl.w	r2, r1, r2
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <HAL_RCC_OscConfig+0x3ba>
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d002      	beq.n	8001436 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	f000 bd31 	b.w	8001e98 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	4ba0      	ldr	r3, [pc, #640]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	21f8      	movs	r1, #248	; 0xf8
 8001446:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800144e:	fa91 f1a1 	rbit	r1, r1
 8001452:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001456:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800145a:	fab1 f181 	clz	r1, r1
 800145e:	b2c9      	uxtb	r1, r1
 8001460:	408b      	lsls	r3, r1
 8001462:	4995      	ldr	r1, [pc, #596]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001468:	e0f5      	b.n	8001656 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 8085 	beq.w	8001580 <HAL_RCC_OscConfig+0x504>
 8001476:	2301      	movs	r3, #1
 8001478:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001488:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001496:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	461a      	mov	r2, r3
 800149e:	2301      	movs	r3, #1
 80014a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fab1 	bl	8000a08 <HAL_GetTick>
 80014a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff faac 	bl	8000a08 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d902      	bls.n	80014c2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	f000 bceb 	b.w	8001e98 <HAL_RCC_OscConfig+0xe1c>
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80014d4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	fab3 f383 	clz	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d102      	bne.n	80014f2 <HAL_RCC_OscConfig+0x476>
 80014ec:	4b72      	ldr	r3, [pc, #456]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	e013      	b.n	800151a <HAL_RCC_OscConfig+0x49e>
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014fc:	fa93 f3a3 	rbit	r3, r3
 8001500:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001504:	2302      	movs	r3, #2
 8001506:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800150a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001516:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	2202      	movs	r2, #2
 800151c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001520:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001524:	fa92 f2a2 	rbit	r2, r2
 8001528:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800152c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001530:	fab2 f282 	clz	r2, r2
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	f042 0220 	orr.w	r2, r2, #32
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f002 021f 	and.w	r2, r2, #31
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f202 	lsl.w	r2, r1, r2
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0af      	beq.n	80014ac <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b5a      	ldr	r3, [pc, #360]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	21f8      	movs	r1, #248	; 0xf8
 800155c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001564:	fa91 f1a1 	rbit	r1, r1
 8001568:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800156c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001570:	fab1 f181 	clz	r1, r1
 8001574:	b2c9      	uxtb	r1, r1
 8001576:	408b      	lsls	r3, r1
 8001578:	494f      	ldr	r1, [pc, #316]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
 800157e:	e06a      	b.n	8001656 <HAL_RCC_OscConfig+0x5da>
 8001580:	2301      	movs	r3, #1
 8001582:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001592:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	461a      	mov	r2, r3
 80015a8:	2300      	movs	r3, #0
 80015aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fa2c 	bl	8000a08 <HAL_GetTick>
 80015b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b6:	f7ff fa27 	bl	8000a08 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d902      	bls.n	80015cc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	f000 bc66 	b.w	8001e98 <HAL_RCC_OscConfig+0xe1c>
 80015cc:	2302      	movs	r3, #2
 80015ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80015de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	095b      	lsrs	r3, r3, #5
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d102      	bne.n	80015fc <HAL_RCC_OscConfig+0x580>
 80015f6:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	e013      	b.n	8001624 <HAL_RCC_OscConfig+0x5a8>
 80015fc:	2302      	movs	r3, #2
 80015fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800160e:	2302      	movs	r3, #2
 8001610:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001614:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001618:	fa93 f3a3 	rbit	r3, r3
 800161c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001620:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <HAL_RCC_OscConfig+0x63c>)
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	2202      	movs	r2, #2
 8001626:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800162a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800162e:	fa92 f2a2 	rbit	r2, r2
 8001632:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001636:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800163a:	fab2 f282 	clz	r2, r2
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	f042 0220 	orr.w	r2, r2, #32
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	f002 021f 	and.w	r2, r2, #31
 800164a:	2101      	movs	r1, #1
 800164c:	fa01 f202 	lsl.w	r2, r1, r2
 8001650:	4013      	ands	r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1af      	bne.n	80015b6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80da 	beq.w	800181a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d069      	beq.n	8001744 <HAL_RCC_OscConfig+0x6c8>
 8001670:	2301      	movs	r3, #1
 8001672:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001682:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_RCC_OscConfig+0x640>)
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	461a      	mov	r2, r3
 8001696:	2301      	movs	r3, #1
 8001698:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff f9b5 	bl	8000a08 <HAL_GetTick>
 800169e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	e00d      	b.n	80016c0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff f9b0 	bl	8000a08 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d905      	bls.n	80016c0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e3ef      	b.n	8001e98 <HAL_RCC_OscConfig+0xe1c>
 80016b8:	40021000 	.word	0x40021000
 80016bc:	10908120 	.word	0x10908120
 80016c0:	2302      	movs	r3, #2
 80016c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016ca:	fa93 f2a3 	rbit	r2, r3
 80016ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80016d8:	2202      	movs	r2, #2
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	fa93 f2a3 	rbit	r2, r3
 80016e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001702:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001704:	4ba4      	ldr	r3, [pc, #656]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 8001706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001708:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800170c:	2102      	movs	r1, #2
 800170e:	6019      	str	r1, [r3, #0]
 8001710:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f1a3 	rbit	r1, r3
 800171a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800171e:	6019      	str	r1, [r3, #0]
  return result;
 8001720:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	4013      	ands	r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0b0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x628>
 8001742:	e06a      	b.n	800181a <HAL_RCC_OscConfig+0x79e>
 8001744:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	fa93 f2a3 	rbit	r2, r3
 8001756:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800175a:	601a      	str	r2, [r3, #0]
  return result;
 800175c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001760:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	4b8c      	ldr	r3, [pc, #560]	; (800199c <HAL_RCC_OscConfig+0x920>)
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	461a      	mov	r2, r3
 8001772:	2300      	movs	r3, #0
 8001774:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff f947 	bl	8000a08 <HAL_GetTick>
 800177a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177e:	e009      	b.n	8001794 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff f942 	bl	8000a08 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e381      	b.n	8001e98 <HAL_RCC_OscConfig+0xe1c>
 8001794:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001798:	2202      	movs	r2, #2
 800179a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	fa93 f2a3 	rbit	r2, r3
 80017a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017b0:	2202      	movs	r2, #2
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017c8:	2202      	movs	r2, #2
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f2a3 	rbit	r2, r3
 80017d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	4b6e      	ldr	r3, [pc, #440]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 80017de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017e4:	2102      	movs	r1, #2
 80017e6:	6019      	str	r1, [r3, #0]
 80017e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	fa93 f1a3 	rbit	r1, r3
 80017f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017f6:	6019      	str	r1, [r3, #0]
  return result;
 80017f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	4013      	ands	r3, r2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1b2      	bne.n	8001780 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8157 	beq.w	8001ad8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001830:	4b59      	ldr	r3, [pc, #356]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d112      	bne.n	8001862 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	4b56      	ldr	r3, [pc, #344]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	4a55      	ldr	r2, [pc, #340]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001846:	61d3      	str	r3, [r2, #28]
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800185c:	2301      	movs	r3, #1
 800185e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <HAL_RCC_OscConfig+0x924>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d11a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186e:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <HAL_RCC_OscConfig+0x924>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <HAL_RCC_OscConfig+0x924>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7ff f8c5 	bl	8000a08 <HAL_GetTick>
 800187e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	e009      	b.n	8001898 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001884:	f7ff f8c0 	bl	8000a08 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b64      	cmp	r3, #100	; 0x64
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e2ff      	b.n	8001e98 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_RCC_OscConfig+0x924>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ef      	beq.n	8001884 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x840>
 80018ae:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a39      	ldr	r2, [pc, #228]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	e02f      	b.n	800191c <HAL_RCC_OscConfig+0x8a0>
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x864>
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a33      	ldr	r2, [pc, #204]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6213      	str	r3, [r2, #32]
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a30      	ldr	r2, [pc, #192]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	6213      	str	r3, [r2, #32]
 80018de:	e01d      	b.n	800191c <HAL_RCC_OscConfig+0x8a0>
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x888>
 80018ea:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	4b28      	ldr	r3, [pc, #160]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a27      	ldr	r2, [pc, #156]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6213      	str	r3, [r2, #32]
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0x8a0>
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a23      	ldr	r2, [pc, #140]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6213      	str	r3, [r2, #32]
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4a20      	ldr	r2, [pc, #128]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 8001916:	f023 0304 	bic.w	r3, r3, #4
 800191a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d06a      	beq.n	80019fc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7ff f86f 	bl	8000a08 <HAL_GetTick>
 800192a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001930:	f7ff f86a 	bl	8000a08 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e2a7      	b.n	8001e98 <HAL_RCC_OscConfig+0xe1c>
 8001948:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800194c:	2202      	movs	r2, #2
 800194e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	fa93 f2a3 	rbit	r2, r3
 800195a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001964:	2202      	movs	r2, #2
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	fa93 f2a3 	rbit	r2, r3
 8001972:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001976:	601a      	str	r2, [r3, #0]
  return result;
 8001978:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800197c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197e:	fab3 f383 	clz	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	095b      	lsrs	r3, r3, #5
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_OscConfig+0x928>
 8001992:	4b01      	ldr	r3, [pc, #4]	; (8001998 <HAL_RCC_OscConfig+0x91c>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	e013      	b.n	80019c0 <HAL_RCC_OscConfig+0x944>
 8001998:	40021000 	.word	0x40021000
 800199c:	10908120 	.word	0x10908120
 80019a0:	40007000 	.word	0x40007000
 80019a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019a8:	2202      	movs	r2, #2
 80019aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	4bc0      	ldr	r3, [pc, #768]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019c4:	2102      	movs	r1, #2
 80019c6:	6011      	str	r1, [r2, #0]
 80019c8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	fa92 f1a2 	rbit	r1, r2
 80019d2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019d6:	6011      	str	r1, [r2, #0]
  return result;
 80019d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	fab2 f282 	clz	r2, r2
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	f002 021f 	and.w	r2, r2, #31
 80019ee:	2101      	movs	r1, #1
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d09a      	beq.n	8001930 <HAL_RCC_OscConfig+0x8b4>
 80019fa:	e063      	b.n	8001ac4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fc:	f7ff f804 	bl	8000a08 <HAL_GetTick>
 8001a00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	e00b      	b.n	8001a1e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7fe ffff 	bl	8000a08 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e23c      	b.n	8001e98 <HAL_RCC_OscConfig+0xe1c>
 8001a1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fa93 f2a3 	rbit	r2, r3
 8001a48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a4c:	601a      	str	r2, [r3, #0]
  return result;
 8001a4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d102      	bne.n	8001a6e <HAL_RCC_OscConfig+0x9f2>
 8001a68:	4b95      	ldr	r3, [pc, #596]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	e00d      	b.n	8001a8a <HAL_RCC_OscConfig+0xa0e>
 8001a6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a72:	2202      	movs	r2, #2
 8001a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	fa93 f2a3 	rbit	r2, r3
 8001a80:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	4b8e      	ldr	r3, [pc, #568]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a8e:	2102      	movs	r1, #2
 8001a90:	6011      	str	r1, [r2, #0]
 8001a92:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	fa92 f1a2 	rbit	r1, r2
 8001a9c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001aa0:	6011      	str	r1, [r2, #0]
  return result;
 8001aa2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	fab2 f282 	clz	r2, r2
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	f002 021f 	and.w	r2, r2, #31
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1a0      	bne.n	8001a06 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ac4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	4b7c      	ldr	r3, [pc, #496]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	4a7b      	ldr	r2, [pc, #492]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 8001ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 81d9 	beq.w	8001e96 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae4:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	f000 81a6 	beq.w	8001e3e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	f040 811e 	bne.w	8001d3a <HAL_RCC_OscConfig+0xcbe>
 8001afe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b16:	601a      	str	r2, [r3, #0]
  return result;
 8001b18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2300      	movs	r3, #0
 8001b32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7fe ff68 	bl	8000a08 <HAL_GetTick>
 8001b38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3c:	e009      	b.n	8001b52 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7fe ff63 	bl	8000a08 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e1a2      	b.n	8001e98 <HAL_RCC_OscConfig+0xe1c>
 8001b52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f2a3 	rbit	r2, r3
 8001b66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b6a:	601a      	str	r2, [r3, #0]
  return result;
 8001b6c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d102      	bne.n	8001b8c <HAL_RCC_OscConfig+0xb10>
 8001b86:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	e01b      	b.n	8001bc4 <HAL_RCC_OscConfig+0xb48>
 8001b8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	fa93 f2a3 	rbit	r2, r3
 8001ba0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001baa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001bc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bcc:	6011      	str	r1, [r2, #0]
 8001bce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	fa92 f1a2 	rbit	r1, r2
 8001bd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bdc:	6011      	str	r1, [r2, #0]
  return result;
 8001bde:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	fab2 f282 	clz	r2, r2
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	f042 0220 	orr.w	r2, r2, #32
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	f002 021f 	and.w	r2, r2, #31
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d19e      	bne.n	8001b3e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	f023 020f 	bic.w	r2, r3, #15
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	492c      	ldr	r1, [pc, #176]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a19      	ldr	r1, [r3, #32]
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	4925      	ldr	r1, [pc, #148]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
 8001c30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c48:	601a      	str	r2, [r3, #0]
  return result;
 8001c4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c4e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	461a      	mov	r2, r3
 8001c62:	2301      	movs	r3, #1
 8001c64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7fe fecf 	bl	8000a08 <HAL_GetTick>
 8001c6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6e:	e009      	b.n	8001c84 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7fe feca 	bl	8000a08 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e109      	b.n	8001e98 <HAL_RCC_OscConfig+0xe1c>
 8001c84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f2a3 	rbit	r2, r3
 8001c98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c9c:	601a      	str	r2, [r3, #0]
  return result;
 8001c9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ca2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d105      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xc48>
 8001cb8:	4b01      	ldr	r3, [pc, #4]	; (8001cc0 <HAL_RCC_OscConfig+0xc44>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	e01e      	b.n	8001cfc <HAL_RCC_OscConfig+0xc80>
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f2a3 	rbit	r2, r3
 8001cd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fa93 f2a3 	rbit	r2, r3
 8001cf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_RCC_OscConfig+0xe28>)
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d04:	6011      	str	r1, [r2, #0]
 8001d06:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	fa92 f1a2 	rbit	r1, r2
 8001d10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d14:	6011      	str	r1, [r2, #0]
  return result;
 8001d16:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f042 0220 	orr.w	r2, r2, #32
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f002 021f 	and.w	r2, r2, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d09b      	beq.n	8001c70 <HAL_RCC_OscConfig+0xbf4>
 8001d38:	e0ad      	b.n	8001e96 <HAL_RCC_OscConfig+0xe1a>
 8001d3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d52:	601a      	str	r2, [r3, #0]
  return result;
 8001d54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d58:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7fe fe4a 	bl	8000a08 <HAL_GetTick>
 8001d74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d78:	e009      	b.n	8001d8e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7fe fe45 	bl	8000a08 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e084      	b.n	8001e98 <HAL_RCC_OscConfig+0xe1c>
 8001d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f2a3 	rbit	r2, r3
 8001da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da6:	601a      	str	r2, [r3, #0]
  return result;
 8001da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	095b      	lsrs	r3, r3, #5
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d102      	bne.n	8001dc8 <HAL_RCC_OscConfig+0xd4c>
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <HAL_RCC_OscConfig+0xe28>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	e01b      	b.n	8001e00 <HAL_RCC_OscConfig+0xd84>
 8001dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	fa93 f2a3 	rbit	r2, r3
 8001ddc:	f107 0320 	add.w	r3, r7, #32
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f107 0318 	add.w	r3, r7, #24
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <HAL_RCC_OscConfig+0xe28>)
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	f107 0214 	add.w	r2, r7, #20
 8001e04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e08:	6011      	str	r1, [r2, #0]
 8001e0a:	f107 0214 	add.w	r2, r7, #20
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	fa92 f1a2 	rbit	r1, r2
 8001e14:	f107 0210 	add.w	r2, r7, #16
 8001e18:	6011      	str	r1, [r2, #0]
  return result;
 8001e1a:	f107 0210 	add.w	r2, r7, #16
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	fab2 f282 	clz	r2, r2
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f002 021f 	and.w	r2, r2, #31
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f202 	lsl.w	r2, r1, r2
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d19e      	bne.n	8001d7a <HAL_RCC_OscConfig+0xcfe>
 8001e3c:	e02b      	b.n	8001e96 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e025      	b.n	8001e98 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_RCC_OscConfig+0xe28>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_RCC_OscConfig+0xe28>)
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e60:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d111      	bne.n	8001e92 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d108      	bne.n	8001e92 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e84:	f003 020f 	and.w	r2, r3, #15
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b09e      	sub	sp, #120	; 0x78
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e162      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b90      	ldr	r3, [pc, #576]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d910      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b8d      	ldr	r3, [pc, #564]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	498b      	ldr	r1, [pc, #556]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b89      	ldr	r3, [pc, #548]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e14a      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b82      	ldr	r3, [pc, #520]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	497f      	ldr	r1, [pc, #508]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80dc 	beq.w	80020d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d13c      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xf6>
 8001f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xa6>
 8001f48:	4b6f      	ldr	r3, [pc, #444]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	e00f      	b.n	8001f6e <HAL_RCC_ClockConfig+0xc6>
 8001f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f60:	663b      	str	r3, [r7, #96]	; 0x60
 8001f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f6a:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f72:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f76:	fa92 f2a2 	rbit	r2, r2
 8001f7a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f7e:	fab2 f282 	clz	r2, r2
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f042 0220 	orr.w	r2, r2, #32
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	f002 021f 	and.w	r2, r2, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f202 	lsl.w	r2, r1, r2
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d17b      	bne.n	8002092 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0f3      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d13c      	bne.n	8002020 <HAL_RCC_ClockConfig+0x178>
 8001fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001faa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x128>
 8001fca:	4b4f      	ldr	r3, [pc, #316]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e00f      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x148>
 8001fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8001fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8001fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fec:	4b46      	ldr	r3, [pc, #280]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ff8:	fa92 f2a2 	rbit	r2, r2
 8001ffc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002000:	fab2 f282 	clz	r2, r2
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	f042 0220 	orr.w	r2, r2, #32
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	f002 021f 	and.w	r2, r2, #31
 8002010:	2101      	movs	r1, #1
 8002012:	fa01 f202 	lsl.w	r2, r1, r2
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d13a      	bne.n	8002092 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0b2      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
 8002020:	2302      	movs	r3, #2
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d102      	bne.n	8002048 <HAL_RCC_ClockConfig+0x1a0>
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	e00d      	b.n	8002064 <HAL_RCC_ClockConfig+0x1bc>
 8002048:	2302      	movs	r3, #2
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	4b29      	ldr	r3, [pc, #164]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	2202      	movs	r2, #2
 8002066:	61ba      	str	r2, [r7, #24]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	fa92 f2a2 	rbit	r2, r2
 800206e:	617a      	str	r2, [r7, #20]
  return result;
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	fab2 f282 	clz	r2, r2
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f042 0220 	orr.w	r2, r2, #32
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	f002 021f 	and.w	r2, r2, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e079      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f023 0203 	bic.w	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	491a      	ldr	r1, [pc, #104]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a4:	f7fe fcb0 	bl	8000a08 <HAL_GetTick>
 80020a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ac:	f7fe fcac 	bl	8000a08 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e061      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 020c 	and.w	r2, r3, #12
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1eb      	bne.n	80020ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d214      	bcs.n	800210c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0207 	bic.w	r2, r3, #7
 80020ea:	4906      	ldr	r1, [pc, #24]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d005      	beq.n	800210c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e040      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
 8002104:	40022000 	.word	0x40022000
 8002108:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_RCC_ClockConfig+0x2e8>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	491a      	ldr	r1, [pc, #104]	; (8002190 <HAL_RCC_ClockConfig+0x2e8>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <HAL_RCC_ClockConfig+0x2e8>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4912      	ldr	r1, [pc, #72]	; (8002190 <HAL_RCC_ClockConfig+0x2e8>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800214a:	f000 f829 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800214e:	4601      	mov	r1, r0
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_RCC_ClockConfig+0x2e8>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002158:	22f0      	movs	r2, #240	; 0xf0
 800215a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	fa92 f2a2 	rbit	r2, r2
 8002162:	60fa      	str	r2, [r7, #12]
  return result;
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	fab2 f282 	clz	r2, r2
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	40d3      	lsrs	r3, r2
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x2ec>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	fa21 f303 	lsr.w	r3, r1, r3
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <HAL_RCC_ClockConfig+0x2f0>)
 8002178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_RCC_ClockConfig+0x2f4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fbfe 	bl	8000980 <HAL_InitTick>
  
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3778      	adds	r7, #120	; 0x78
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	08004548 	.word	0x08004548
 8002198:	20000000 	.word	0x20000000
 800219c:	20000004 	.word	0x20000004

080021a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b08b      	sub	sp, #44	; 0x2c
 80021a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021ba:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d002      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x30>
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x36>
 80021ce:	e03f      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021d2:	623b      	str	r3, [r7, #32]
      break;
 80021d4:	e03f      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	fa92 f2a2 	rbit	r2, r2
 80021e8:	607a      	str	r2, [r7, #4]
  return result;
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	fab2 f282 	clz	r2, r2
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	40d3      	lsrs	r3, r2
 80021f4:	4a1d      	ldr	r2, [pc, #116]	; (800226c <HAL_RCC_GetSysClockFreq+0xcc>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	220f      	movs	r2, #15
 8002204:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	fa92 f2a2 	rbit	r2, r2
 800220c:	60fa      	str	r2, [r7, #12]
  return result;
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	fab2 f282 	clz	r2, r2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	40d3      	lsrs	r3, r2
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <HAL_RCC_GetSysClockFreq+0xd0>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002228:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <HAL_RCC_GetSysClockFreq+0xc8>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
 8002238:	e007      	b.n	800224a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <HAL_RCC_GetSysClockFreq+0xc8>)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	623b      	str	r3, [r7, #32]
      break;
 800224e:	e002      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002252:	623b      	str	r3, [r7, #32]
      break;
 8002254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002256:	6a3b      	ldr	r3, [r7, #32]
}
 8002258:	4618      	mov	r0, r3
 800225a:	372c      	adds	r7, #44	; 0x2c
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40021000 	.word	0x40021000
 8002268:	007a1200 	.word	0x007a1200
 800226c:	08004560 	.word	0x08004560
 8002270:	08004570 	.word	0x08004570

08002274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_RCC_GetHCLKFreq+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000000 	.word	0x20000000

0800228c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002292:	f7ff ffef 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 8002296:	4601      	mov	r1, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	fa92 f2a2 	rbit	r2, r2
 80022ac:	603a      	str	r2, [r7, #0]
  return result;
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	fab2 f282 	clz	r2, r2
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	40d3      	lsrs	r3, r2
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08004558 	.word	0x08004558

080022d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022d6:	f7ff ffcd 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 80022da:	4601      	mov	r1, r0
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	fa92 f2a2 	rbit	r2, r2
 80022f0:	603a      	str	r2, [r7, #0]
  return result;
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	fab2 f282 	clz	r2, r2
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	40d3      	lsrs	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_RCC_GetPCLK2Freq+0x40>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	08004558 	.word	0x08004558

08002314 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b092      	sub	sp, #72	; 0x48
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80d7 	beq.w	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002338:	4b4e      	ldr	r3, [pc, #312]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10e      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	4a4a      	ldr	r2, [pc, #296]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234e:	61d3      	str	r3, [r2, #28]
 8002350:	4b48      	ldr	r3, [pc, #288]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235c:	2301      	movs	r3, #1
 800235e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b45      	ldr	r3, [pc, #276]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d118      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	4b42      	ldr	r3, [pc, #264]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a41      	ldr	r2, [pc, #260]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7fe fb45 	bl	8000a08 <HAL_GetTick>
 800237e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	e008      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7fe fb41 	bl	8000a08 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b64      	cmp	r3, #100	; 0x64
 800238e:	d901      	bls.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e1d6      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b38      	ldr	r3, [pc, #224]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8084 	beq.w	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023bc:	429a      	cmp	r2, r3
 80023be:	d07c      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023c0:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	461a      	mov	r2, r3
 80023ea:	2301      	movs	r3, #1
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	461a      	mov	r2, r3
 800240e:	2300      	movs	r3, #0
 8002410:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002412:	4a18      	ldr	r2, [pc, #96]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002416:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d04b      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7fe faf1 	bl	8000a08 <HAL_GetTick>
 8002426:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe faed 	bl	8000a08 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e180      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002440:	2302      	movs	r3, #2
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
 800244c:	2302      	movs	r3, #2
 800244e:	623b      	str	r3, [r7, #32]
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	61fb      	str	r3, [r7, #28]
  return result;
 8002458:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d108      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800246e:	4b01      	ldr	r3, [pc, #4]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	e00d      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
 800247c:	10908100 	.word	0x10908100
 8002480:	2302      	movs	r3, #2
 8002482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	4ba0      	ldr	r3, [pc, #640]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	2202      	movs	r2, #2
 8002492:	613a      	str	r2, [r7, #16]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	fa92 f2a2 	rbit	r2, r2
 800249a:	60fa      	str	r2, [r7, #12]
  return result;
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	fab2 f282 	clz	r2, r2
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f002 021f 	and.w	r2, r2, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0b7      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024ba:	4b95      	ldr	r3, [pc, #596]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4992      	ldr	r1, [pc, #584]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d4:	4b8e      	ldr	r3, [pc, #568]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	4a8d      	ldr	r2, [pc, #564]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ec:	4b88      	ldr	r3, [pc, #544]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	f023 0203 	bic.w	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4985      	ldr	r1, [pc, #532]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800250a:	4b81      	ldr	r3, [pc, #516]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	497e      	ldr	r1, [pc, #504]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002528:	4b79      	ldr	r3, [pc, #484]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	4976      	ldr	r1, [pc, #472]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002546:	4b72      	ldr	r3, [pc, #456]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f023 0210 	bic.w	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	496f      	ldr	r1, [pc, #444]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002554:	4313      	orrs	r3, r2
 8002556:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002564:	4b6a      	ldr	r3, [pc, #424]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002570:	4967      	ldr	r1, [pc, #412]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f023 0220 	bic.w	r2, r3, #32
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4960      	ldr	r1, [pc, #384]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002590:	4313      	orrs	r3, r2
 8002592:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025a0:	4b5b      	ldr	r3, [pc, #364]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	4958      	ldr	r1, [pc, #352]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025be:	4b54      	ldr	r3, [pc, #336]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	4951      	ldr	r1, [pc, #324]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025dc:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4949      	ldr	r1, [pc, #292]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025fa:	4b45      	ldr	r3, [pc, #276]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4942      	ldr	r1, [pc, #264]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002618:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	493a      	ldr	r1, [pc, #232]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002636:	4b36      	ldr	r3, [pc, #216]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	4933      	ldr	r1, [pc, #204]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002644:	4313      	orrs	r3, r2
 8002646:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002654:	4b2e      	ldr	r3, [pc, #184]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002660:	492b      	ldr	r1, [pc, #172]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002672:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4924      	ldr	r1, [pc, #144]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002680:	4313      	orrs	r3, r2
 8002682:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	491c      	ldr	r1, [pc, #112]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ba:	4915      	ldr	r1, [pc, #84]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026cc:	4b10      	ldr	r3, [pc, #64]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	490d      	ldr	r1, [pc, #52]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f6:	4906      	ldr	r1, [pc, #24]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00c      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002708:	4b01      	ldr	r3, [pc, #4]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	e002      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	490b      	ldr	r1, [pc, #44]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800271e:	4313      	orrs	r3, r2
 8002720:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273a:	4904      	ldr	r1, [pc, #16]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800273c:	4313      	orrs	r3, r2
 800273e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3748      	adds	r7, #72	; 0x48
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e040      	b.n	80027e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fd ffe8 	bl	8000748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fabc 	bl	8002d0c <UART_SetConfig>
 8002794:	4603      	mov	r3, r0
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e022      	b.n	80027e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fcca 	bl	8003140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fd51 	bl	8003284 <UART_CheckIdleState>
 80027e2:	4603      	mov	r3, r0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002800:	2b20      	cmp	r3, #32
 8002802:	f040 8081 	bne.w	8002908 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_UART_Transmit+0x26>
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e079      	b.n	800290a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_UART_Transmit+0x38>
 8002820:	2302      	movs	r3, #2
 8002822:	e072      	b.n	800290a <HAL_UART_Transmit+0x11e>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2221      	movs	r2, #33	; 0x21
 8002836:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002838:	f7fe f8e6 	bl	8000a08 <HAL_GetTick>
 800283c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	88fa      	ldrh	r2, [r7, #6]
 800284a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002856:	d108      	bne.n	800286a <HAL_UART_Transmit+0x7e>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e003      	b.n	8002872 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002872:	e02d      	b.n	80028d0 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2200      	movs	r2, #0
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fd45 	bl	800330e <UART_WaitOnFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e03d      	b.n	800290a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	881a      	ldrh	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a0:	b292      	uxth	r2, r2
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	3302      	adds	r3, #2
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	e008      	b.n	80028be <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	b292      	uxth	r2, r2
 80028b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	3301      	adds	r3, #1
 80028bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1cb      	bne.n	8002874 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2200      	movs	r2, #0
 80028e4:	2140      	movs	r1, #64	; 0x40
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fd11 	bl	800330e <UART_WaitOnFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e009      	b.n	800290a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3720      	adds	r7, #32
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	4613      	mov	r3, r2
 8002920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002926:	2b20      	cmp	r3, #32
 8002928:	f040 808a 	bne.w	8002a40 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_UART_Receive_IT+0x24>
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e082      	b.n	8002a42 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_UART_Receive_IT+0x36>
 8002946:	2302      	movs	r3, #2
 8002948:	e07b      	b.n	8002a42 <HAL_UART_Receive_IT+0x12e>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	88fa      	ldrh	r2, [r7, #6]
 800295c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	88fa      	ldrh	r2, [r7, #6]
 8002964:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002976:	d10e      	bne.n	8002996 <HAL_UART_Receive_IT+0x82>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d105      	bne.n	800298c <HAL_UART_Receive_IT+0x78>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002986:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800298a:	e02d      	b.n	80029e8 <HAL_UART_Receive_IT+0xd4>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	22ff      	movs	r2, #255	; 0xff
 8002990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002994:	e028      	b.n	80029e8 <HAL_UART_Receive_IT+0xd4>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10d      	bne.n	80029ba <HAL_UART_Receive_IT+0xa6>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d104      	bne.n	80029b0 <HAL_UART_Receive_IT+0x9c>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	22ff      	movs	r2, #255	; 0xff
 80029aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029ae:	e01b      	b.n	80029e8 <HAL_UART_Receive_IT+0xd4>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	227f      	movs	r2, #127	; 0x7f
 80029b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029b8:	e016      	b.n	80029e8 <HAL_UART_Receive_IT+0xd4>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029c2:	d10d      	bne.n	80029e0 <HAL_UART_Receive_IT+0xcc>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <HAL_UART_Receive_IT+0xc2>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	227f      	movs	r2, #127	; 0x7f
 80029d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029d4:	e008      	b.n	80029e8 <HAL_UART_Receive_IT+0xd4>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	223f      	movs	r2, #63	; 0x3f
 80029da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029de:	e003      	b.n	80029e8 <HAL_UART_Receive_IT+0xd4>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2222      	movs	r2, #34	; 0x22
 80029f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0c:	d107      	bne.n	8002a1e <HAL_UART_Receive_IT+0x10a>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <HAL_UART_Receive_IT+0x13c>)
 8002a1a:	661a      	str	r2, [r3, #96]	; 0x60
 8002a1c:	e002      	b.n	8002a24 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <HAL_UART_Receive_IT+0x140>)
 8002a22:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002a3a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	08003549 	.word	0x08003549
 8002a54:	080034a3 	.word	0x080034a3

08002a58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d113      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00e      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d009      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8114 	beq.w	8002cce <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
      }
      return;
 8002aae:	e10e      	b.n	8002cce <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80d6 	beq.w	8002c64 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d105      	bne.n	8002ace <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80cb 	beq.w	8002c64 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00e      	beq.n	8002af6 <HAL_UART_IRQHandler+0x9e>
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00e      	beq.n	8002b1e <HAL_UART_IRQHandler+0xc6>
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b16:	f043 0204 	orr.w	r2, r3, #4
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00e      	beq.n	8002b46 <HAL_UART_IRQHandler+0xee>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2204      	movs	r2, #4
 8002b38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d009      	beq.n	8002b78 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	f043 0208 	orr.w	r2, r3, #8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00f      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x14a>
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b9a:	f043 0220 	orr.w	r2, r3, #32
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8093 	beq.w	8002cd2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d004      	beq.n	8002bee <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d031      	beq.n	8002c52 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fc08 	bl	8003404 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d123      	bne.n	8002c4a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c10:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d013      	beq.n	8002c42 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1e:	4a30      	ldr	r2, [pc, #192]	; (8002ce0 <HAL_UART_IRQHandler+0x288>)
 8002c20:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe f82d 	bl	8000c86 <HAL_DMA_Abort_IT>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d016      	beq.n	8002c60 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c40:	e00e      	b.n	8002c60 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f858 	bl	8002cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	e00a      	b.n	8002c60 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f854 	bl	8002cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c50:	e006      	b.n	8002c60 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f850 	bl	8002cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002c5e:	e038      	b.n	8002cd2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	bf00      	nop
    return;
 8002c62:	e036      	b.n	8002cd2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00d      	beq.n	8002c8a <HAL_UART_IRQHandler+0x232>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fcb3 	bl	80035ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c88:	e026      	b.n	8002cd8 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00d      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d017      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
    }
    return;
 8002cae:	e012      	b.n	8002cd6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00e      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x280>
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fbd3 	bl	8003470 <UART_EndTransmit_IT>
    return;
 8002cca:	bf00      	nop
 8002ccc:	e004      	b.n	8002cd8 <HAL_UART_IRQHandler+0x280>
      return;
 8002cce:	bf00      	nop
 8002cd0:	e002      	b.n	8002cd8 <HAL_UART_IRQHandler+0x280>
    return;
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <HAL_UART_IRQHandler+0x280>
    return;
 8002cd6:	bf00      	nop
  }

}
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	08003445 	.word	0x08003445

08002ce4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4bac      	ldr	r3, [pc, #688]	; (8002fec <UART_SetConfig+0x2e0>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	6939      	ldr	r1, [r7, #16]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a9a      	ldr	r2, [pc, #616]	; (8002ff0 <UART_SetConfig+0x2e4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d121      	bne.n	8002dd0 <UART_SetConfig+0xc4>
 8002d8c:	4b99      	ldr	r3, [pc, #612]	; (8002ff4 <UART_SetConfig+0x2e8>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d817      	bhi.n	8002dc8 <UART_SetConfig+0xbc>
 8002d98:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <UART_SetConfig+0x94>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002db1 	.word	0x08002db1
 8002da4:	08002dbd 	.word	0x08002dbd
 8002da8:	08002dc3 	.word	0x08002dc3
 8002dac:	08002db7 	.word	0x08002db7
 8002db0:	2301      	movs	r3, #1
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	e0b2      	b.n	8002f1c <UART_SetConfig+0x210>
 8002db6:	2302      	movs	r3, #2
 8002db8:	77fb      	strb	r3, [r7, #31]
 8002dba:	e0af      	b.n	8002f1c <UART_SetConfig+0x210>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	77fb      	strb	r3, [r7, #31]
 8002dc0:	e0ac      	b.n	8002f1c <UART_SetConfig+0x210>
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	77fb      	strb	r3, [r7, #31]
 8002dc6:	e0a9      	b.n	8002f1c <UART_SetConfig+0x210>
 8002dc8:	2310      	movs	r3, #16
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	bf00      	nop
 8002dce:	e0a5      	b.n	8002f1c <UART_SetConfig+0x210>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a88      	ldr	r2, [pc, #544]	; (8002ff8 <UART_SetConfig+0x2ec>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d123      	bne.n	8002e22 <UART_SetConfig+0x116>
 8002dda:	4b86      	ldr	r3, [pc, #536]	; (8002ff4 <UART_SetConfig+0x2e8>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de6:	d012      	beq.n	8002e0e <UART_SetConfig+0x102>
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dec:	d802      	bhi.n	8002df4 <UART_SetConfig+0xe8>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <UART_SetConfig+0xf6>
 8002df2:	e012      	b.n	8002e1a <UART_SetConfig+0x10e>
 8002df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002df8:	d00c      	beq.n	8002e14 <UART_SetConfig+0x108>
 8002dfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dfe:	d003      	beq.n	8002e08 <UART_SetConfig+0xfc>
 8002e00:	e00b      	b.n	8002e1a <UART_SetConfig+0x10e>
 8002e02:	2300      	movs	r3, #0
 8002e04:	77fb      	strb	r3, [r7, #31]
 8002e06:	e089      	b.n	8002f1c <UART_SetConfig+0x210>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e086      	b.n	8002f1c <UART_SetConfig+0x210>
 8002e0e:	2304      	movs	r3, #4
 8002e10:	77fb      	strb	r3, [r7, #31]
 8002e12:	e083      	b.n	8002f1c <UART_SetConfig+0x210>
 8002e14:	2308      	movs	r3, #8
 8002e16:	77fb      	strb	r3, [r7, #31]
 8002e18:	e080      	b.n	8002f1c <UART_SetConfig+0x210>
 8002e1a:	2310      	movs	r3, #16
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	bf00      	nop
 8002e20:	e07c      	b.n	8002f1c <UART_SetConfig+0x210>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a75      	ldr	r2, [pc, #468]	; (8002ffc <UART_SetConfig+0x2f0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d123      	bne.n	8002e74 <UART_SetConfig+0x168>
 8002e2c:	4b71      	ldr	r3, [pc, #452]	; (8002ff4 <UART_SetConfig+0x2e8>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002e34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e38:	d012      	beq.n	8002e60 <UART_SetConfig+0x154>
 8002e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e3e:	d802      	bhi.n	8002e46 <UART_SetConfig+0x13a>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <UART_SetConfig+0x148>
 8002e44:	e012      	b.n	8002e6c <UART_SetConfig+0x160>
 8002e46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e4a:	d00c      	beq.n	8002e66 <UART_SetConfig+0x15a>
 8002e4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e50:	d003      	beq.n	8002e5a <UART_SetConfig+0x14e>
 8002e52:	e00b      	b.n	8002e6c <UART_SetConfig+0x160>
 8002e54:	2300      	movs	r3, #0
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e060      	b.n	8002f1c <UART_SetConfig+0x210>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e05d      	b.n	8002f1c <UART_SetConfig+0x210>
 8002e60:	2304      	movs	r3, #4
 8002e62:	77fb      	strb	r3, [r7, #31]
 8002e64:	e05a      	b.n	8002f1c <UART_SetConfig+0x210>
 8002e66:	2308      	movs	r3, #8
 8002e68:	77fb      	strb	r3, [r7, #31]
 8002e6a:	e057      	b.n	8002f1c <UART_SetConfig+0x210>
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	bf00      	nop
 8002e72:	e053      	b.n	8002f1c <UART_SetConfig+0x210>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a61      	ldr	r2, [pc, #388]	; (8003000 <UART_SetConfig+0x2f4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d123      	bne.n	8002ec6 <UART_SetConfig+0x1ba>
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <UART_SetConfig+0x2e8>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e8a:	d012      	beq.n	8002eb2 <UART_SetConfig+0x1a6>
 8002e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e90:	d802      	bhi.n	8002e98 <UART_SetConfig+0x18c>
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <UART_SetConfig+0x19a>
 8002e96:	e012      	b.n	8002ebe <UART_SetConfig+0x1b2>
 8002e98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e9c:	d00c      	beq.n	8002eb8 <UART_SetConfig+0x1ac>
 8002e9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ea2:	d003      	beq.n	8002eac <UART_SetConfig+0x1a0>
 8002ea4:	e00b      	b.n	8002ebe <UART_SetConfig+0x1b2>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	77fb      	strb	r3, [r7, #31]
 8002eaa:	e037      	b.n	8002f1c <UART_SetConfig+0x210>
 8002eac:	2302      	movs	r3, #2
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e034      	b.n	8002f1c <UART_SetConfig+0x210>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e031      	b.n	8002f1c <UART_SetConfig+0x210>
 8002eb8:	2308      	movs	r3, #8
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e02e      	b.n	8002f1c <UART_SetConfig+0x210>
 8002ebe:	2310      	movs	r3, #16
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	bf00      	nop
 8002ec4:	e02a      	b.n	8002f1c <UART_SetConfig+0x210>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a4e      	ldr	r2, [pc, #312]	; (8003004 <UART_SetConfig+0x2f8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d123      	bne.n	8002f18 <UART_SetConfig+0x20c>
 8002ed0:	4b48      	ldr	r3, [pc, #288]	; (8002ff4 <UART_SetConfig+0x2e8>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002edc:	d012      	beq.n	8002f04 <UART_SetConfig+0x1f8>
 8002ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ee2:	d802      	bhi.n	8002eea <UART_SetConfig+0x1de>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <UART_SetConfig+0x1ec>
 8002ee8:	e012      	b.n	8002f10 <UART_SetConfig+0x204>
 8002eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eee:	d00c      	beq.n	8002f0a <UART_SetConfig+0x1fe>
 8002ef0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ef4:	d003      	beq.n	8002efe <UART_SetConfig+0x1f2>
 8002ef6:	e00b      	b.n	8002f10 <UART_SetConfig+0x204>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	77fb      	strb	r3, [r7, #31]
 8002efc:	e00e      	b.n	8002f1c <UART_SetConfig+0x210>
 8002efe:	2302      	movs	r3, #2
 8002f00:	77fb      	strb	r3, [r7, #31]
 8002f02:	e00b      	b.n	8002f1c <UART_SetConfig+0x210>
 8002f04:	2304      	movs	r3, #4
 8002f06:	77fb      	strb	r3, [r7, #31]
 8002f08:	e008      	b.n	8002f1c <UART_SetConfig+0x210>
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	77fb      	strb	r3, [r7, #31]
 8002f0e:	e005      	b.n	8002f1c <UART_SetConfig+0x210>
 8002f10:	2310      	movs	r3, #16
 8002f12:	77fb      	strb	r3, [r7, #31]
 8002f14:	bf00      	nop
 8002f16:	e001      	b.n	8002f1c <UART_SetConfig+0x210>
 8002f18:	2310      	movs	r3, #16
 8002f1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f24:	f040 8090 	bne.w	8003048 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8002f28:	7ffb      	ldrb	r3, [r7, #31]
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d86c      	bhi.n	8003008 <UART_SetConfig+0x2fc>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <UART_SetConfig+0x228>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f59 	.word	0x08002f59
 8002f38:	08002f79 	.word	0x08002f79
 8002f3c:	08002f99 	.word	0x08002f99
 8002f40:	08003009 	.word	0x08003009
 8002f44:	08002fb5 	.word	0x08002fb5
 8002f48:	08003009 	.word	0x08003009
 8002f4c:	08003009 	.word	0x08003009
 8002f50:	08003009 	.word	0x08003009
 8002f54:	08002fd5 	.word	0x08002fd5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f58:	f7ff f998 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8002f5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	005a      	lsls	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	441a      	add	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	61bb      	str	r3, [r7, #24]
        break;
 8002f76:	e04a      	b.n	800300e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f78:	f7ff f9aa 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 8002f7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	005a      	lsls	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	441a      	add	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	61bb      	str	r3, [r7, #24]
        break;
 8002f96:	e03a      	b.n	800300e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002fa2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6852      	ldr	r2, [r2, #4]
 8002faa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	61bb      	str	r3, [r7, #24]
        break;
 8002fb2:	e02c      	b.n	800300e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb4:	f7ff f8f4 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 8002fb8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	005a      	lsls	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	441a      	add	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	61bb      	str	r3, [r7, #24]
        break;
 8002fd2:	e01c      	b.n	800300e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	61bb      	str	r3, [r7, #24]
        break;
 8002fea:	e010      	b.n	800300e <UART_SetConfig+0x302>
 8002fec:	efff69f3 	.word	0xefff69f3
 8002ff0:	40013800 	.word	0x40013800
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40004400 	.word	0x40004400
 8002ffc:	40004800 	.word	0x40004800
 8003000:	40004c00 	.word	0x40004c00
 8003004:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	75fb      	strb	r3, [r7, #23]
        break;
 800300c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b0f      	cmp	r3, #15
 8003012:	d916      	bls.n	8003042 <UART_SetConfig+0x336>
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301a:	d212      	bcs.n	8003042 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	b29b      	uxth	r3, r3
 8003020:	f023 030f 	bic.w	r3, r3, #15
 8003024:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	b29b      	uxth	r3, r3
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	b29a      	uxth	r2, r3
 8003032:	897b      	ldrh	r3, [r7, #10]
 8003034:	4313      	orrs	r3, r2
 8003036:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	897a      	ldrh	r2, [r7, #10]
 800303e:	60da      	str	r2, [r3, #12]
 8003040:	e072      	b.n	8003128 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
 8003046:	e06f      	b.n	8003128 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003048:	7ffb      	ldrb	r3, [r7, #31]
 800304a:	2b08      	cmp	r3, #8
 800304c:	d85b      	bhi.n	8003106 <UART_SetConfig+0x3fa>
 800304e:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <UART_SetConfig+0x348>)
 8003050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003054:	08003079 	.word	0x08003079
 8003058:	08003097 	.word	0x08003097
 800305c:	080030b5 	.word	0x080030b5
 8003060:	08003107 	.word	0x08003107
 8003064:	080030d1 	.word	0x080030d1
 8003068:	08003107 	.word	0x08003107
 800306c:	08003107 	.word	0x08003107
 8003070:	08003107 	.word	0x08003107
 8003074:	080030ef 	.word	0x080030ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003078:	f7ff f908 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 800307c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	085a      	lsrs	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	441a      	add	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	b29b      	uxth	r3, r3
 8003092:	61bb      	str	r3, [r7, #24]
        break;
 8003094:	e03a      	b.n	800310c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003096:	f7ff f91b 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 800309a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	085a      	lsrs	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	441a      	add	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	61bb      	str	r3, [r7, #24]
        break;
 80030b2:	e02b      	b.n	800310c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80030be:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6852      	ldr	r2, [r2, #4]
 80030c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	61bb      	str	r3, [r7, #24]
        break;
 80030ce:	e01d      	b.n	800310c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030d0:	f7ff f866 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 80030d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	085a      	lsrs	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	441a      	add	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	61bb      	str	r3, [r7, #24]
        break;
 80030ec:	e00e      	b.n	800310c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	085b      	lsrs	r3, r3, #1
 80030f4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	b29b      	uxth	r3, r3
 8003102:	61bb      	str	r3, [r7, #24]
        break;
 8003104:	e002      	b.n	800310c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
        break;
 800310a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b0f      	cmp	r3, #15
 8003110:	d908      	bls.n	8003124 <UART_SetConfig+0x418>
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003118:	d204      	bcs.n	8003124 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	e001      	b.n	8003128 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003134:	7dfb      	ldrb	r3, [r7, #23]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop

08003140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01a      	beq.n	8003256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800323e:	d10a      	bne.n	8003256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	605a      	str	r2, [r3, #4]
  }
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af02      	add	r7, sp, #8
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003292:	f7fd fbb9 	bl	8000a08 <HAL_GetTick>
 8003296:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d10e      	bne.n	80032c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f82a 	bl	800330e <UART_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e020      	b.n	8003306 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d10e      	bne.n	80032f0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f814 	bl	800330e <UART_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e00a      	b.n	8003306 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4613      	mov	r3, r2
 800331c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331e:	e05d      	b.n	80033dc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003326:	d059      	beq.n	80033dc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003328:	f7fd fb6e 	bl	8000a08 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <UART_WaitOnFlagUntilTimeout+0x30>
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11b      	bne.n	8003376 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800334c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2220      	movs	r2, #32
 8003368:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e042      	b.n	80033fc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02b      	beq.n	80033dc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800338e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003392:	d123      	bne.n	80033dc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800339c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e00f      	b.n	80033fc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d092      	beq.n	8003320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800341a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff fc48 	bl	8002cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003486:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fc25 	bl	8002ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80034b0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b6:	2b22      	cmp	r3, #34	; 0x22
 80034b8:	d13a      	bne.n	8003530 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80034c0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80034c2:	89bb      	ldrh	r3, [r7, #12]
 80034c4:	b2d9      	uxtb	r1, r3
 80034c6:	89fb      	ldrh	r3, [r7, #14]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	400a      	ands	r2, r1
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d121      	bne.n	8003540 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800350a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd f97d 	bl	8000828 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800352e:	e007      	b.n	8003540 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0208 	orr.w	r2, r2, #8
 800353e:	619a      	str	r2, [r3, #24]
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003556:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800355c:	2b22      	cmp	r3, #34	; 0x22
 800355e:	d13a      	bne.n	80035d6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003566:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800356e:	89ba      	ldrh	r2, [r7, #12]
 8003570:	89fb      	ldrh	r3, [r7, #14]
 8003572:	4013      	ands	r3, r2
 8003574:	b29a      	uxth	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	1c9a      	adds	r2, r3, #2
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d121      	bne.n	80035e6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035b0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd f92a 	bl	8000828 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035d4:	e007      	b.n	80035e6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699a      	ldr	r2, [r3, #24]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0208 	orr.w	r2, r2, #8
 80035e4:	619a      	str	r2, [r3, #24]
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <__errno>:
 8003604:	4b01      	ldr	r3, [pc, #4]	; (800360c <__errno+0x8>)
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	2000000c 	.word	0x2000000c

08003610 <__libc_init_array>:
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	4e0d      	ldr	r6, [pc, #52]	; (8003648 <__libc_init_array+0x38>)
 8003614:	4c0d      	ldr	r4, [pc, #52]	; (800364c <__libc_init_array+0x3c>)
 8003616:	1ba4      	subs	r4, r4, r6
 8003618:	10a4      	asrs	r4, r4, #2
 800361a:	2500      	movs	r5, #0
 800361c:	42a5      	cmp	r5, r4
 800361e:	d109      	bne.n	8003634 <__libc_init_array+0x24>
 8003620:	4e0b      	ldr	r6, [pc, #44]	; (8003650 <__libc_init_array+0x40>)
 8003622:	4c0c      	ldr	r4, [pc, #48]	; (8003654 <__libc_init_array+0x44>)
 8003624:	f000 ff68 	bl	80044f8 <_init>
 8003628:	1ba4      	subs	r4, r4, r6
 800362a:	10a4      	asrs	r4, r4, #2
 800362c:	2500      	movs	r5, #0
 800362e:	42a5      	cmp	r5, r4
 8003630:	d105      	bne.n	800363e <__libc_init_array+0x2e>
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003638:	4798      	blx	r3
 800363a:	3501      	adds	r5, #1
 800363c:	e7ee      	b.n	800361c <__libc_init_array+0xc>
 800363e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003642:	4798      	blx	r3
 8003644:	3501      	adds	r5, #1
 8003646:	e7f2      	b.n	800362e <__libc_init_array+0x1e>
 8003648:	08004618 	.word	0x08004618
 800364c:	08004618 	.word	0x08004618
 8003650:	08004618 	.word	0x08004618
 8003654:	0800461c 	.word	0x0800461c

08003658 <memset>:
 8003658:	4402      	add	r2, r0
 800365a:	4603      	mov	r3, r0
 800365c:	4293      	cmp	r3, r2
 800365e:	d100      	bne.n	8003662 <memset+0xa>
 8003660:	4770      	bx	lr
 8003662:	f803 1b01 	strb.w	r1, [r3], #1
 8003666:	e7f9      	b.n	800365c <memset+0x4>

08003668 <iprintf>:
 8003668:	b40f      	push	{r0, r1, r2, r3}
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <iprintf+0x2c>)
 800366c:	b513      	push	{r0, r1, r4, lr}
 800366e:	681c      	ldr	r4, [r3, #0]
 8003670:	b124      	cbz	r4, 800367c <iprintf+0x14>
 8003672:	69a3      	ldr	r3, [r4, #24]
 8003674:	b913      	cbnz	r3, 800367c <iprintf+0x14>
 8003676:	4620      	mov	r0, r4
 8003678:	f000 fa22 	bl	8003ac0 <__sinit>
 800367c:	ab05      	add	r3, sp, #20
 800367e:	9a04      	ldr	r2, [sp, #16]
 8003680:	68a1      	ldr	r1, [r4, #8]
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	4620      	mov	r0, r4
 8003686:	f000 fbdb 	bl	8003e40 <_vfiprintf_r>
 800368a:	b002      	add	sp, #8
 800368c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003690:	b004      	add	sp, #16
 8003692:	4770      	bx	lr
 8003694:	2000000c 	.word	0x2000000c

08003698 <_puts_r>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	460e      	mov	r6, r1
 800369c:	4605      	mov	r5, r0
 800369e:	b118      	cbz	r0, 80036a8 <_puts_r+0x10>
 80036a0:	6983      	ldr	r3, [r0, #24]
 80036a2:	b90b      	cbnz	r3, 80036a8 <_puts_r+0x10>
 80036a4:	f000 fa0c 	bl	8003ac0 <__sinit>
 80036a8:	69ab      	ldr	r3, [r5, #24]
 80036aa:	68ac      	ldr	r4, [r5, #8]
 80036ac:	b913      	cbnz	r3, 80036b4 <_puts_r+0x1c>
 80036ae:	4628      	mov	r0, r5
 80036b0:	f000 fa06 	bl	8003ac0 <__sinit>
 80036b4:	4b23      	ldr	r3, [pc, #140]	; (8003744 <_puts_r+0xac>)
 80036b6:	429c      	cmp	r4, r3
 80036b8:	d117      	bne.n	80036ea <_puts_r+0x52>
 80036ba:	686c      	ldr	r4, [r5, #4]
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	071b      	lsls	r3, r3, #28
 80036c0:	d51d      	bpl.n	80036fe <_puts_r+0x66>
 80036c2:	6923      	ldr	r3, [r4, #16]
 80036c4:	b1db      	cbz	r3, 80036fe <_puts_r+0x66>
 80036c6:	3e01      	subs	r6, #1
 80036c8:	68a3      	ldr	r3, [r4, #8]
 80036ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036ce:	3b01      	subs	r3, #1
 80036d0:	60a3      	str	r3, [r4, #8]
 80036d2:	b9e9      	cbnz	r1, 8003710 <_puts_r+0x78>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	da2e      	bge.n	8003736 <_puts_r+0x9e>
 80036d8:	4622      	mov	r2, r4
 80036da:	210a      	movs	r1, #10
 80036dc:	4628      	mov	r0, r5
 80036de:	f000 f83f 	bl	8003760 <__swbuf_r>
 80036e2:	3001      	adds	r0, #1
 80036e4:	d011      	beq.n	800370a <_puts_r+0x72>
 80036e6:	200a      	movs	r0, #10
 80036e8:	e011      	b.n	800370e <_puts_r+0x76>
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <_puts_r+0xb0>)
 80036ec:	429c      	cmp	r4, r3
 80036ee:	d101      	bne.n	80036f4 <_puts_r+0x5c>
 80036f0:	68ac      	ldr	r4, [r5, #8]
 80036f2:	e7e3      	b.n	80036bc <_puts_r+0x24>
 80036f4:	4b15      	ldr	r3, [pc, #84]	; (800374c <_puts_r+0xb4>)
 80036f6:	429c      	cmp	r4, r3
 80036f8:	bf08      	it	eq
 80036fa:	68ec      	ldreq	r4, [r5, #12]
 80036fc:	e7de      	b.n	80036bc <_puts_r+0x24>
 80036fe:	4621      	mov	r1, r4
 8003700:	4628      	mov	r0, r5
 8003702:	f000 f87f 	bl	8003804 <__swsetup_r>
 8003706:	2800      	cmp	r0, #0
 8003708:	d0dd      	beq.n	80036c6 <_puts_r+0x2e>
 800370a:	f04f 30ff 	mov.w	r0, #4294967295
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	2b00      	cmp	r3, #0
 8003712:	da04      	bge.n	800371e <_puts_r+0x86>
 8003714:	69a2      	ldr	r2, [r4, #24]
 8003716:	429a      	cmp	r2, r3
 8003718:	dc06      	bgt.n	8003728 <_puts_r+0x90>
 800371a:	290a      	cmp	r1, #10
 800371c:	d004      	beq.n	8003728 <_puts_r+0x90>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	6022      	str	r2, [r4, #0]
 8003724:	7019      	strb	r1, [r3, #0]
 8003726:	e7cf      	b.n	80036c8 <_puts_r+0x30>
 8003728:	4622      	mov	r2, r4
 800372a:	4628      	mov	r0, r5
 800372c:	f000 f818 	bl	8003760 <__swbuf_r>
 8003730:	3001      	adds	r0, #1
 8003732:	d1c9      	bne.n	80036c8 <_puts_r+0x30>
 8003734:	e7e9      	b.n	800370a <_puts_r+0x72>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	200a      	movs	r0, #10
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	6022      	str	r2, [r4, #0]
 800373e:	7018      	strb	r0, [r3, #0]
 8003740:	e7e5      	b.n	800370e <_puts_r+0x76>
 8003742:	bf00      	nop
 8003744:	080045a4 	.word	0x080045a4
 8003748:	080045c4 	.word	0x080045c4
 800374c:	08004584 	.word	0x08004584

08003750 <puts>:
 8003750:	4b02      	ldr	r3, [pc, #8]	; (800375c <puts+0xc>)
 8003752:	4601      	mov	r1, r0
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	f7ff bf9f 	b.w	8003698 <_puts_r>
 800375a:	bf00      	nop
 800375c:	2000000c 	.word	0x2000000c

08003760 <__swbuf_r>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	460e      	mov	r6, r1
 8003764:	4614      	mov	r4, r2
 8003766:	4605      	mov	r5, r0
 8003768:	b118      	cbz	r0, 8003772 <__swbuf_r+0x12>
 800376a:	6983      	ldr	r3, [r0, #24]
 800376c:	b90b      	cbnz	r3, 8003772 <__swbuf_r+0x12>
 800376e:	f000 f9a7 	bl	8003ac0 <__sinit>
 8003772:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <__swbuf_r+0x98>)
 8003774:	429c      	cmp	r4, r3
 8003776:	d12a      	bne.n	80037ce <__swbuf_r+0x6e>
 8003778:	686c      	ldr	r4, [r5, #4]
 800377a:	69a3      	ldr	r3, [r4, #24]
 800377c:	60a3      	str	r3, [r4, #8]
 800377e:	89a3      	ldrh	r3, [r4, #12]
 8003780:	071a      	lsls	r2, r3, #28
 8003782:	d52e      	bpl.n	80037e2 <__swbuf_r+0x82>
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	b363      	cbz	r3, 80037e2 <__swbuf_r+0x82>
 8003788:	6923      	ldr	r3, [r4, #16]
 800378a:	6820      	ldr	r0, [r4, #0]
 800378c:	1ac0      	subs	r0, r0, r3
 800378e:	6963      	ldr	r3, [r4, #20]
 8003790:	b2f6      	uxtb	r6, r6
 8003792:	4283      	cmp	r3, r0
 8003794:	4637      	mov	r7, r6
 8003796:	dc04      	bgt.n	80037a2 <__swbuf_r+0x42>
 8003798:	4621      	mov	r1, r4
 800379a:	4628      	mov	r0, r5
 800379c:	f000 f926 	bl	80039ec <_fflush_r>
 80037a0:	bb28      	cbnz	r0, 80037ee <__swbuf_r+0x8e>
 80037a2:	68a3      	ldr	r3, [r4, #8]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	60a3      	str	r3, [r4, #8]
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	6022      	str	r2, [r4, #0]
 80037ae:	701e      	strb	r6, [r3, #0]
 80037b0:	6963      	ldr	r3, [r4, #20]
 80037b2:	3001      	adds	r0, #1
 80037b4:	4283      	cmp	r3, r0
 80037b6:	d004      	beq.n	80037c2 <__swbuf_r+0x62>
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	07db      	lsls	r3, r3, #31
 80037bc:	d519      	bpl.n	80037f2 <__swbuf_r+0x92>
 80037be:	2e0a      	cmp	r6, #10
 80037c0:	d117      	bne.n	80037f2 <__swbuf_r+0x92>
 80037c2:	4621      	mov	r1, r4
 80037c4:	4628      	mov	r0, r5
 80037c6:	f000 f911 	bl	80039ec <_fflush_r>
 80037ca:	b190      	cbz	r0, 80037f2 <__swbuf_r+0x92>
 80037cc:	e00f      	b.n	80037ee <__swbuf_r+0x8e>
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <__swbuf_r+0x9c>)
 80037d0:	429c      	cmp	r4, r3
 80037d2:	d101      	bne.n	80037d8 <__swbuf_r+0x78>
 80037d4:	68ac      	ldr	r4, [r5, #8]
 80037d6:	e7d0      	b.n	800377a <__swbuf_r+0x1a>
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <__swbuf_r+0xa0>)
 80037da:	429c      	cmp	r4, r3
 80037dc:	bf08      	it	eq
 80037de:	68ec      	ldreq	r4, [r5, #12]
 80037e0:	e7cb      	b.n	800377a <__swbuf_r+0x1a>
 80037e2:	4621      	mov	r1, r4
 80037e4:	4628      	mov	r0, r5
 80037e6:	f000 f80d 	bl	8003804 <__swsetup_r>
 80037ea:	2800      	cmp	r0, #0
 80037ec:	d0cc      	beq.n	8003788 <__swbuf_r+0x28>
 80037ee:	f04f 37ff 	mov.w	r7, #4294967295
 80037f2:	4638      	mov	r0, r7
 80037f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037f6:	bf00      	nop
 80037f8:	080045a4 	.word	0x080045a4
 80037fc:	080045c4 	.word	0x080045c4
 8003800:	08004584 	.word	0x08004584

08003804 <__swsetup_r>:
 8003804:	4b32      	ldr	r3, [pc, #200]	; (80038d0 <__swsetup_r+0xcc>)
 8003806:	b570      	push	{r4, r5, r6, lr}
 8003808:	681d      	ldr	r5, [r3, #0]
 800380a:	4606      	mov	r6, r0
 800380c:	460c      	mov	r4, r1
 800380e:	b125      	cbz	r5, 800381a <__swsetup_r+0x16>
 8003810:	69ab      	ldr	r3, [r5, #24]
 8003812:	b913      	cbnz	r3, 800381a <__swsetup_r+0x16>
 8003814:	4628      	mov	r0, r5
 8003816:	f000 f953 	bl	8003ac0 <__sinit>
 800381a:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <__swsetup_r+0xd0>)
 800381c:	429c      	cmp	r4, r3
 800381e:	d10f      	bne.n	8003840 <__swsetup_r+0x3c>
 8003820:	686c      	ldr	r4, [r5, #4]
 8003822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003826:	b29a      	uxth	r2, r3
 8003828:	0715      	lsls	r5, r2, #28
 800382a:	d42c      	bmi.n	8003886 <__swsetup_r+0x82>
 800382c:	06d0      	lsls	r0, r2, #27
 800382e:	d411      	bmi.n	8003854 <__swsetup_r+0x50>
 8003830:	2209      	movs	r2, #9
 8003832:	6032      	str	r2, [r6, #0]
 8003834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003838:	81a3      	strh	r3, [r4, #12]
 800383a:	f04f 30ff 	mov.w	r0, #4294967295
 800383e:	e03e      	b.n	80038be <__swsetup_r+0xba>
 8003840:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <__swsetup_r+0xd4>)
 8003842:	429c      	cmp	r4, r3
 8003844:	d101      	bne.n	800384a <__swsetup_r+0x46>
 8003846:	68ac      	ldr	r4, [r5, #8]
 8003848:	e7eb      	b.n	8003822 <__swsetup_r+0x1e>
 800384a:	4b24      	ldr	r3, [pc, #144]	; (80038dc <__swsetup_r+0xd8>)
 800384c:	429c      	cmp	r4, r3
 800384e:	bf08      	it	eq
 8003850:	68ec      	ldreq	r4, [r5, #12]
 8003852:	e7e6      	b.n	8003822 <__swsetup_r+0x1e>
 8003854:	0751      	lsls	r1, r2, #29
 8003856:	d512      	bpl.n	800387e <__swsetup_r+0x7a>
 8003858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800385a:	b141      	cbz	r1, 800386e <__swsetup_r+0x6a>
 800385c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003860:	4299      	cmp	r1, r3
 8003862:	d002      	beq.n	800386a <__swsetup_r+0x66>
 8003864:	4630      	mov	r0, r6
 8003866:	f000 fa19 	bl	8003c9c <_free_r>
 800386a:	2300      	movs	r3, #0
 800386c:	6363      	str	r3, [r4, #52]	; 0x34
 800386e:	89a3      	ldrh	r3, [r4, #12]
 8003870:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	2300      	movs	r3, #0
 8003878:	6063      	str	r3, [r4, #4]
 800387a:	6923      	ldr	r3, [r4, #16]
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	89a3      	ldrh	r3, [r4, #12]
 8003880:	f043 0308 	orr.w	r3, r3, #8
 8003884:	81a3      	strh	r3, [r4, #12]
 8003886:	6923      	ldr	r3, [r4, #16]
 8003888:	b94b      	cbnz	r3, 800389e <__swsetup_r+0x9a>
 800388a:	89a3      	ldrh	r3, [r4, #12]
 800388c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003894:	d003      	beq.n	800389e <__swsetup_r+0x9a>
 8003896:	4621      	mov	r1, r4
 8003898:	4630      	mov	r0, r6
 800389a:	f000 f9bf 	bl	8003c1c <__smakebuf_r>
 800389e:	89a2      	ldrh	r2, [r4, #12]
 80038a0:	f012 0301 	ands.w	r3, r2, #1
 80038a4:	d00c      	beq.n	80038c0 <__swsetup_r+0xbc>
 80038a6:	2300      	movs	r3, #0
 80038a8:	60a3      	str	r3, [r4, #8]
 80038aa:	6963      	ldr	r3, [r4, #20]
 80038ac:	425b      	negs	r3, r3
 80038ae:	61a3      	str	r3, [r4, #24]
 80038b0:	6923      	ldr	r3, [r4, #16]
 80038b2:	b953      	cbnz	r3, 80038ca <__swsetup_r+0xc6>
 80038b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80038bc:	d1ba      	bne.n	8003834 <__swsetup_r+0x30>
 80038be:	bd70      	pop	{r4, r5, r6, pc}
 80038c0:	0792      	lsls	r2, r2, #30
 80038c2:	bf58      	it	pl
 80038c4:	6963      	ldrpl	r3, [r4, #20]
 80038c6:	60a3      	str	r3, [r4, #8]
 80038c8:	e7f2      	b.n	80038b0 <__swsetup_r+0xac>
 80038ca:	2000      	movs	r0, #0
 80038cc:	e7f7      	b.n	80038be <__swsetup_r+0xba>
 80038ce:	bf00      	nop
 80038d0:	2000000c 	.word	0x2000000c
 80038d4:	080045a4 	.word	0x080045a4
 80038d8:	080045c4 	.word	0x080045c4
 80038dc:	08004584 	.word	0x08004584

080038e0 <__sflush_r>:
 80038e0:	898a      	ldrh	r2, [r1, #12]
 80038e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e6:	4605      	mov	r5, r0
 80038e8:	0710      	lsls	r0, r2, #28
 80038ea:	460c      	mov	r4, r1
 80038ec:	d458      	bmi.n	80039a0 <__sflush_r+0xc0>
 80038ee:	684b      	ldr	r3, [r1, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	dc05      	bgt.n	8003900 <__sflush_r+0x20>
 80038f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	dc02      	bgt.n	8003900 <__sflush_r+0x20>
 80038fa:	2000      	movs	r0, #0
 80038fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003902:	2e00      	cmp	r6, #0
 8003904:	d0f9      	beq.n	80038fa <__sflush_r+0x1a>
 8003906:	2300      	movs	r3, #0
 8003908:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800390c:	682f      	ldr	r7, [r5, #0]
 800390e:	6a21      	ldr	r1, [r4, #32]
 8003910:	602b      	str	r3, [r5, #0]
 8003912:	d032      	beq.n	800397a <__sflush_r+0x9a>
 8003914:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003916:	89a3      	ldrh	r3, [r4, #12]
 8003918:	075a      	lsls	r2, r3, #29
 800391a:	d505      	bpl.n	8003928 <__sflush_r+0x48>
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	1ac0      	subs	r0, r0, r3
 8003920:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003922:	b10b      	cbz	r3, 8003928 <__sflush_r+0x48>
 8003924:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003926:	1ac0      	subs	r0, r0, r3
 8003928:	2300      	movs	r3, #0
 800392a:	4602      	mov	r2, r0
 800392c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800392e:	6a21      	ldr	r1, [r4, #32]
 8003930:	4628      	mov	r0, r5
 8003932:	47b0      	blx	r6
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	d106      	bne.n	8003948 <__sflush_r+0x68>
 800393a:	6829      	ldr	r1, [r5, #0]
 800393c:	291d      	cmp	r1, #29
 800393e:	d848      	bhi.n	80039d2 <__sflush_r+0xf2>
 8003940:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <__sflush_r+0x108>)
 8003942:	40ca      	lsrs	r2, r1
 8003944:	07d6      	lsls	r6, r2, #31
 8003946:	d544      	bpl.n	80039d2 <__sflush_r+0xf2>
 8003948:	2200      	movs	r2, #0
 800394a:	6062      	str	r2, [r4, #4]
 800394c:	04d9      	lsls	r1, r3, #19
 800394e:	6922      	ldr	r2, [r4, #16]
 8003950:	6022      	str	r2, [r4, #0]
 8003952:	d504      	bpl.n	800395e <__sflush_r+0x7e>
 8003954:	1c42      	adds	r2, r0, #1
 8003956:	d101      	bne.n	800395c <__sflush_r+0x7c>
 8003958:	682b      	ldr	r3, [r5, #0]
 800395a:	b903      	cbnz	r3, 800395e <__sflush_r+0x7e>
 800395c:	6560      	str	r0, [r4, #84]	; 0x54
 800395e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003960:	602f      	str	r7, [r5, #0]
 8003962:	2900      	cmp	r1, #0
 8003964:	d0c9      	beq.n	80038fa <__sflush_r+0x1a>
 8003966:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800396a:	4299      	cmp	r1, r3
 800396c:	d002      	beq.n	8003974 <__sflush_r+0x94>
 800396e:	4628      	mov	r0, r5
 8003970:	f000 f994 	bl	8003c9c <_free_r>
 8003974:	2000      	movs	r0, #0
 8003976:	6360      	str	r0, [r4, #52]	; 0x34
 8003978:	e7c0      	b.n	80038fc <__sflush_r+0x1c>
 800397a:	2301      	movs	r3, #1
 800397c:	4628      	mov	r0, r5
 800397e:	47b0      	blx	r6
 8003980:	1c41      	adds	r1, r0, #1
 8003982:	d1c8      	bne.n	8003916 <__sflush_r+0x36>
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0c5      	beq.n	8003916 <__sflush_r+0x36>
 800398a:	2b1d      	cmp	r3, #29
 800398c:	d001      	beq.n	8003992 <__sflush_r+0xb2>
 800398e:	2b16      	cmp	r3, #22
 8003990:	d101      	bne.n	8003996 <__sflush_r+0xb6>
 8003992:	602f      	str	r7, [r5, #0]
 8003994:	e7b1      	b.n	80038fa <__sflush_r+0x1a>
 8003996:	89a3      	ldrh	r3, [r4, #12]
 8003998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800399c:	81a3      	strh	r3, [r4, #12]
 800399e:	e7ad      	b.n	80038fc <__sflush_r+0x1c>
 80039a0:	690f      	ldr	r7, [r1, #16]
 80039a2:	2f00      	cmp	r7, #0
 80039a4:	d0a9      	beq.n	80038fa <__sflush_r+0x1a>
 80039a6:	0793      	lsls	r3, r2, #30
 80039a8:	680e      	ldr	r6, [r1, #0]
 80039aa:	bf08      	it	eq
 80039ac:	694b      	ldreq	r3, [r1, #20]
 80039ae:	600f      	str	r7, [r1, #0]
 80039b0:	bf18      	it	ne
 80039b2:	2300      	movne	r3, #0
 80039b4:	eba6 0807 	sub.w	r8, r6, r7
 80039b8:	608b      	str	r3, [r1, #8]
 80039ba:	f1b8 0f00 	cmp.w	r8, #0
 80039be:	dd9c      	ble.n	80038fa <__sflush_r+0x1a>
 80039c0:	4643      	mov	r3, r8
 80039c2:	463a      	mov	r2, r7
 80039c4:	6a21      	ldr	r1, [r4, #32]
 80039c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039c8:	4628      	mov	r0, r5
 80039ca:	47b0      	blx	r6
 80039cc:	2800      	cmp	r0, #0
 80039ce:	dc06      	bgt.n	80039de <__sflush_r+0xfe>
 80039d0:	89a3      	ldrh	r3, [r4, #12]
 80039d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d6:	81a3      	strh	r3, [r4, #12]
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	e78e      	b.n	80038fc <__sflush_r+0x1c>
 80039de:	4407      	add	r7, r0
 80039e0:	eba8 0800 	sub.w	r8, r8, r0
 80039e4:	e7e9      	b.n	80039ba <__sflush_r+0xda>
 80039e6:	bf00      	nop
 80039e8:	20400001 	.word	0x20400001

080039ec <_fflush_r>:
 80039ec:	b538      	push	{r3, r4, r5, lr}
 80039ee:	690b      	ldr	r3, [r1, #16]
 80039f0:	4605      	mov	r5, r0
 80039f2:	460c      	mov	r4, r1
 80039f4:	b1db      	cbz	r3, 8003a2e <_fflush_r+0x42>
 80039f6:	b118      	cbz	r0, 8003a00 <_fflush_r+0x14>
 80039f8:	6983      	ldr	r3, [r0, #24]
 80039fa:	b90b      	cbnz	r3, 8003a00 <_fflush_r+0x14>
 80039fc:	f000 f860 	bl	8003ac0 <__sinit>
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <_fflush_r+0x48>)
 8003a02:	429c      	cmp	r4, r3
 8003a04:	d109      	bne.n	8003a1a <_fflush_r+0x2e>
 8003a06:	686c      	ldr	r4, [r5, #4]
 8003a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a0c:	b17b      	cbz	r3, 8003a2e <_fflush_r+0x42>
 8003a0e:	4621      	mov	r1, r4
 8003a10:	4628      	mov	r0, r5
 8003a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a16:	f7ff bf63 	b.w	80038e0 <__sflush_r>
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <_fflush_r+0x4c>)
 8003a1c:	429c      	cmp	r4, r3
 8003a1e:	d101      	bne.n	8003a24 <_fflush_r+0x38>
 8003a20:	68ac      	ldr	r4, [r5, #8]
 8003a22:	e7f1      	b.n	8003a08 <_fflush_r+0x1c>
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <_fflush_r+0x50>)
 8003a26:	429c      	cmp	r4, r3
 8003a28:	bf08      	it	eq
 8003a2a:	68ec      	ldreq	r4, [r5, #12]
 8003a2c:	e7ec      	b.n	8003a08 <_fflush_r+0x1c>
 8003a2e:	2000      	movs	r0, #0
 8003a30:	bd38      	pop	{r3, r4, r5, pc}
 8003a32:	bf00      	nop
 8003a34:	080045a4 	.word	0x080045a4
 8003a38:	080045c4 	.word	0x080045c4
 8003a3c:	08004584 	.word	0x08004584

08003a40 <std>:
 8003a40:	2300      	movs	r3, #0
 8003a42:	b510      	push	{r4, lr}
 8003a44:	4604      	mov	r4, r0
 8003a46:	e9c0 3300 	strd	r3, r3, [r0]
 8003a4a:	6083      	str	r3, [r0, #8]
 8003a4c:	8181      	strh	r1, [r0, #12]
 8003a4e:	6643      	str	r3, [r0, #100]	; 0x64
 8003a50:	81c2      	strh	r2, [r0, #14]
 8003a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a56:	6183      	str	r3, [r0, #24]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	305c      	adds	r0, #92	; 0x5c
 8003a5e:	f7ff fdfb 	bl	8003658 <memset>
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <std+0x38>)
 8003a64:	6263      	str	r3, [r4, #36]	; 0x24
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <std+0x3c>)
 8003a68:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <std+0x40>)
 8003a6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <std+0x44>)
 8003a70:	6224      	str	r4, [r4, #32]
 8003a72:	6323      	str	r3, [r4, #48]	; 0x30
 8003a74:	bd10      	pop	{r4, pc}
 8003a76:	bf00      	nop
 8003a78:	0800439d 	.word	0x0800439d
 8003a7c:	080043bf 	.word	0x080043bf
 8003a80:	080043f7 	.word	0x080043f7
 8003a84:	0800441b 	.word	0x0800441b

08003a88 <_cleanup_r>:
 8003a88:	4901      	ldr	r1, [pc, #4]	; (8003a90 <_cleanup_r+0x8>)
 8003a8a:	f000 b885 	b.w	8003b98 <_fwalk_reent>
 8003a8e:	bf00      	nop
 8003a90:	080039ed 	.word	0x080039ed

08003a94 <__sfmoreglue>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	1e4a      	subs	r2, r1, #1
 8003a98:	2568      	movs	r5, #104	; 0x68
 8003a9a:	4355      	muls	r5, r2
 8003a9c:	460e      	mov	r6, r1
 8003a9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003aa2:	f000 f949 	bl	8003d38 <_malloc_r>
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	b140      	cbz	r0, 8003abc <__sfmoreglue+0x28>
 8003aaa:	2100      	movs	r1, #0
 8003aac:	e9c0 1600 	strd	r1, r6, [r0]
 8003ab0:	300c      	adds	r0, #12
 8003ab2:	60a0      	str	r0, [r4, #8]
 8003ab4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ab8:	f7ff fdce 	bl	8003658 <memset>
 8003abc:	4620      	mov	r0, r4
 8003abe:	bd70      	pop	{r4, r5, r6, pc}

08003ac0 <__sinit>:
 8003ac0:	6983      	ldr	r3, [r0, #24]
 8003ac2:	b510      	push	{r4, lr}
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	bb33      	cbnz	r3, 8003b16 <__sinit+0x56>
 8003ac8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003acc:	6503      	str	r3, [r0, #80]	; 0x50
 8003ace:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <__sinit+0x58>)
 8003ad0:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <__sinit+0x5c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6282      	str	r2, [r0, #40]	; 0x28
 8003ad6:	4298      	cmp	r0, r3
 8003ad8:	bf04      	itt	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	6183      	streq	r3, [r0, #24]
 8003ade:	f000 f81f 	bl	8003b20 <__sfp>
 8003ae2:	6060      	str	r0, [r4, #4]
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f000 f81b 	bl	8003b20 <__sfp>
 8003aea:	60a0      	str	r0, [r4, #8]
 8003aec:	4620      	mov	r0, r4
 8003aee:	f000 f817 	bl	8003b20 <__sfp>
 8003af2:	2200      	movs	r2, #0
 8003af4:	60e0      	str	r0, [r4, #12]
 8003af6:	2104      	movs	r1, #4
 8003af8:	6860      	ldr	r0, [r4, #4]
 8003afa:	f7ff ffa1 	bl	8003a40 <std>
 8003afe:	2201      	movs	r2, #1
 8003b00:	2109      	movs	r1, #9
 8003b02:	68a0      	ldr	r0, [r4, #8]
 8003b04:	f7ff ff9c 	bl	8003a40 <std>
 8003b08:	2202      	movs	r2, #2
 8003b0a:	2112      	movs	r1, #18
 8003b0c:	68e0      	ldr	r0, [r4, #12]
 8003b0e:	f7ff ff97 	bl	8003a40 <std>
 8003b12:	2301      	movs	r3, #1
 8003b14:	61a3      	str	r3, [r4, #24]
 8003b16:	bd10      	pop	{r4, pc}
 8003b18:	08004580 	.word	0x08004580
 8003b1c:	08003a89 	.word	0x08003a89

08003b20 <__sfp>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <__sfp+0x70>)
 8003b24:	681e      	ldr	r6, [r3, #0]
 8003b26:	69b3      	ldr	r3, [r6, #24]
 8003b28:	4607      	mov	r7, r0
 8003b2a:	b913      	cbnz	r3, 8003b32 <__sfp+0x12>
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f7ff ffc7 	bl	8003ac0 <__sinit>
 8003b32:	3648      	adds	r6, #72	; 0x48
 8003b34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	d503      	bpl.n	8003b44 <__sfp+0x24>
 8003b3c:	6833      	ldr	r3, [r6, #0]
 8003b3e:	b133      	cbz	r3, 8003b4e <__sfp+0x2e>
 8003b40:	6836      	ldr	r6, [r6, #0]
 8003b42:	e7f7      	b.n	8003b34 <__sfp+0x14>
 8003b44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b48:	b16d      	cbz	r5, 8003b66 <__sfp+0x46>
 8003b4a:	3468      	adds	r4, #104	; 0x68
 8003b4c:	e7f4      	b.n	8003b38 <__sfp+0x18>
 8003b4e:	2104      	movs	r1, #4
 8003b50:	4638      	mov	r0, r7
 8003b52:	f7ff ff9f 	bl	8003a94 <__sfmoreglue>
 8003b56:	6030      	str	r0, [r6, #0]
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d1f1      	bne.n	8003b40 <__sfp+0x20>
 8003b5c:	230c      	movs	r3, #12
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4604      	mov	r4, r0
 8003b62:	4620      	mov	r0, r4
 8003b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <__sfp+0x74>)
 8003b68:	6665      	str	r5, [r4, #100]	; 0x64
 8003b6a:	e9c4 5500 	strd	r5, r5, [r4]
 8003b6e:	60a5      	str	r5, [r4, #8]
 8003b70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003b74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b80:	f7ff fd6a 	bl	8003658 <memset>
 8003b84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b8c:	e7e9      	b.n	8003b62 <__sfp+0x42>
 8003b8e:	bf00      	nop
 8003b90:	08004580 	.word	0x08004580
 8003b94:	ffff0001 	.word	0xffff0001

08003b98 <_fwalk_reent>:
 8003b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b9c:	4680      	mov	r8, r0
 8003b9e:	4689      	mov	r9, r1
 8003ba0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ba4:	2600      	movs	r6, #0
 8003ba6:	b914      	cbnz	r4, 8003bae <_fwalk_reent+0x16>
 8003ba8:	4630      	mov	r0, r6
 8003baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003bb2:	3f01      	subs	r7, #1
 8003bb4:	d501      	bpl.n	8003bba <_fwalk_reent+0x22>
 8003bb6:	6824      	ldr	r4, [r4, #0]
 8003bb8:	e7f5      	b.n	8003ba6 <_fwalk_reent+0xe>
 8003bba:	89ab      	ldrh	r3, [r5, #12]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d907      	bls.n	8003bd0 <_fwalk_reent+0x38>
 8003bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	d003      	beq.n	8003bd0 <_fwalk_reent+0x38>
 8003bc8:	4629      	mov	r1, r5
 8003bca:	4640      	mov	r0, r8
 8003bcc:	47c8      	blx	r9
 8003bce:	4306      	orrs	r6, r0
 8003bd0:	3568      	adds	r5, #104	; 0x68
 8003bd2:	e7ee      	b.n	8003bb2 <_fwalk_reent+0x1a>

08003bd4 <__swhatbuf_r>:
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	460e      	mov	r6, r1
 8003bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bdc:	2900      	cmp	r1, #0
 8003bde:	b096      	sub	sp, #88	; 0x58
 8003be0:	4614      	mov	r4, r2
 8003be2:	461d      	mov	r5, r3
 8003be4:	da07      	bge.n	8003bf6 <__swhatbuf_r+0x22>
 8003be6:	2300      	movs	r3, #0
 8003be8:	602b      	str	r3, [r5, #0]
 8003bea:	89b3      	ldrh	r3, [r6, #12]
 8003bec:	061a      	lsls	r2, r3, #24
 8003bee:	d410      	bmi.n	8003c12 <__swhatbuf_r+0x3e>
 8003bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bf4:	e00e      	b.n	8003c14 <__swhatbuf_r+0x40>
 8003bf6:	466a      	mov	r2, sp
 8003bf8:	f000 fc36 	bl	8004468 <_fstat_r>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	dbf2      	blt.n	8003be6 <__swhatbuf_r+0x12>
 8003c00:	9a01      	ldr	r2, [sp, #4]
 8003c02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c0a:	425a      	negs	r2, r3
 8003c0c:	415a      	adcs	r2, r3
 8003c0e:	602a      	str	r2, [r5, #0]
 8003c10:	e7ee      	b.n	8003bf0 <__swhatbuf_r+0x1c>
 8003c12:	2340      	movs	r3, #64	; 0x40
 8003c14:	2000      	movs	r0, #0
 8003c16:	6023      	str	r3, [r4, #0]
 8003c18:	b016      	add	sp, #88	; 0x58
 8003c1a:	bd70      	pop	{r4, r5, r6, pc}

08003c1c <__smakebuf_r>:
 8003c1c:	898b      	ldrh	r3, [r1, #12]
 8003c1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c20:	079d      	lsls	r5, r3, #30
 8003c22:	4606      	mov	r6, r0
 8003c24:	460c      	mov	r4, r1
 8003c26:	d507      	bpl.n	8003c38 <__smakebuf_r+0x1c>
 8003c28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c2c:	6023      	str	r3, [r4, #0]
 8003c2e:	6123      	str	r3, [r4, #16]
 8003c30:	2301      	movs	r3, #1
 8003c32:	6163      	str	r3, [r4, #20]
 8003c34:	b002      	add	sp, #8
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	ab01      	add	r3, sp, #4
 8003c3a:	466a      	mov	r2, sp
 8003c3c:	f7ff ffca 	bl	8003bd4 <__swhatbuf_r>
 8003c40:	9900      	ldr	r1, [sp, #0]
 8003c42:	4605      	mov	r5, r0
 8003c44:	4630      	mov	r0, r6
 8003c46:	f000 f877 	bl	8003d38 <_malloc_r>
 8003c4a:	b948      	cbnz	r0, 8003c60 <__smakebuf_r+0x44>
 8003c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c50:	059a      	lsls	r2, r3, #22
 8003c52:	d4ef      	bmi.n	8003c34 <__smakebuf_r+0x18>
 8003c54:	f023 0303 	bic.w	r3, r3, #3
 8003c58:	f043 0302 	orr.w	r3, r3, #2
 8003c5c:	81a3      	strh	r3, [r4, #12]
 8003c5e:	e7e3      	b.n	8003c28 <__smakebuf_r+0xc>
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <__smakebuf_r+0x7c>)
 8003c62:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c64:	89a3      	ldrh	r3, [r4, #12]
 8003c66:	6020      	str	r0, [r4, #0]
 8003c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6c:	81a3      	strh	r3, [r4, #12]
 8003c6e:	9b00      	ldr	r3, [sp, #0]
 8003c70:	6163      	str	r3, [r4, #20]
 8003c72:	9b01      	ldr	r3, [sp, #4]
 8003c74:	6120      	str	r0, [r4, #16]
 8003c76:	b15b      	cbz	r3, 8003c90 <__smakebuf_r+0x74>
 8003c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c7c:	4630      	mov	r0, r6
 8003c7e:	f000 fc05 	bl	800448c <_isatty_r>
 8003c82:	b128      	cbz	r0, 8003c90 <__smakebuf_r+0x74>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	89a3      	ldrh	r3, [r4, #12]
 8003c92:	431d      	orrs	r5, r3
 8003c94:	81a5      	strh	r5, [r4, #12]
 8003c96:	e7cd      	b.n	8003c34 <__smakebuf_r+0x18>
 8003c98:	08003a89 	.word	0x08003a89

08003c9c <_free_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	d045      	beq.n	8003d30 <_free_r+0x94>
 8003ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca8:	1f0c      	subs	r4, r1, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bfb8      	it	lt
 8003cae:	18e4      	addlt	r4, r4, r3
 8003cb0:	f000 fc0e 	bl	80044d0 <__malloc_lock>
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <_free_r+0x98>)
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	4610      	mov	r0, r2
 8003cba:	b933      	cbnz	r3, 8003cca <_free_r+0x2e>
 8003cbc:	6063      	str	r3, [r4, #4]
 8003cbe:	6014      	str	r4, [r2, #0]
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cc6:	f000 bc04 	b.w	80044d2 <__malloc_unlock>
 8003cca:	42a3      	cmp	r3, r4
 8003ccc:	d90c      	bls.n	8003ce8 <_free_r+0x4c>
 8003cce:	6821      	ldr	r1, [r4, #0]
 8003cd0:	1862      	adds	r2, r4, r1
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	bf04      	itt	eq
 8003cd6:	681a      	ldreq	r2, [r3, #0]
 8003cd8:	685b      	ldreq	r3, [r3, #4]
 8003cda:	6063      	str	r3, [r4, #4]
 8003cdc:	bf04      	itt	eq
 8003cde:	1852      	addeq	r2, r2, r1
 8003ce0:	6022      	streq	r2, [r4, #0]
 8003ce2:	6004      	str	r4, [r0, #0]
 8003ce4:	e7ec      	b.n	8003cc0 <_free_r+0x24>
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	b10a      	cbz	r2, 8003cf0 <_free_r+0x54>
 8003cec:	42a2      	cmp	r2, r4
 8003cee:	d9fa      	bls.n	8003ce6 <_free_r+0x4a>
 8003cf0:	6819      	ldr	r1, [r3, #0]
 8003cf2:	1858      	adds	r0, r3, r1
 8003cf4:	42a0      	cmp	r0, r4
 8003cf6:	d10b      	bne.n	8003d10 <_free_r+0x74>
 8003cf8:	6820      	ldr	r0, [r4, #0]
 8003cfa:	4401      	add	r1, r0
 8003cfc:	1858      	adds	r0, r3, r1
 8003cfe:	4282      	cmp	r2, r0
 8003d00:	6019      	str	r1, [r3, #0]
 8003d02:	d1dd      	bne.n	8003cc0 <_free_r+0x24>
 8003d04:	6810      	ldr	r0, [r2, #0]
 8003d06:	6852      	ldr	r2, [r2, #4]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	4401      	add	r1, r0
 8003d0c:	6019      	str	r1, [r3, #0]
 8003d0e:	e7d7      	b.n	8003cc0 <_free_r+0x24>
 8003d10:	d902      	bls.n	8003d18 <_free_r+0x7c>
 8003d12:	230c      	movs	r3, #12
 8003d14:	602b      	str	r3, [r5, #0]
 8003d16:	e7d3      	b.n	8003cc0 <_free_r+0x24>
 8003d18:	6820      	ldr	r0, [r4, #0]
 8003d1a:	1821      	adds	r1, r4, r0
 8003d1c:	428a      	cmp	r2, r1
 8003d1e:	bf04      	itt	eq
 8003d20:	6811      	ldreq	r1, [r2, #0]
 8003d22:	6852      	ldreq	r2, [r2, #4]
 8003d24:	6062      	str	r2, [r4, #4]
 8003d26:	bf04      	itt	eq
 8003d28:	1809      	addeq	r1, r1, r0
 8003d2a:	6021      	streq	r1, [r4, #0]
 8003d2c:	605c      	str	r4, [r3, #4]
 8003d2e:	e7c7      	b.n	8003cc0 <_free_r+0x24>
 8003d30:	bd38      	pop	{r3, r4, r5, pc}
 8003d32:	bf00      	nop
 8003d34:	20000090 	.word	0x20000090

08003d38 <_malloc_r>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	1ccd      	adds	r5, r1, #3
 8003d3c:	f025 0503 	bic.w	r5, r5, #3
 8003d40:	3508      	adds	r5, #8
 8003d42:	2d0c      	cmp	r5, #12
 8003d44:	bf38      	it	cc
 8003d46:	250c      	movcc	r5, #12
 8003d48:	2d00      	cmp	r5, #0
 8003d4a:	4606      	mov	r6, r0
 8003d4c:	db01      	blt.n	8003d52 <_malloc_r+0x1a>
 8003d4e:	42a9      	cmp	r1, r5
 8003d50:	d903      	bls.n	8003d5a <_malloc_r+0x22>
 8003d52:	230c      	movs	r3, #12
 8003d54:	6033      	str	r3, [r6, #0]
 8003d56:	2000      	movs	r0, #0
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	f000 fbb9 	bl	80044d0 <__malloc_lock>
 8003d5e:	4a21      	ldr	r2, [pc, #132]	; (8003de4 <_malloc_r+0xac>)
 8003d60:	6814      	ldr	r4, [r2, #0]
 8003d62:	4621      	mov	r1, r4
 8003d64:	b991      	cbnz	r1, 8003d8c <_malloc_r+0x54>
 8003d66:	4c20      	ldr	r4, [pc, #128]	; (8003de8 <_malloc_r+0xb0>)
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	b91b      	cbnz	r3, 8003d74 <_malloc_r+0x3c>
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	f000 fb05 	bl	800437c <_sbrk_r>
 8003d72:	6020      	str	r0, [r4, #0]
 8003d74:	4629      	mov	r1, r5
 8003d76:	4630      	mov	r0, r6
 8003d78:	f000 fb00 	bl	800437c <_sbrk_r>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d124      	bne.n	8003dca <_malloc_r+0x92>
 8003d80:	230c      	movs	r3, #12
 8003d82:	6033      	str	r3, [r6, #0]
 8003d84:	4630      	mov	r0, r6
 8003d86:	f000 fba4 	bl	80044d2 <__malloc_unlock>
 8003d8a:	e7e4      	b.n	8003d56 <_malloc_r+0x1e>
 8003d8c:	680b      	ldr	r3, [r1, #0]
 8003d8e:	1b5b      	subs	r3, r3, r5
 8003d90:	d418      	bmi.n	8003dc4 <_malloc_r+0x8c>
 8003d92:	2b0b      	cmp	r3, #11
 8003d94:	d90f      	bls.n	8003db6 <_malloc_r+0x7e>
 8003d96:	600b      	str	r3, [r1, #0]
 8003d98:	50cd      	str	r5, [r1, r3]
 8003d9a:	18cc      	adds	r4, r1, r3
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 fb98 	bl	80044d2 <__malloc_unlock>
 8003da2:	f104 000b 	add.w	r0, r4, #11
 8003da6:	1d23      	adds	r3, r4, #4
 8003da8:	f020 0007 	bic.w	r0, r0, #7
 8003dac:	1ac3      	subs	r3, r0, r3
 8003dae:	d0d3      	beq.n	8003d58 <_malloc_r+0x20>
 8003db0:	425a      	negs	r2, r3
 8003db2:	50e2      	str	r2, [r4, r3]
 8003db4:	e7d0      	b.n	8003d58 <_malloc_r+0x20>
 8003db6:	428c      	cmp	r4, r1
 8003db8:	684b      	ldr	r3, [r1, #4]
 8003dba:	bf16      	itet	ne
 8003dbc:	6063      	strne	r3, [r4, #4]
 8003dbe:	6013      	streq	r3, [r2, #0]
 8003dc0:	460c      	movne	r4, r1
 8003dc2:	e7eb      	b.n	8003d9c <_malloc_r+0x64>
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	6849      	ldr	r1, [r1, #4]
 8003dc8:	e7cc      	b.n	8003d64 <_malloc_r+0x2c>
 8003dca:	1cc4      	adds	r4, r0, #3
 8003dcc:	f024 0403 	bic.w	r4, r4, #3
 8003dd0:	42a0      	cmp	r0, r4
 8003dd2:	d005      	beq.n	8003de0 <_malloc_r+0xa8>
 8003dd4:	1a21      	subs	r1, r4, r0
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f000 fad0 	bl	800437c <_sbrk_r>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d0cf      	beq.n	8003d80 <_malloc_r+0x48>
 8003de0:	6025      	str	r5, [r4, #0]
 8003de2:	e7db      	b.n	8003d9c <_malloc_r+0x64>
 8003de4:	20000090 	.word	0x20000090
 8003de8:	20000094 	.word	0x20000094

08003dec <__sfputc_r>:
 8003dec:	6893      	ldr	r3, [r2, #8]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	b410      	push	{r4}
 8003df4:	6093      	str	r3, [r2, #8]
 8003df6:	da08      	bge.n	8003e0a <__sfputc_r+0x1e>
 8003df8:	6994      	ldr	r4, [r2, #24]
 8003dfa:	42a3      	cmp	r3, r4
 8003dfc:	db01      	blt.n	8003e02 <__sfputc_r+0x16>
 8003dfe:	290a      	cmp	r1, #10
 8003e00:	d103      	bne.n	8003e0a <__sfputc_r+0x1e>
 8003e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e06:	f7ff bcab 	b.w	8003760 <__swbuf_r>
 8003e0a:	6813      	ldr	r3, [r2, #0]
 8003e0c:	1c58      	adds	r0, r3, #1
 8003e0e:	6010      	str	r0, [r2, #0]
 8003e10:	7019      	strb	r1, [r3, #0]
 8003e12:	4608      	mov	r0, r1
 8003e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <__sfputs_r>:
 8003e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1c:	4606      	mov	r6, r0
 8003e1e:	460f      	mov	r7, r1
 8003e20:	4614      	mov	r4, r2
 8003e22:	18d5      	adds	r5, r2, r3
 8003e24:	42ac      	cmp	r4, r5
 8003e26:	d101      	bne.n	8003e2c <__sfputs_r+0x12>
 8003e28:	2000      	movs	r0, #0
 8003e2a:	e007      	b.n	8003e3c <__sfputs_r+0x22>
 8003e2c:	463a      	mov	r2, r7
 8003e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e32:	4630      	mov	r0, r6
 8003e34:	f7ff ffda 	bl	8003dec <__sfputc_r>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d1f3      	bne.n	8003e24 <__sfputs_r+0xa>
 8003e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e40 <_vfiprintf_r>:
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	460c      	mov	r4, r1
 8003e46:	b09d      	sub	sp, #116	; 0x74
 8003e48:	4617      	mov	r7, r2
 8003e4a:	461d      	mov	r5, r3
 8003e4c:	4606      	mov	r6, r0
 8003e4e:	b118      	cbz	r0, 8003e58 <_vfiprintf_r+0x18>
 8003e50:	6983      	ldr	r3, [r0, #24]
 8003e52:	b90b      	cbnz	r3, 8003e58 <_vfiprintf_r+0x18>
 8003e54:	f7ff fe34 	bl	8003ac0 <__sinit>
 8003e58:	4b7c      	ldr	r3, [pc, #496]	; (800404c <_vfiprintf_r+0x20c>)
 8003e5a:	429c      	cmp	r4, r3
 8003e5c:	d158      	bne.n	8003f10 <_vfiprintf_r+0xd0>
 8003e5e:	6874      	ldr	r4, [r6, #4]
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	0718      	lsls	r0, r3, #28
 8003e64:	d55e      	bpl.n	8003f24 <_vfiprintf_r+0xe4>
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d05b      	beq.n	8003f24 <_vfiprintf_r+0xe4>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e70:	2320      	movs	r3, #32
 8003e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e76:	2330      	movs	r3, #48	; 0x30
 8003e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e7c:	9503      	str	r5, [sp, #12]
 8003e7e:	f04f 0b01 	mov.w	fp, #1
 8003e82:	46b8      	mov	r8, r7
 8003e84:	4645      	mov	r5, r8
 8003e86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e8a:	b10b      	cbz	r3, 8003e90 <_vfiprintf_r+0x50>
 8003e8c:	2b25      	cmp	r3, #37	; 0x25
 8003e8e:	d154      	bne.n	8003f3a <_vfiprintf_r+0xfa>
 8003e90:	ebb8 0a07 	subs.w	sl, r8, r7
 8003e94:	d00b      	beq.n	8003eae <_vfiprintf_r+0x6e>
 8003e96:	4653      	mov	r3, sl
 8003e98:	463a      	mov	r2, r7
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	f7ff ffbc 	bl	8003e1a <__sfputs_r>
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	f000 80c2 	beq.w	800402c <_vfiprintf_r+0x1ec>
 8003ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eaa:	4453      	add	r3, sl
 8003eac:	9309      	str	r3, [sp, #36]	; 0x24
 8003eae:	f898 3000 	ldrb.w	r3, [r8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80ba 	beq.w	800402c <_vfiprintf_r+0x1ec>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ec2:	9304      	str	r3, [sp, #16]
 8003ec4:	9307      	str	r3, [sp, #28]
 8003ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eca:	931a      	str	r3, [sp, #104]	; 0x68
 8003ecc:	46a8      	mov	r8, r5
 8003ece:	2205      	movs	r2, #5
 8003ed0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003ed4:	485e      	ldr	r0, [pc, #376]	; (8004050 <_vfiprintf_r+0x210>)
 8003ed6:	f7fc f983 	bl	80001e0 <memchr>
 8003eda:	9b04      	ldr	r3, [sp, #16]
 8003edc:	bb78      	cbnz	r0, 8003f3e <_vfiprintf_r+0xfe>
 8003ede:	06d9      	lsls	r1, r3, #27
 8003ee0:	bf44      	itt	mi
 8003ee2:	2220      	movmi	r2, #32
 8003ee4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ee8:	071a      	lsls	r2, r3, #28
 8003eea:	bf44      	itt	mi
 8003eec:	222b      	movmi	r2, #43	; 0x2b
 8003eee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ef2:	782a      	ldrb	r2, [r5, #0]
 8003ef4:	2a2a      	cmp	r2, #42	; 0x2a
 8003ef6:	d02a      	beq.n	8003f4e <_vfiprintf_r+0x10e>
 8003ef8:	9a07      	ldr	r2, [sp, #28]
 8003efa:	46a8      	mov	r8, r5
 8003efc:	2000      	movs	r0, #0
 8003efe:	250a      	movs	r5, #10
 8003f00:	4641      	mov	r1, r8
 8003f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f06:	3b30      	subs	r3, #48	; 0x30
 8003f08:	2b09      	cmp	r3, #9
 8003f0a:	d969      	bls.n	8003fe0 <_vfiprintf_r+0x1a0>
 8003f0c:	b360      	cbz	r0, 8003f68 <_vfiprintf_r+0x128>
 8003f0e:	e024      	b.n	8003f5a <_vfiprintf_r+0x11a>
 8003f10:	4b50      	ldr	r3, [pc, #320]	; (8004054 <_vfiprintf_r+0x214>)
 8003f12:	429c      	cmp	r4, r3
 8003f14:	d101      	bne.n	8003f1a <_vfiprintf_r+0xda>
 8003f16:	68b4      	ldr	r4, [r6, #8]
 8003f18:	e7a2      	b.n	8003e60 <_vfiprintf_r+0x20>
 8003f1a:	4b4f      	ldr	r3, [pc, #316]	; (8004058 <_vfiprintf_r+0x218>)
 8003f1c:	429c      	cmp	r4, r3
 8003f1e:	bf08      	it	eq
 8003f20:	68f4      	ldreq	r4, [r6, #12]
 8003f22:	e79d      	b.n	8003e60 <_vfiprintf_r+0x20>
 8003f24:	4621      	mov	r1, r4
 8003f26:	4630      	mov	r0, r6
 8003f28:	f7ff fc6c 	bl	8003804 <__swsetup_r>
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	d09d      	beq.n	8003e6c <_vfiprintf_r+0x2c>
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	b01d      	add	sp, #116	; 0x74
 8003f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3a:	46a8      	mov	r8, r5
 8003f3c:	e7a2      	b.n	8003e84 <_vfiprintf_r+0x44>
 8003f3e:	4a44      	ldr	r2, [pc, #272]	; (8004050 <_vfiprintf_r+0x210>)
 8003f40:	1a80      	subs	r0, r0, r2
 8003f42:	fa0b f000 	lsl.w	r0, fp, r0
 8003f46:	4318      	orrs	r0, r3
 8003f48:	9004      	str	r0, [sp, #16]
 8003f4a:	4645      	mov	r5, r8
 8003f4c:	e7be      	b.n	8003ecc <_vfiprintf_r+0x8c>
 8003f4e:	9a03      	ldr	r2, [sp, #12]
 8003f50:	1d11      	adds	r1, r2, #4
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	9103      	str	r1, [sp, #12]
 8003f56:	2a00      	cmp	r2, #0
 8003f58:	db01      	blt.n	8003f5e <_vfiprintf_r+0x11e>
 8003f5a:	9207      	str	r2, [sp, #28]
 8003f5c:	e004      	b.n	8003f68 <_vfiprintf_r+0x128>
 8003f5e:	4252      	negs	r2, r2
 8003f60:	f043 0302 	orr.w	r3, r3, #2
 8003f64:	9207      	str	r2, [sp, #28]
 8003f66:	9304      	str	r3, [sp, #16]
 8003f68:	f898 3000 	ldrb.w	r3, [r8]
 8003f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f6e:	d10e      	bne.n	8003f8e <_vfiprintf_r+0x14e>
 8003f70:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003f74:	2b2a      	cmp	r3, #42	; 0x2a
 8003f76:	d138      	bne.n	8003fea <_vfiprintf_r+0x1aa>
 8003f78:	9b03      	ldr	r3, [sp, #12]
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	9203      	str	r2, [sp, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bfb8      	it	lt
 8003f84:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f88:	f108 0802 	add.w	r8, r8, #2
 8003f8c:	9305      	str	r3, [sp, #20]
 8003f8e:	4d33      	ldr	r5, [pc, #204]	; (800405c <_vfiprintf_r+0x21c>)
 8003f90:	f898 1000 	ldrb.w	r1, [r8]
 8003f94:	2203      	movs	r2, #3
 8003f96:	4628      	mov	r0, r5
 8003f98:	f7fc f922 	bl	80001e0 <memchr>
 8003f9c:	b140      	cbz	r0, 8003fb0 <_vfiprintf_r+0x170>
 8003f9e:	2340      	movs	r3, #64	; 0x40
 8003fa0:	1b40      	subs	r0, r0, r5
 8003fa2:	fa03 f000 	lsl.w	r0, r3, r0
 8003fa6:	9b04      	ldr	r3, [sp, #16]
 8003fa8:	4303      	orrs	r3, r0
 8003faa:	f108 0801 	add.w	r8, r8, #1
 8003fae:	9304      	str	r3, [sp, #16]
 8003fb0:	f898 1000 	ldrb.w	r1, [r8]
 8003fb4:	482a      	ldr	r0, [pc, #168]	; (8004060 <_vfiprintf_r+0x220>)
 8003fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fba:	2206      	movs	r2, #6
 8003fbc:	f108 0701 	add.w	r7, r8, #1
 8003fc0:	f7fc f90e 	bl	80001e0 <memchr>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d037      	beq.n	8004038 <_vfiprintf_r+0x1f8>
 8003fc8:	4b26      	ldr	r3, [pc, #152]	; (8004064 <_vfiprintf_r+0x224>)
 8003fca:	bb1b      	cbnz	r3, 8004014 <_vfiprintf_r+0x1d4>
 8003fcc:	9b03      	ldr	r3, [sp, #12]
 8003fce:	3307      	adds	r3, #7
 8003fd0:	f023 0307 	bic.w	r3, r3, #7
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	9303      	str	r3, [sp, #12]
 8003fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fda:	444b      	add	r3, r9
 8003fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8003fde:	e750      	b.n	8003e82 <_vfiprintf_r+0x42>
 8003fe0:	fb05 3202 	mla	r2, r5, r2, r3
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	4688      	mov	r8, r1
 8003fe8:	e78a      	b.n	8003f00 <_vfiprintf_r+0xc0>
 8003fea:	2300      	movs	r3, #0
 8003fec:	f108 0801 	add.w	r8, r8, #1
 8003ff0:	9305      	str	r3, [sp, #20]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	250a      	movs	r5, #10
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ffc:	3a30      	subs	r2, #48	; 0x30
 8003ffe:	2a09      	cmp	r2, #9
 8004000:	d903      	bls.n	800400a <_vfiprintf_r+0x1ca>
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0c3      	beq.n	8003f8e <_vfiprintf_r+0x14e>
 8004006:	9105      	str	r1, [sp, #20]
 8004008:	e7c1      	b.n	8003f8e <_vfiprintf_r+0x14e>
 800400a:	fb05 2101 	mla	r1, r5, r1, r2
 800400e:	2301      	movs	r3, #1
 8004010:	4680      	mov	r8, r0
 8004012:	e7f0      	b.n	8003ff6 <_vfiprintf_r+0x1b6>
 8004014:	ab03      	add	r3, sp, #12
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	4622      	mov	r2, r4
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <_vfiprintf_r+0x228>)
 800401c:	a904      	add	r1, sp, #16
 800401e:	4630      	mov	r0, r6
 8004020:	f3af 8000 	nop.w
 8004024:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004028:	4681      	mov	r9, r0
 800402a:	d1d5      	bne.n	8003fd8 <_vfiprintf_r+0x198>
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	065b      	lsls	r3, r3, #25
 8004030:	f53f af7e 	bmi.w	8003f30 <_vfiprintf_r+0xf0>
 8004034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004036:	e77d      	b.n	8003f34 <_vfiprintf_r+0xf4>
 8004038:	ab03      	add	r3, sp, #12
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	4622      	mov	r2, r4
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <_vfiprintf_r+0x228>)
 8004040:	a904      	add	r1, sp, #16
 8004042:	4630      	mov	r0, r6
 8004044:	f000 f888 	bl	8004158 <_printf_i>
 8004048:	e7ec      	b.n	8004024 <_vfiprintf_r+0x1e4>
 800404a:	bf00      	nop
 800404c:	080045a4 	.word	0x080045a4
 8004050:	080045e4 	.word	0x080045e4
 8004054:	080045c4 	.word	0x080045c4
 8004058:	08004584 	.word	0x08004584
 800405c:	080045ea 	.word	0x080045ea
 8004060:	080045ee 	.word	0x080045ee
 8004064:	00000000 	.word	0x00000000
 8004068:	08003e1b 	.word	0x08003e1b

0800406c <_printf_common>:
 800406c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004070:	4691      	mov	r9, r2
 8004072:	461f      	mov	r7, r3
 8004074:	688a      	ldr	r2, [r1, #8]
 8004076:	690b      	ldr	r3, [r1, #16]
 8004078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800407c:	4293      	cmp	r3, r2
 800407e:	bfb8      	it	lt
 8004080:	4613      	movlt	r3, r2
 8004082:	f8c9 3000 	str.w	r3, [r9]
 8004086:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800408a:	4606      	mov	r6, r0
 800408c:	460c      	mov	r4, r1
 800408e:	b112      	cbz	r2, 8004096 <_printf_common+0x2a>
 8004090:	3301      	adds	r3, #1
 8004092:	f8c9 3000 	str.w	r3, [r9]
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	0699      	lsls	r1, r3, #26
 800409a:	bf42      	ittt	mi
 800409c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040a0:	3302      	addmi	r3, #2
 80040a2:	f8c9 3000 	strmi.w	r3, [r9]
 80040a6:	6825      	ldr	r5, [r4, #0]
 80040a8:	f015 0506 	ands.w	r5, r5, #6
 80040ac:	d107      	bne.n	80040be <_printf_common+0x52>
 80040ae:	f104 0a19 	add.w	sl, r4, #25
 80040b2:	68e3      	ldr	r3, [r4, #12]
 80040b4:	f8d9 2000 	ldr.w	r2, [r9]
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	42ab      	cmp	r3, r5
 80040bc:	dc28      	bgt.n	8004110 <_printf_common+0xa4>
 80040be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80040c2:	6822      	ldr	r2, [r4, #0]
 80040c4:	3300      	adds	r3, #0
 80040c6:	bf18      	it	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	0692      	lsls	r2, r2, #26
 80040cc:	d42d      	bmi.n	800412a <_printf_common+0xbe>
 80040ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040d2:	4639      	mov	r1, r7
 80040d4:	4630      	mov	r0, r6
 80040d6:	47c0      	blx	r8
 80040d8:	3001      	adds	r0, #1
 80040da:	d020      	beq.n	800411e <_printf_common+0xb2>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	68e5      	ldr	r5, [r4, #12]
 80040e0:	f8d9 2000 	ldr.w	r2, [r9]
 80040e4:	f003 0306 	and.w	r3, r3, #6
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	bf08      	it	eq
 80040ec:	1aad      	subeq	r5, r5, r2
 80040ee:	68a3      	ldr	r3, [r4, #8]
 80040f0:	6922      	ldr	r2, [r4, #16]
 80040f2:	bf0c      	ite	eq
 80040f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040f8:	2500      	movne	r5, #0
 80040fa:	4293      	cmp	r3, r2
 80040fc:	bfc4      	itt	gt
 80040fe:	1a9b      	subgt	r3, r3, r2
 8004100:	18ed      	addgt	r5, r5, r3
 8004102:	f04f 0900 	mov.w	r9, #0
 8004106:	341a      	adds	r4, #26
 8004108:	454d      	cmp	r5, r9
 800410a:	d11a      	bne.n	8004142 <_printf_common+0xd6>
 800410c:	2000      	movs	r0, #0
 800410e:	e008      	b.n	8004122 <_printf_common+0xb6>
 8004110:	2301      	movs	r3, #1
 8004112:	4652      	mov	r2, sl
 8004114:	4639      	mov	r1, r7
 8004116:	4630      	mov	r0, r6
 8004118:	47c0      	blx	r8
 800411a:	3001      	adds	r0, #1
 800411c:	d103      	bne.n	8004126 <_printf_common+0xba>
 800411e:	f04f 30ff 	mov.w	r0, #4294967295
 8004122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004126:	3501      	adds	r5, #1
 8004128:	e7c3      	b.n	80040b2 <_printf_common+0x46>
 800412a:	18e1      	adds	r1, r4, r3
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	2030      	movs	r0, #48	; 0x30
 8004130:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004134:	4422      	add	r2, r4
 8004136:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800413a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800413e:	3302      	adds	r3, #2
 8004140:	e7c5      	b.n	80040ce <_printf_common+0x62>
 8004142:	2301      	movs	r3, #1
 8004144:	4622      	mov	r2, r4
 8004146:	4639      	mov	r1, r7
 8004148:	4630      	mov	r0, r6
 800414a:	47c0      	blx	r8
 800414c:	3001      	adds	r0, #1
 800414e:	d0e6      	beq.n	800411e <_printf_common+0xb2>
 8004150:	f109 0901 	add.w	r9, r9, #1
 8004154:	e7d8      	b.n	8004108 <_printf_common+0x9c>
	...

08004158 <_printf_i>:
 8004158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800415c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004160:	460c      	mov	r4, r1
 8004162:	7e09      	ldrb	r1, [r1, #24]
 8004164:	b085      	sub	sp, #20
 8004166:	296e      	cmp	r1, #110	; 0x6e
 8004168:	4617      	mov	r7, r2
 800416a:	4606      	mov	r6, r0
 800416c:	4698      	mov	r8, r3
 800416e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004170:	f000 80b3 	beq.w	80042da <_printf_i+0x182>
 8004174:	d822      	bhi.n	80041bc <_printf_i+0x64>
 8004176:	2963      	cmp	r1, #99	; 0x63
 8004178:	d036      	beq.n	80041e8 <_printf_i+0x90>
 800417a:	d80a      	bhi.n	8004192 <_printf_i+0x3a>
 800417c:	2900      	cmp	r1, #0
 800417e:	f000 80b9 	beq.w	80042f4 <_printf_i+0x19c>
 8004182:	2958      	cmp	r1, #88	; 0x58
 8004184:	f000 8083 	beq.w	800428e <_printf_i+0x136>
 8004188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800418c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004190:	e032      	b.n	80041f8 <_printf_i+0xa0>
 8004192:	2964      	cmp	r1, #100	; 0x64
 8004194:	d001      	beq.n	800419a <_printf_i+0x42>
 8004196:	2969      	cmp	r1, #105	; 0x69
 8004198:	d1f6      	bne.n	8004188 <_printf_i+0x30>
 800419a:	6820      	ldr	r0, [r4, #0]
 800419c:	6813      	ldr	r3, [r2, #0]
 800419e:	0605      	lsls	r5, r0, #24
 80041a0:	f103 0104 	add.w	r1, r3, #4
 80041a4:	d52a      	bpl.n	80041fc <_printf_i+0xa4>
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6011      	str	r1, [r2, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	da03      	bge.n	80041b6 <_printf_i+0x5e>
 80041ae:	222d      	movs	r2, #45	; 0x2d
 80041b0:	425b      	negs	r3, r3
 80041b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80041b6:	486f      	ldr	r0, [pc, #444]	; (8004374 <_printf_i+0x21c>)
 80041b8:	220a      	movs	r2, #10
 80041ba:	e039      	b.n	8004230 <_printf_i+0xd8>
 80041bc:	2973      	cmp	r1, #115	; 0x73
 80041be:	f000 809d 	beq.w	80042fc <_printf_i+0x1a4>
 80041c2:	d808      	bhi.n	80041d6 <_printf_i+0x7e>
 80041c4:	296f      	cmp	r1, #111	; 0x6f
 80041c6:	d020      	beq.n	800420a <_printf_i+0xb2>
 80041c8:	2970      	cmp	r1, #112	; 0x70
 80041ca:	d1dd      	bne.n	8004188 <_printf_i+0x30>
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	f043 0320 	orr.w	r3, r3, #32
 80041d2:	6023      	str	r3, [r4, #0]
 80041d4:	e003      	b.n	80041de <_printf_i+0x86>
 80041d6:	2975      	cmp	r1, #117	; 0x75
 80041d8:	d017      	beq.n	800420a <_printf_i+0xb2>
 80041da:	2978      	cmp	r1, #120	; 0x78
 80041dc:	d1d4      	bne.n	8004188 <_printf_i+0x30>
 80041de:	2378      	movs	r3, #120	; 0x78
 80041e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041e4:	4864      	ldr	r0, [pc, #400]	; (8004378 <_printf_i+0x220>)
 80041e6:	e055      	b.n	8004294 <_printf_i+0x13c>
 80041e8:	6813      	ldr	r3, [r2, #0]
 80041ea:	1d19      	adds	r1, r3, #4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6011      	str	r1, [r2, #0]
 80041f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041f8:	2301      	movs	r3, #1
 80041fa:	e08c      	b.n	8004316 <_printf_i+0x1be>
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6011      	str	r1, [r2, #0]
 8004200:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004204:	bf18      	it	ne
 8004206:	b21b      	sxthne	r3, r3
 8004208:	e7cf      	b.n	80041aa <_printf_i+0x52>
 800420a:	6813      	ldr	r3, [r2, #0]
 800420c:	6825      	ldr	r5, [r4, #0]
 800420e:	1d18      	adds	r0, r3, #4
 8004210:	6010      	str	r0, [r2, #0]
 8004212:	0628      	lsls	r0, r5, #24
 8004214:	d501      	bpl.n	800421a <_printf_i+0xc2>
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	e002      	b.n	8004220 <_printf_i+0xc8>
 800421a:	0668      	lsls	r0, r5, #25
 800421c:	d5fb      	bpl.n	8004216 <_printf_i+0xbe>
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	4854      	ldr	r0, [pc, #336]	; (8004374 <_printf_i+0x21c>)
 8004222:	296f      	cmp	r1, #111	; 0x6f
 8004224:	bf14      	ite	ne
 8004226:	220a      	movne	r2, #10
 8004228:	2208      	moveq	r2, #8
 800422a:	2100      	movs	r1, #0
 800422c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004230:	6865      	ldr	r5, [r4, #4]
 8004232:	60a5      	str	r5, [r4, #8]
 8004234:	2d00      	cmp	r5, #0
 8004236:	f2c0 8095 	blt.w	8004364 <_printf_i+0x20c>
 800423a:	6821      	ldr	r1, [r4, #0]
 800423c:	f021 0104 	bic.w	r1, r1, #4
 8004240:	6021      	str	r1, [r4, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d13d      	bne.n	80042c2 <_printf_i+0x16a>
 8004246:	2d00      	cmp	r5, #0
 8004248:	f040 808e 	bne.w	8004368 <_printf_i+0x210>
 800424c:	4665      	mov	r5, ip
 800424e:	2a08      	cmp	r2, #8
 8004250:	d10b      	bne.n	800426a <_printf_i+0x112>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	07db      	lsls	r3, r3, #31
 8004256:	d508      	bpl.n	800426a <_printf_i+0x112>
 8004258:	6923      	ldr	r3, [r4, #16]
 800425a:	6862      	ldr	r2, [r4, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	bfde      	ittt	le
 8004260:	2330      	movle	r3, #48	; 0x30
 8004262:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004266:	f105 35ff 	addle.w	r5, r5, #4294967295
 800426a:	ebac 0305 	sub.w	r3, ip, r5
 800426e:	6123      	str	r3, [r4, #16]
 8004270:	f8cd 8000 	str.w	r8, [sp]
 8004274:	463b      	mov	r3, r7
 8004276:	aa03      	add	r2, sp, #12
 8004278:	4621      	mov	r1, r4
 800427a:	4630      	mov	r0, r6
 800427c:	f7ff fef6 	bl	800406c <_printf_common>
 8004280:	3001      	adds	r0, #1
 8004282:	d14d      	bne.n	8004320 <_printf_i+0x1c8>
 8004284:	f04f 30ff 	mov.w	r0, #4294967295
 8004288:	b005      	add	sp, #20
 800428a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800428e:	4839      	ldr	r0, [pc, #228]	; (8004374 <_printf_i+0x21c>)
 8004290:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004294:	6813      	ldr	r3, [r2, #0]
 8004296:	6821      	ldr	r1, [r4, #0]
 8004298:	1d1d      	adds	r5, r3, #4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6015      	str	r5, [r2, #0]
 800429e:	060a      	lsls	r2, r1, #24
 80042a0:	d50b      	bpl.n	80042ba <_printf_i+0x162>
 80042a2:	07ca      	lsls	r2, r1, #31
 80042a4:	bf44      	itt	mi
 80042a6:	f041 0120 	orrmi.w	r1, r1, #32
 80042aa:	6021      	strmi	r1, [r4, #0]
 80042ac:	b91b      	cbnz	r3, 80042b6 <_printf_i+0x15e>
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	f022 0220 	bic.w	r2, r2, #32
 80042b4:	6022      	str	r2, [r4, #0]
 80042b6:	2210      	movs	r2, #16
 80042b8:	e7b7      	b.n	800422a <_printf_i+0xd2>
 80042ba:	064d      	lsls	r5, r1, #25
 80042bc:	bf48      	it	mi
 80042be:	b29b      	uxthmi	r3, r3
 80042c0:	e7ef      	b.n	80042a2 <_printf_i+0x14a>
 80042c2:	4665      	mov	r5, ip
 80042c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80042c8:	fb02 3311 	mls	r3, r2, r1, r3
 80042cc:	5cc3      	ldrb	r3, [r0, r3]
 80042ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80042d2:	460b      	mov	r3, r1
 80042d4:	2900      	cmp	r1, #0
 80042d6:	d1f5      	bne.n	80042c4 <_printf_i+0x16c>
 80042d8:	e7b9      	b.n	800424e <_printf_i+0xf6>
 80042da:	6813      	ldr	r3, [r2, #0]
 80042dc:	6825      	ldr	r5, [r4, #0]
 80042de:	6961      	ldr	r1, [r4, #20]
 80042e0:	1d18      	adds	r0, r3, #4
 80042e2:	6010      	str	r0, [r2, #0]
 80042e4:	0628      	lsls	r0, r5, #24
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	d501      	bpl.n	80042ee <_printf_i+0x196>
 80042ea:	6019      	str	r1, [r3, #0]
 80042ec:	e002      	b.n	80042f4 <_printf_i+0x19c>
 80042ee:	066a      	lsls	r2, r5, #25
 80042f0:	d5fb      	bpl.n	80042ea <_printf_i+0x192>
 80042f2:	8019      	strh	r1, [r3, #0]
 80042f4:	2300      	movs	r3, #0
 80042f6:	6123      	str	r3, [r4, #16]
 80042f8:	4665      	mov	r5, ip
 80042fa:	e7b9      	b.n	8004270 <_printf_i+0x118>
 80042fc:	6813      	ldr	r3, [r2, #0]
 80042fe:	1d19      	adds	r1, r3, #4
 8004300:	6011      	str	r1, [r2, #0]
 8004302:	681d      	ldr	r5, [r3, #0]
 8004304:	6862      	ldr	r2, [r4, #4]
 8004306:	2100      	movs	r1, #0
 8004308:	4628      	mov	r0, r5
 800430a:	f7fb ff69 	bl	80001e0 <memchr>
 800430e:	b108      	cbz	r0, 8004314 <_printf_i+0x1bc>
 8004310:	1b40      	subs	r0, r0, r5
 8004312:	6060      	str	r0, [r4, #4]
 8004314:	6863      	ldr	r3, [r4, #4]
 8004316:	6123      	str	r3, [r4, #16]
 8004318:	2300      	movs	r3, #0
 800431a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431e:	e7a7      	b.n	8004270 <_printf_i+0x118>
 8004320:	6923      	ldr	r3, [r4, #16]
 8004322:	462a      	mov	r2, r5
 8004324:	4639      	mov	r1, r7
 8004326:	4630      	mov	r0, r6
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d0aa      	beq.n	8004284 <_printf_i+0x12c>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	079b      	lsls	r3, r3, #30
 8004332:	d413      	bmi.n	800435c <_printf_i+0x204>
 8004334:	68e0      	ldr	r0, [r4, #12]
 8004336:	9b03      	ldr	r3, [sp, #12]
 8004338:	4298      	cmp	r0, r3
 800433a:	bfb8      	it	lt
 800433c:	4618      	movlt	r0, r3
 800433e:	e7a3      	b.n	8004288 <_printf_i+0x130>
 8004340:	2301      	movs	r3, #1
 8004342:	464a      	mov	r2, r9
 8004344:	4639      	mov	r1, r7
 8004346:	4630      	mov	r0, r6
 8004348:	47c0      	blx	r8
 800434a:	3001      	adds	r0, #1
 800434c:	d09a      	beq.n	8004284 <_printf_i+0x12c>
 800434e:	3501      	adds	r5, #1
 8004350:	68e3      	ldr	r3, [r4, #12]
 8004352:	9a03      	ldr	r2, [sp, #12]
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	42ab      	cmp	r3, r5
 8004358:	dcf2      	bgt.n	8004340 <_printf_i+0x1e8>
 800435a:	e7eb      	b.n	8004334 <_printf_i+0x1dc>
 800435c:	2500      	movs	r5, #0
 800435e:	f104 0919 	add.w	r9, r4, #25
 8004362:	e7f5      	b.n	8004350 <_printf_i+0x1f8>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1ac      	bne.n	80042c2 <_printf_i+0x16a>
 8004368:	7803      	ldrb	r3, [r0, #0]
 800436a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800436e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004372:	e76c      	b.n	800424e <_printf_i+0xf6>
 8004374:	080045f5 	.word	0x080045f5
 8004378:	08004606 	.word	0x08004606

0800437c <_sbrk_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4c06      	ldr	r4, [pc, #24]	; (8004398 <_sbrk_r+0x1c>)
 8004380:	2300      	movs	r3, #0
 8004382:	4605      	mov	r5, r0
 8004384:	4608      	mov	r0, r1
 8004386:	6023      	str	r3, [r4, #0]
 8004388:	f7fc f96c 	bl	8000664 <_sbrk>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d102      	bne.n	8004396 <_sbrk_r+0x1a>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	b103      	cbz	r3, 8004396 <_sbrk_r+0x1a>
 8004394:	602b      	str	r3, [r5, #0]
 8004396:	bd38      	pop	{r3, r4, r5, pc}
 8004398:	2000013c 	.word	0x2000013c

0800439c <__sread>:
 800439c:	b510      	push	{r4, lr}
 800439e:	460c      	mov	r4, r1
 80043a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a4:	f000 f896 	bl	80044d4 <_read_r>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	bfab      	itete	ge
 80043ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043ae:	89a3      	ldrhlt	r3, [r4, #12]
 80043b0:	181b      	addge	r3, r3, r0
 80043b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043b6:	bfac      	ite	ge
 80043b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80043ba:	81a3      	strhlt	r3, [r4, #12]
 80043bc:	bd10      	pop	{r4, pc}

080043be <__swrite>:
 80043be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c2:	461f      	mov	r7, r3
 80043c4:	898b      	ldrh	r3, [r1, #12]
 80043c6:	05db      	lsls	r3, r3, #23
 80043c8:	4605      	mov	r5, r0
 80043ca:	460c      	mov	r4, r1
 80043cc:	4616      	mov	r6, r2
 80043ce:	d505      	bpl.n	80043dc <__swrite+0x1e>
 80043d0:	2302      	movs	r3, #2
 80043d2:	2200      	movs	r2, #0
 80043d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d8:	f000 f868 	bl	80044ac <_lseek_r>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043e6:	81a3      	strh	r3, [r4, #12]
 80043e8:	4632      	mov	r2, r6
 80043ea:	463b      	mov	r3, r7
 80043ec:	4628      	mov	r0, r5
 80043ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043f2:	f000 b817 	b.w	8004424 <_write_r>

080043f6 <__sseek>:
 80043f6:	b510      	push	{r4, lr}
 80043f8:	460c      	mov	r4, r1
 80043fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043fe:	f000 f855 	bl	80044ac <_lseek_r>
 8004402:	1c43      	adds	r3, r0, #1
 8004404:	89a3      	ldrh	r3, [r4, #12]
 8004406:	bf15      	itete	ne
 8004408:	6560      	strne	r0, [r4, #84]	; 0x54
 800440a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800440e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004412:	81a3      	strheq	r3, [r4, #12]
 8004414:	bf18      	it	ne
 8004416:	81a3      	strhne	r3, [r4, #12]
 8004418:	bd10      	pop	{r4, pc}

0800441a <__sclose>:
 800441a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441e:	f000 b813 	b.w	8004448 <_close_r>
	...

08004424 <_write_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4c07      	ldr	r4, [pc, #28]	; (8004444 <_write_r+0x20>)
 8004428:	4605      	mov	r5, r0
 800442a:	4608      	mov	r0, r1
 800442c:	4611      	mov	r1, r2
 800442e:	2200      	movs	r2, #0
 8004430:	6022      	str	r2, [r4, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	f7fc f8c5 	bl	80005c2 <_write>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d102      	bne.n	8004442 <_write_r+0x1e>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	b103      	cbz	r3, 8004442 <_write_r+0x1e>
 8004440:	602b      	str	r3, [r5, #0]
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	2000013c 	.word	0x2000013c

08004448 <_close_r>:
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4c06      	ldr	r4, [pc, #24]	; (8004464 <_close_r+0x1c>)
 800444c:	2300      	movs	r3, #0
 800444e:	4605      	mov	r5, r0
 8004450:	4608      	mov	r0, r1
 8004452:	6023      	str	r3, [r4, #0]
 8004454:	f7fc f8d1 	bl	80005fa <_close>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d102      	bne.n	8004462 <_close_r+0x1a>
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	b103      	cbz	r3, 8004462 <_close_r+0x1a>
 8004460:	602b      	str	r3, [r5, #0]
 8004462:	bd38      	pop	{r3, r4, r5, pc}
 8004464:	2000013c 	.word	0x2000013c

08004468 <_fstat_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4c07      	ldr	r4, [pc, #28]	; (8004488 <_fstat_r+0x20>)
 800446c:	2300      	movs	r3, #0
 800446e:	4605      	mov	r5, r0
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	f7fc f8cc 	bl	8000612 <_fstat>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	d102      	bne.n	8004484 <_fstat_r+0x1c>
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	b103      	cbz	r3, 8004484 <_fstat_r+0x1c>
 8004482:	602b      	str	r3, [r5, #0]
 8004484:	bd38      	pop	{r3, r4, r5, pc}
 8004486:	bf00      	nop
 8004488:	2000013c 	.word	0x2000013c

0800448c <_isatty_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4c06      	ldr	r4, [pc, #24]	; (80044a8 <_isatty_r+0x1c>)
 8004490:	2300      	movs	r3, #0
 8004492:	4605      	mov	r5, r0
 8004494:	4608      	mov	r0, r1
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	f7fc f8cb 	bl	8000632 <_isatty>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_isatty_r+0x1a>
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_isatty_r+0x1a>
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	2000013c 	.word	0x2000013c

080044ac <_lseek_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4c07      	ldr	r4, [pc, #28]	; (80044cc <_lseek_r+0x20>)
 80044b0:	4605      	mov	r5, r0
 80044b2:	4608      	mov	r0, r1
 80044b4:	4611      	mov	r1, r2
 80044b6:	2200      	movs	r2, #0
 80044b8:	6022      	str	r2, [r4, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7fc f8c4 	bl	8000648 <_lseek>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d102      	bne.n	80044ca <_lseek_r+0x1e>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	b103      	cbz	r3, 80044ca <_lseek_r+0x1e>
 80044c8:	602b      	str	r3, [r5, #0]
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	2000013c 	.word	0x2000013c

080044d0 <__malloc_lock>:
 80044d0:	4770      	bx	lr

080044d2 <__malloc_unlock>:
 80044d2:	4770      	bx	lr

080044d4 <_read_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4c07      	ldr	r4, [pc, #28]	; (80044f4 <_read_r+0x20>)
 80044d8:	4605      	mov	r5, r0
 80044da:	4608      	mov	r0, r1
 80044dc:	4611      	mov	r1, r2
 80044de:	2200      	movs	r2, #0
 80044e0:	6022      	str	r2, [r4, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	f7fc f850 	bl	8000588 <_read>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_read_r+0x1e>
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_read_r+0x1e>
 80044f0:	602b      	str	r3, [r5, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	2000013c 	.word	0x2000013c

080044f8 <_init>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr

08004504 <_fini>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr
