
Mecanum_wheel_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fec  08005fec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005fec  08005fec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fec  08005fec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fec  08005fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000070  08006064  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08006064  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010151  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002585  00000000  00000000  000301f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df0  00000000  00000000  00032778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  00033568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ed70  00000000  00000000  00034220  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cdc9  00000000  00000000  00052f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1075  00000000  00000000  0005fd59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110dce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f8  00000000  00000000  00110e4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ecc 	.word	0x08005ecc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005ecc 	.word	0x08005ecc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b40      	ldr	r3, [pc, #256]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a3f      	ldr	r2, [pc, #252]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9a:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a39      	ldr	r2, [pc, #228]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aa4:	6153      	str	r3, [r2, #20]
 8000aa6:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	4a33      	ldr	r2, [pc, #204]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	6153      	str	r3, [r2, #20]
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a2d      	ldr	r2, [pc, #180]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad4:	6153      	str	r3, [r2, #20]
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Z_DIR_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f001 fb46 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin|Z_STEP_Pin 
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8000af6:	4824      	ldr	r0, [pc, #144]	; (8000b88 <MX_GPIO_Init+0x11c>)
 8000af8:	f001 fb40 	bl	800217c <HAL_GPIO_WritePin>
                          |A_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_STEP_GPIO_Port, A_STEP_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	4822      	ldr	r0, [pc, #136]	; (8000b8c <MX_GPIO_Init+0x120>)
 8000b02:	f001 fb3b 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0c:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <MX_GPIO_Init+0x124>)
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	481c      	ldr	r0, [pc, #112]	; (8000b8c <MX_GPIO_Init+0x120>)
 8000b1c:	f001 f9a4 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Z_DIR_Pin|X_STEP_Pin;
 8000b20:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f001 f994 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin|Z_STEP_Pin 
 8000b40:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000b44:	617b      	str	r3, [r7, #20]
                          |A_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <MX_GPIO_Init+0x11c>)
 8000b5a:	f001 f985 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A_STEP_Pin;
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A_STEP_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_GPIO_Init+0x120>)
 8000b76:	f001 f977 	bl	8001e68 <HAL_GPIO_Init>

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000
 8000b88:	48000400 	.word	0x48000400
 8000b8c:	48000800 	.word	0x48000800
 8000b90:	10210000 	.word	0x10210000

08000b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b98:	f000 ff8e 	bl	8001ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9c:	f000 f844 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba0:	f7ff ff64 	bl	8000a6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ba4:	f000 fe06 	bl	80017b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ba8:	f000 fbc6 	bl	8001338 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bac:	f000 fc12 	bl	80013d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bb0:	f000 fc60 	bl	8001474 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000bb4:	f000 fcae 	bl	8001514 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000bb8:	f000 fdcc 	bl	8001754 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart2, &incoming_byte, 1);
  HAL_UART_Receive_IT(&huart1, &incoming_byte, 1);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4912      	ldr	r1, [pc, #72]	; (8000c08 <main+0x74>)
 8000bc0:	4812      	ldr	r0, [pc, #72]	; (8000c0c <main+0x78>)
 8000bc2:	f003 fb91 	bl	80042e8 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000bc6:	4812      	ldr	r0, [pc, #72]	; (8000c10 <main+0x7c>)
 8000bc8:	f002 fea0 	bl	800390c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000bcc:	4811      	ldr	r0, [pc, #68]	; (8000c14 <main+0x80>)
 8000bce:	f002 fe9d 	bl	800390c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000bd2:	4811      	ldr	r0, [pc, #68]	; (8000c18 <main+0x84>)
 8000bd4:	f002 fe9a 	bl	800390c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000bd8:	4810      	ldr	r0, [pc, #64]	; (8000c1c <main+0x88>)
 8000bda:	f002 fe97 	bl	800390c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("goal position x = %d, y = %d, fi = %d\n", goal_pos[0], goal_pos[1], goal_pos[2]);
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <main+0x8c>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	4619      	mov	r1, r3
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <main+0x8c>)
 8000be8:	885b      	ldrh	r3, [r3, #2]
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <main+0x8c>)
 8000bf0:	889b      	ldrh	r3, [r3, #4]
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <main+0x90>)
 8000bf6:	f004 fa21 	bl	800503c <iprintf>
	  control_loop();
 8000bfa:	f000 f87d 	bl	8000cf8 <control_loop>
	  HAL_Delay(100);
 8000bfe:	2064      	movs	r0, #100	; 0x64
 8000c00:	f000 ffc0 	bl	8001b84 <HAL_Delay>
	  printf("goal position x = %d, y = %d, fi = %d\n", goal_pos[0], goal_pos[1], goal_pos[2]);
 8000c04:	e7eb      	b.n	8000bde <main+0x4a>
 8000c06:	bf00      	nop
 8000c08:	200000b4 	.word	0x200000b4
 8000c0c:	200001c0 	.word	0x200001c0
 8000c10:	20000180 	.word	0x20000180
 8000c14:	20000140 	.word	0x20000140
 8000c18:	20000100 	.word	0x20000100
 8000c1c:	200000c0 	.word	0x200000c0
 8000c20:	200000b8 	.word	0x200000b8
 8000c24:	08005ee4 	.word	0x08005ee4

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0a6      	sub	sp, #152	; 0x98
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c32:	2228      	movs	r2, #40	; 0x28
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 f9f8 	bl	800502c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2258      	movs	r2, #88	; 0x58
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 f9ea 	bl	800502c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c60:	2310      	movs	r3, #16
 8000c62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c74:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 faaa 	bl	80021e0 <HAL_RCC_OscConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c92:	f000 fa0c 	bl	80010ae <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c96:	230f      	movs	r3, #15
 8000c98:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 f9aa 	bl	800300c <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cbe:	f000 f9f6 	bl	80010ae <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <SystemClock_Config+0xcc>)
 8000cc4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 fbcb 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ce8:	f000 f9e1 	bl	80010ae <Error_Handler>
  }
}
 8000cec:	bf00      	nop
 8000cee:	3798      	adds	r7, #152	; 0x98
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	00302003 	.word	0x00302003

08000cf8 <control_loop>:

/* USER CODE BEGIN 4 */
void control_loop()
{
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	// calculate speed for each wheel
	x_vel = goal_pos[0] - 100;
 8000cfc:	4b84      	ldr	r3, [pc, #528]	; (8000f10 <control_loop+0x218>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	3b64      	subs	r3, #100	; 0x64
 8000d04:	4a83      	ldr	r2, [pc, #524]	; (8000f14 <control_loop+0x21c>)
 8000d06:	6013      	str	r3, [r2, #0]
	y_vel = goal_pos[1] - 100;
 8000d08:	4b81      	ldr	r3, [pc, #516]	; (8000f10 <control_loop+0x218>)
 8000d0a:	885b      	ldrh	r3, [r3, #2]
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	3b64      	subs	r3, #100	; 0x64
 8000d10:	4a81      	ldr	r2, [pc, #516]	; (8000f18 <control_loop+0x220>)
 8000d12:	6013      	str	r3, [r2, #0]
	fi_vel = goal_pos[2] - 100;
 8000d14:	4b7e      	ldr	r3, [pc, #504]	; (8000f10 <control_loop+0x218>)
 8000d16:	889b      	ldrh	r3, [r3, #4]
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	3b64      	subs	r3, #100	; 0x64
 8000d1c:	4a7f      	ldr	r2, [pc, #508]	; (8000f1c <control_loop+0x224>)
 8000d1e:	6013      	str	r3, [r2, #0]
	vx = (x_vel - y_vel - (L + D)*fi_vel)*SPEED; //forward left v1
 8000d20:	4b7c      	ldr	r3, [pc, #496]	; (8000f14 <control_loop+0x21c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b7c      	ldr	r3, [pc, #496]	; (8000f18 <control_loop+0x220>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fbfa 	bl	8000524 <__aeabi_i2d>
 8000d30:	4604      	mov	r4, r0
 8000d32:	460d      	mov	r5, r1
 8000d34:	4b79      	ldr	r3, [pc, #484]	; (8000f1c <control_loop+0x224>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fbf3 	bl	8000524 <__aeabi_i2d>
 8000d3e:	a370      	add	r3, pc, #448	; (adr r3, 8000f00 <control_loop+0x208>)
 8000d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d44:	f7ff fc58 	bl	80005f8 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	4629      	mov	r1, r5
 8000d50:	f7ff fa9a 	bl	8000288 <__aeabi_dsub>
 8000d54:	4603      	mov	r3, r0
 8000d56:	460c      	mov	r4, r1
 8000d58:	4618      	mov	r0, r3
 8000d5a:	4621      	mov	r1, r4
 8000d5c:	a36a      	add	r3, pc, #424	; (adr r3, 8000f08 <control_loop+0x210>)
 8000d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d62:	f7ff fc49 	bl	80005f8 <__aeabi_dmul>
 8000d66:	4603      	mov	r3, r0
 8000d68:	460c      	mov	r4, r1
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	f7ff fe55 	bl	8000a1c <__aeabi_d2iz>
 8000d72:	4602      	mov	r2, r0
 8000d74:	4b6a      	ldr	r3, [pc, #424]	; (8000f20 <control_loop+0x228>)
 8000d76:	601a      	str	r2, [r3, #0]
	vy = (x_vel + y_vel - (L + D)*fi_vel)*SPEED; //back left v2
 8000d78:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <control_loop+0x21c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b66      	ldr	r3, [pc, #408]	; (8000f18 <control_loop+0x220>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4413      	add	r3, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fbce 	bl	8000524 <__aeabi_i2d>
 8000d88:	4604      	mov	r4, r0
 8000d8a:	460d      	mov	r5, r1
 8000d8c:	4b63      	ldr	r3, [pc, #396]	; (8000f1c <control_loop+0x224>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fbc7 	bl	8000524 <__aeabi_i2d>
 8000d96:	a35a      	add	r3, pc, #360	; (adr r3, 8000f00 <control_loop+0x208>)
 8000d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9c:	f7ff fc2c 	bl	80005f8 <__aeabi_dmul>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4620      	mov	r0, r4
 8000da6:	4629      	mov	r1, r5
 8000da8:	f7ff fa6e 	bl	8000288 <__aeabi_dsub>
 8000dac:	4603      	mov	r3, r0
 8000dae:	460c      	mov	r4, r1
 8000db0:	4618      	mov	r0, r3
 8000db2:	4621      	mov	r1, r4
 8000db4:	a354      	add	r3, pc, #336	; (adr r3, 8000f08 <control_loop+0x210>)
 8000db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dba:	f7ff fc1d 	bl	80005f8 <__aeabi_dmul>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	460c      	mov	r4, r1
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	4621      	mov	r1, r4
 8000dc6:	f7ff fe29 	bl	8000a1c <__aeabi_d2iz>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	4b55      	ldr	r3, [pc, #340]	; (8000f24 <control_loop+0x22c>)
 8000dce:	601a      	str	r2, [r3, #0]
	va = (x_vel - y_vel + (L + D)*fi_vel)*SPEED; //back right v3
 8000dd0:	4b50      	ldr	r3, [pc, #320]	; (8000f14 <control_loop+0x21c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b50      	ldr	r3, [pc, #320]	; (8000f18 <control_loop+0x220>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fba2 	bl	8000524 <__aeabi_i2d>
 8000de0:	4604      	mov	r4, r0
 8000de2:	460d      	mov	r5, r1
 8000de4:	4b4d      	ldr	r3, [pc, #308]	; (8000f1c <control_loop+0x224>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fb9b 	bl	8000524 <__aeabi_i2d>
 8000dee:	a344      	add	r3, pc, #272	; (adr r3, 8000f00 <control_loop+0x208>)
 8000df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df4:	f7ff fc00 	bl	80005f8 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	4629      	mov	r1, r5
 8000e00:	f7ff fa44 	bl	800028c <__adddf3>
 8000e04:	4603      	mov	r3, r0
 8000e06:	460c      	mov	r4, r1
 8000e08:	4618      	mov	r0, r3
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	a33e      	add	r3, pc, #248	; (adr r3, 8000f08 <control_loop+0x210>)
 8000e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e12:	f7ff fbf1 	bl	80005f8 <__aeabi_dmul>
 8000e16:	4603      	mov	r3, r0
 8000e18:	460c      	mov	r4, r1
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	4621      	mov	r1, r4
 8000e1e:	f7ff fdfd 	bl	8000a1c <__aeabi_d2iz>
 8000e22:	4602      	mov	r2, r0
 8000e24:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <control_loop+0x230>)
 8000e26:	601a      	str	r2, [r3, #0]
	vz = (x_vel + y_vel + (L + D)*fi_vel)*SPEED; //forward right v4
 8000e28:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <control_loop+0x21c>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b3a      	ldr	r3, [pc, #232]	; (8000f18 <control_loop+0x220>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb76 	bl	8000524 <__aeabi_i2d>
 8000e38:	4604      	mov	r4, r0
 8000e3a:	460d      	mov	r5, r1
 8000e3c:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <control_loop+0x224>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fb6f 	bl	8000524 <__aeabi_i2d>
 8000e46:	a32e      	add	r3, pc, #184	; (adr r3, 8000f00 <control_loop+0x208>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fbd4 	bl	80005f8 <__aeabi_dmul>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4620      	mov	r0, r4
 8000e56:	4629      	mov	r1, r5
 8000e58:	f7ff fa18 	bl	800028c <__adddf3>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	460c      	mov	r4, r1
 8000e60:	4618      	mov	r0, r3
 8000e62:	4621      	mov	r1, r4
 8000e64:	a328      	add	r3, pc, #160	; (adr r3, 8000f08 <control_loop+0x210>)
 8000e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6a:	f7ff fbc5 	bl	80005f8 <__aeabi_dmul>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460c      	mov	r4, r1
 8000e72:	4618      	mov	r0, r3
 8000e74:	4621      	mov	r1, r4
 8000e76:	f7ff fdd1 	bl	8000a1c <__aeabi_d2iz>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <control_loop+0x234>)
 8000e7e:	601a      	str	r2, [r3, #0]
	// set direction for each wheel
	if(vx < 0)
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <control_loop+0x228>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	da05      	bge.n	8000e94 <control_loop+0x19c>
		HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	4828      	ldr	r0, [pc, #160]	; (8000f30 <control_loop+0x238>)
 8000e8e:	f001 f975 	bl	800217c <HAL_GPIO_WritePin>
 8000e92:	e004      	b.n	8000e9e <control_loop+0x1a6>
	else
		HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2110      	movs	r1, #16
 8000e98:	4825      	ldr	r0, [pc, #148]	; (8000f30 <control_loop+0x238>)
 8000e9a:	f001 f96f 	bl	800217c <HAL_GPIO_WritePin>
	if(vy < 0)
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <control_loop+0x22c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	da06      	bge.n	8000eb4 <control_loop+0x1bc>
		HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eac:	4820      	ldr	r0, [pc, #128]	; (8000f30 <control_loop+0x238>)
 8000eae:	f001 f965 	bl	800217c <HAL_GPIO_WritePin>
 8000eb2:	e005      	b.n	8000ec0 <control_loop+0x1c8>
	else
		HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eba:	481d      	ldr	r0, [pc, #116]	; (8000f30 <control_loop+0x238>)
 8000ebc:	f001 f95e 	bl	800217c <HAL_GPIO_WritePin>
	if(vz > 0)
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <control_loop+0x234>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dd07      	ble.n	8000ed8 <control_loop+0x1e0>
		HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f001 f953 	bl	800217c <HAL_GPIO_WritePin>
 8000ed6:	e006      	b.n	8000ee6 <control_loop+0x1ee>
	else
		HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f001 f94b 	bl	800217c <HAL_GPIO_WritePin>
	if(va > 0)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <control_loop+0x230>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	dd22      	ble.n	8000f34 <control_loop+0x23c>
		HAL_GPIO_WritePin(A_DIR_GPIO_Port, A_DIR_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2140      	movs	r1, #64	; 0x40
 8000ef2:	480f      	ldr	r0, [pc, #60]	; (8000f30 <control_loop+0x238>)
 8000ef4:	f001 f942 	bl	800217c <HAL_GPIO_WritePin>
 8000ef8:	e021      	b.n	8000f3e <control_loop+0x246>
 8000efa:	bf00      	nop
 8000efc:	f3af 8000 	nop.w
 8000f00:	9999999a 	.word	0x9999999a
 8000f04:	3fd99999 	.word	0x3fd99999
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	4062c000 	.word	0x4062c000
 8000f10:	200000b8 	.word	0x200000b8
 8000f14:	200000b0 	.word	0x200000b0
 8000f18:	2000009c 	.word	0x2000009c
 8000f1c:	200000a8 	.word	0x200000a8
 8000f20:	200000a0 	.word	0x200000a0
 8000f24:	200000ac 	.word	0x200000ac
 8000f28:	200000a4 	.word	0x200000a4
 8000f2c:	20000098 	.word	0x20000098
 8000f30:	48000400 	.word	0x48000400
	else
		HAL_GPIO_WritePin(A_DIR_GPIO_Port, A_DIR_Pin, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2140      	movs	r1, #64	; 0x40
 8000f38:	4845      	ldr	r0, [pc, #276]	; (8001050 <control_loop+0x358>)
 8000f3a:	f001 f91f 	bl	800217c <HAL_GPIO_WritePin>
	// set interrupts
	vx = abs(vx);
 8000f3e:	4b45      	ldr	r3, [pc, #276]	; (8001054 <control_loop+0x35c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bfb8      	it	lt
 8000f46:	425b      	neglt	r3, r3
 8000f48:	4a42      	ldr	r2, [pc, #264]	; (8001054 <control_loop+0x35c>)
 8000f4a:	6013      	str	r3, [r2, #0]
	if (vx != 0)
 8000f4c:	4b41      	ldr	r3, [pc, #260]	; (8001054 <control_loop+0x35c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d016      	beq.n	8000f82 <control_loop+0x28a>
		TIM2->ARR = constraint(SystemCoreClock/(vx*(TIM2->PSC + 1)) - 1, 1, MAX);
 8000f54:	4b40      	ldr	r3, [pc, #256]	; (8001058 <control_loop+0x360>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	3301      	adds	r3, #1
 8000f60:	493c      	ldr	r1, [pc, #240]	; (8001054 <control_loop+0x35c>)
 8000f62:	6809      	ldr	r1, [r1, #0]
 8000f64:	fb01 f303 	mul.w	r3, r1, r3
 8000f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f72:	2101      	movs	r1, #1
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f881 	bl	800107c <constraint>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
	vy = abs(vy);
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <control_loop+0x364>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bfb8      	it	lt
 8000f8a:	425b      	neglt	r3, r3
 8000f8c:	4a33      	ldr	r2, [pc, #204]	; (800105c <control_loop+0x364>)
 8000f8e:	6013      	str	r3, [r2, #0]
	if (vy != 0)
 8000f90:	4b32      	ldr	r3, [pc, #200]	; (800105c <control_loop+0x364>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d014      	beq.n	8000fc2 <control_loop+0x2ca>
		TIM3->ARR = constraint(SystemCoreClock/(vy*(TIM3->PSC + 1)) - 1, 1, MAX);
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <control_loop+0x360>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <control_loop+0x368>)
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	492e      	ldr	r1, [pc, #184]	; (800105c <control_loop+0x364>)
 8000fa4:	6809      	ldr	r1, [r1, #0]
 8000fa6:	fb01 f303 	mul.w	r3, r1, r3
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f860 	bl	800107c <constraint>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <control_loop+0x368>)
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
	vz = abs(vz);
 8000fc2:	4b28      	ldr	r3, [pc, #160]	; (8001064 <control_loop+0x36c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bfb8      	it	lt
 8000fca:	425b      	neglt	r3, r3
 8000fcc:	4a25      	ldr	r2, [pc, #148]	; (8001064 <control_loop+0x36c>)
 8000fce:	6013      	str	r3, [r2, #0]
	if (vz != 0)
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <control_loop+0x36c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d014      	beq.n	8001002 <control_loop+0x30a>
		TIM4->ARR = constraint(SystemCoreClock/(vz*(TIM4->PSC + 1)) - 1, 1, MAX);
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <control_loop+0x360>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <control_loop+0x370>)
 8000fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	4920      	ldr	r1, [pc, #128]	; (8001064 <control_loop+0x36c>)
 8000fe4:	6809      	ldr	r1, [r1, #0]
 8000fe6:	fb01 f303 	mul.w	r3, r1, r3
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f840 	bl	800107c <constraint>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <control_loop+0x370>)
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
	va = abs(va);
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <control_loop+0x374>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	bfb8      	it	lt
 800100a:	425b      	neglt	r3, r3
 800100c:	4a17      	ldr	r2, [pc, #92]	; (800106c <control_loop+0x374>)
 800100e:	6013      	str	r3, [r2, #0]
	if (va != 0)
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <control_loop+0x374>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d014      	beq.n	8001042 <control_loop+0x34a>
		TIM8->ARR = constraint(SystemCoreClock/(va*(TIM8->PSC + 1)) - 1, 1, MAX);
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <control_loop+0x360>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <control_loop+0x378>)
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	3301      	adds	r3, #1
 8001022:	4912      	ldr	r1, [pc, #72]	; (800106c <control_loop+0x374>)
 8001024:	6809      	ldr	r1, [r1, #0]
 8001026:	fb01 f303 	mul.w	r3, r1, r3
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	3b01      	subs	r3, #1
 8001030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001034:	2101      	movs	r1, #1
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f820 	bl	800107c <constraint>
 800103c:	4602      	mov	r2, r0
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <control_loop+0x378>)
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c

//	HAL_UART_Receive_IT(&huart2, &incoming_byte, 1);
	HAL_UART_Receive_IT(&huart1, &incoming_byte, 1);
 8001042:	2201      	movs	r2, #1
 8001044:	490b      	ldr	r1, [pc, #44]	; (8001074 <control_loop+0x37c>)
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <control_loop+0x380>)
 8001048:	f003 f94e 	bl	80042e8 <HAL_UART_Receive_IT>

}
 800104c:	bf00      	nop
 800104e:	bdb0      	pop	{r4, r5, r7, pc}
 8001050:	48000400 	.word	0x48000400
 8001054:	200000a0 	.word	0x200000a0
 8001058:	20000000 	.word	0x20000000
 800105c:	200000ac 	.word	0x200000ac
 8001060:	40000400 	.word	0x40000400
 8001064:	20000098 	.word	0x20000098
 8001068:	40000800 	.word	0x40000800
 800106c:	200000a4 	.word	0x200000a4
 8001070:	40013400 	.word	0x40013400
 8001074:	200000b4 	.word	0x200000b4
 8001078:	200001c0 	.word	0x200001c0

0800107c <constraint>:

int constraint(int32_t var, int bottom_lim, int upper_lim)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	if(var > upper_lim)
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dd01      	ble.n	8001094 <constraint+0x18>
		return upper_lim;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	e006      	b.n	80010a2 <constraint+0x26>
	else if(var < bottom_lim)
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	429a      	cmp	r2, r3
 800109a:	da01      	bge.n	80010a0 <constraint+0x24>
		return bottom_lim;
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	e000      	b.n	80010a2 <constraint+0x26>
	else
		return var;
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x44>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_MspInit+0x44>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6193      	str	r3, [r2, #24]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_MspInit+0x44>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x44>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x44>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x44>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010f2:	2007      	movs	r0, #7
 80010f4:	f000 fe38 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 fcf4 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <TIM2_IRQHandler+0x10>)
 8001166:	f002 fbfb 	bl	8003960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000180 	.word	0x20000180

08001174 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <TIM3_IRQHandler+0x10>)
 800117a:	f002 fbf1 	bl	8003960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000140 	.word	0x20000140

08001188 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <TIM4_IRQHandler+0x10>)
 800118e:	f002 fbe7 	bl	8003960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000100 	.word	0x20000100

0800119c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <USART1_IRQHandler+0x10>)
 80011a2:	f003 f943 	bl	800442c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200001c0 	.word	0x200001c0

080011b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <USART2_IRQHandler+0x10>)
 80011b6:	f003 f939 	bl	800442c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000240 	.word	0x20000240

080011c4 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <TIM8_UP_IRQHandler+0x10>)
 80011ca:	f002 fbc9 	bl	8003960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000c0 	.word	0x200000c0

080011d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	e00a      	b.n	8001200 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ea:	f3af 8000 	nop.w
 80011ee:	4601      	mov	r1, r0
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	60ba      	str	r2, [r7, #8]
 80011f6:	b2ca      	uxtb	r2, r1
 80011f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	429a      	cmp	r2, r3
 8001206:	dbf0      	blt.n	80011ea <_read+0x12>
	}

return len;
 8001208:	687b      	ldr	r3, [r7, #4]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e009      	b.n	8001238 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	60ba      	str	r2, [r7, #8]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fb87 	bl	8001940 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3301      	adds	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	429a      	cmp	r2, r3
 800123e:	dbf1      	blt.n	8001224 <_write+0x12>
	}
	return len;
 8001240:	687b      	ldr	r3, [r7, #4]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <_close>:

int _close(int file)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
	return -1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001272:	605a      	str	r2, [r3, #4]
	return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <_isatty>:

int _isatty(int file)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
	return 1;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
	return 0;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_sbrk+0x50>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <_sbrk+0x16>
		heap_end = &end;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <_sbrk+0x50>)
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <_sbrk+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <_sbrk+0x50>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <_sbrk+0x50>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	466a      	mov	r2, sp
 80012da:	4293      	cmp	r3, r2
 80012dc:	d907      	bls.n	80012ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012de:	f003 fe7b 	bl	8004fd8 <__errno>
 80012e2:	4602      	mov	r2, r0
 80012e4:	230c      	movs	r3, #12
 80012e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	e006      	b.n	80012fc <_sbrk+0x48>
	}

	heap_end += incr;
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <_sbrk+0x50>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a03      	ldr	r2, [pc, #12]	; (8001304 <_sbrk+0x50>)
 80012f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000008c 	.word	0x2000008c
 8001308:	200002c8 	.word	0x200002c8

0800130c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <SystemInit+0x28>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <SystemInit+0x28>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SystemInit+0x28>)
 8001322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001326:	609a      	str	r2, [r3, #8]
#endif
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_TIM2_Init+0x98>)
 8001358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1799;//htim2.Init.Prescaler = 3599;
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_TIM2_Init+0x98>)
 8001360:	f240 7207 	movw	r2, #1799	; 0x707
 8001364:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_TIM2_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_TIM2_Init+0x98>)
 800136e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001372:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_TIM2_Init+0x98>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_TIM2_Init+0x98>)
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001380:	4813      	ldr	r0, [pc, #76]	; (80013d0 <MX_TIM2_Init+0x98>)
 8001382:	f002 fa97 	bl	80038b4 <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800138c:	f7ff fe8f 	bl	80010ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <MX_TIM2_Init+0x98>)
 800139e:	f002 fbfe 	bl	8003b9e <HAL_TIM_ConfigClockSource>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80013a8:	f7ff fe81 	bl	80010ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_TIM2_Init+0x98>)
 80013ba:	f002 fe09 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80013c4:	f7ff fe73 	bl	80010ae <Error_Handler>
  }

}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000180 	.word	0x20000180

080013d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_TIM3_Init+0x98>)
 80013f4:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <MX_TIM3_Init+0x9c>)
 80013f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1799;// htim3.Init.Prescaler = 3599;
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_TIM3_Init+0x98>)
 80013fa:	f240 7207 	movw	r2, #1799	; 0x707
 80013fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_TIM3_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_TIM3_Init+0x98>)
 8001408:	f242 720f 	movw	r2, #9999	; 0x270f
 800140c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_TIM3_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_TIM3_Init+0x98>)
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800141a:	4814      	ldr	r0, [pc, #80]	; (800146c <MX_TIM3_Init+0x98>)
 800141c:	f002 fa4a 	bl	80038b4 <HAL_TIM_Base_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001426:	f7ff fe42 	bl	80010ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_TIM3_Init+0x98>)
 8001438:	f002 fbb1 	bl	8003b9e <HAL_TIM_ConfigClockSource>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001442:	f7ff fe34 	bl	80010ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <MX_TIM3_Init+0x98>)
 8001454:	f002 fdbc 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800145e:	f7ff fe26 	bl	80010ae <Error_Handler>
  }

}
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000140 	.word	0x20000140
 8001470:	40000400 	.word	0x40000400

08001474 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_TIM4_Init+0x98>)
 8001494:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <MX_TIM4_Init+0x9c>)
 8001496:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1799;// htim4.Init.Prescaler = 3599;
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <MX_TIM4_Init+0x98>)
 800149a:	f240 7207 	movw	r2, #1799	; 0x707
 800149e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_TIM4_Init+0x98>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <MX_TIM4_Init+0x98>)
 80014a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80014ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_TIM4_Init+0x98>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_TIM4_Init+0x98>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014ba:	4814      	ldr	r0, [pc, #80]	; (800150c <MX_TIM4_Init+0x98>)
 80014bc:	f002 f9fa 	bl	80038b4 <HAL_TIM_Base_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80014c6:	f7ff fdf2 	bl	80010ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4619      	mov	r1, r3
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_TIM4_Init+0x98>)
 80014d8:	f002 fb61 	bl	8003b9e <HAL_TIM_ConfigClockSource>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80014e2:	f7ff fde4 	bl	80010ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_TIM4_Init+0x98>)
 80014f4:	f002 fd6c 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80014fe:	f7ff fdd6 	bl	80010ae <Error_Handler>
  }

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000100 	.word	0x20000100
 8001510:	40000800 	.word	0x40000800

08001514 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]

  htim8.Instance = TIM8;
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <MX_TIM8_Init+0xa0>)
 8001534:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <MX_TIM8_Init+0xa4>)
 8001536:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1799;// htim8.Init.Prescaler = 3599;
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <MX_TIM8_Init+0xa0>)
 800153a:	f240 7207 	movw	r2, #1799	; 0x707
 800153e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_TIM8_Init+0xa0>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <MX_TIM8_Init+0xa0>)
 8001548:	f242 720f 	movw	r2, #9999	; 0x270f
 800154c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_TIM8_Init+0xa0>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_TIM8_Init+0xa0>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_TIM8_Init+0xa0>)
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001560:	4814      	ldr	r0, [pc, #80]	; (80015b4 <MX_TIM8_Init+0xa0>)
 8001562:	f002 f9a7 	bl	80038b4 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 800156c:	f7ff fd9f 	bl	80010ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4619      	mov	r1, r3
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_TIM8_Init+0xa0>)
 800157e:	f002 fb0e 	bl	8003b9e <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001588:	f7ff fd91 	bl	80010ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_TIM8_Init+0xa0>)
 800159e:	f002 fd17 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80015a8:	f7ff fd81 	bl	80010ae <Error_Handler>
  }

}
 80015ac:	bf00      	nop
 80015ae:	3720      	adds	r7, #32
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200000c0 	.word	0x200000c0
 80015b8:	40013400 	.word	0x40013400

080015bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015cc:	d114      	bne.n	80015f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_TIM_Base_MspInit+0xe0>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a32      	ldr	r2, [pc, #200]	; (800169c <HAL_TIM_Base_MspInit+0xe0>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b30      	ldr	r3, [pc, #192]	; (800169c <HAL_TIM_Base_MspInit+0xe0>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	201c      	movs	r0, #28
 80015ec:	f000 fbc7 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015f0:	201c      	movs	r0, #28
 80015f2:	f000 fbe0 	bl	8001db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80015f6:	e04c      	b.n	8001692 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a28      	ldr	r2, [pc, #160]	; (80016a0 <HAL_TIM_Base_MspInit+0xe4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d114      	bne.n	800162c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_TIM_Base_MspInit+0xe0>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a25      	ldr	r2, [pc, #148]	; (800169c <HAL_TIM_Base_MspInit+0xe0>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <HAL_TIM_Base_MspInit+0xe0>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	201d      	movs	r0, #29
 8001620:	f000 fbad 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001624:	201d      	movs	r0, #29
 8001626:	f000 fbc6 	bl	8001db6 <HAL_NVIC_EnableIRQ>
}
 800162a:	e032      	b.n	8001692 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <HAL_TIM_Base_MspInit+0xe8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d114      	bne.n	8001660 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_TIM_Base_MspInit+0xe0>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a18      	ldr	r2, [pc, #96]	; (800169c <HAL_TIM_Base_MspInit+0xe0>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	61d3      	str	r3, [r2, #28]
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_TIM_Base_MspInit+0xe0>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	201e      	movs	r0, #30
 8001654:	f000 fb93 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001658:	201e      	movs	r0, #30
 800165a:	f000 fbac 	bl	8001db6 <HAL_NVIC_EnableIRQ>
}
 800165e:	e018      	b.n	8001692 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM8)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a10      	ldr	r2, [pc, #64]	; (80016a8 <HAL_TIM_Base_MspInit+0xec>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d113      	bne.n	8001692 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_TIM_Base_MspInit+0xe0>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_TIM_Base_MspInit+0xe0>)
 8001670:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001674:	6193      	str	r3, [r2, #24]
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_TIM_Base_MspInit+0xe0>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	202c      	movs	r0, #44	; 0x2c
 8001688:	f000 fb79 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 800168c:	202c      	movs	r0, #44	; 0x2c
 800168e:	f000 fb92 	bl	8001db6 <HAL_NVIC_EnableIRQ>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000
 80016a0:	40000400 	.word	0x40000400
 80016a4:	40000800 	.word	0x40000800
 80016a8:	40013400 	.word	0x40013400

080016ac <HAL_TIM_PeriodElapsedCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016bc:	d10a      	bne.n	80016d4 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		if(vx != 0)
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d02f      	beq.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x7a>
			HAL_GPIO_TogglePin(X_STEP_GPIO_Port, X_STEP_Pin);
 80016c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ce:	f000 fd6d 	bl	80021ac <HAL_GPIO_TogglePin>
		if(va != 0)
			HAL_GPIO_TogglePin(A_STEP_GPIO_Port, A_STEP_Pin);
	}


}
 80016d2:	e028      	b.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x7a>
	else if(htim->Instance == TIM3)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a16      	ldr	r2, [pc, #88]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d108      	bne.n	80016f0 <HAL_TIM_PeriodElapsedCallback+0x44>
		if(vy != 0)
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d01f      	beq.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x7a>
			HAL_GPIO_TogglePin(Y_STEP_GPIO_Port, Y_STEP_Pin);
 80016e6:	2108      	movs	r1, #8
 80016e8:	4814      	ldr	r0, [pc, #80]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016ea:	f000 fd5f 	bl	80021ac <HAL_GPIO_TogglePin>
}
 80016ee:	e01a      	b.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x7a>
	else if(htim->Instance == TIM4)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d108      	bne.n	800170c <HAL_TIM_PeriodElapsedCallback+0x60>
		if(vz != 0)
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d011      	beq.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x7a>
			HAL_GPIO_TogglePin(Z_STEP_GPIO_Port, Z_STEP_Pin);
 8001702:	2120      	movs	r1, #32
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001706:	f000 fd51 	bl	80021ac <HAL_GPIO_TogglePin>
}
 800170a:	e00c      	b.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x7a>
	else if(htim->Instance == TIM8)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d107      	bne.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x7a>
		if(va != 0)
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x7a>
			HAL_GPIO_TogglePin(A_STEP_GPIO_Port, A_STEP_Pin);
 800171e:	2180      	movs	r1, #128	; 0x80
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001722:	f000 fd43 	bl	80021ac <HAL_GPIO_TogglePin>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200000a0 	.word	0x200000a0
 8001734:	40000400 	.word	0x40000400
 8001738:	200000ac 	.word	0x200000ac
 800173c:	48000400 	.word	0x48000400
 8001740:	40000800 	.word	0x40000800
 8001744:	20000098 	.word	0x20000098
 8001748:	40013400 	.word	0x40013400
 800174c:	200000a4 	.word	0x200000a4
 8001750:	48000800 	.word	0x48000800

08001754 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_USART1_UART_Init+0x58>)
 800175a:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <MX_USART1_UART_Init+0x5c>)
 800175c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_USART1_UART_Init+0x58>)
 8001760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART1_UART_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_USART1_UART_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART1_UART_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART1_UART_Init+0x58>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART1_UART_Init+0x58>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART1_UART_Init+0x58>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART1_UART_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART1_UART_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART1_UART_Init+0x58>)
 8001798:	f002 fcc4 	bl	8004124 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017a2:	f7ff fc84 	bl	80010ae <Error_Handler>
  }

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200001c0 	.word	0x200001c0
 80017b0:	40013800 	.word	0x40013800

080017b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_USART2_UART_Init+0x58>)
 80017ba:	4a15      	ldr	r2, [pc, #84]	; (8001810 <MX_USART2_UART_Init+0x5c>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <MX_USART2_UART_Init+0x58>)
 80017c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_USART2_UART_Init+0x58>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_USART2_UART_Init+0x58>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_USART2_UART_Init+0x58>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_USART2_UART_Init+0x58>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_USART2_UART_Init+0x58>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_USART2_UART_Init+0x58>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_USART2_UART_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_USART2_UART_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_USART2_UART_Init+0x58>)
 80017f8:	f002 fc94 	bl	8004124 <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001802:	f7ff fc54 	bl	80010ae <Error_Handler>
  }

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000240 	.word	0x20000240
 8001810:	40004400 	.word	0x40004400

08001814 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	; 0x30
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a36      	ldr	r2, [pc, #216]	; (800190c <HAL_UART_MspInit+0xf8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d130      	bne.n	8001898 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001836:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_UART_MspInit+0xfc>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	4a35      	ldr	r2, [pc, #212]	; (8001910 <HAL_UART_MspInit+0xfc>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001840:	6193      	str	r3, [r2, #24]
 8001842:	4b33      	ldr	r3, [pc, #204]	; (8001910 <HAL_UART_MspInit+0xfc>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800184e:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_UART_MspInit+0xfc>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	4a2f      	ldr	r2, [pc, #188]	; (8001910 <HAL_UART_MspInit+0xfc>)
 8001854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001858:	6153      	str	r3, [r2, #20]
 800185a:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <HAL_UART_MspInit+0xfc>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001866:	2330      	movs	r3, #48	; 0x30
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001876:	2307      	movs	r3, #7
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	4619      	mov	r1, r3
 8001880:	4824      	ldr	r0, [pc, #144]	; (8001914 <HAL_UART_MspInit+0x100>)
 8001882:	f000 faf1 	bl	8001e68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2025      	movs	r0, #37	; 0x25
 800188c:	f000 fa77 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001890:	2025      	movs	r0, #37	; 0x25
 8001892:	f000 fa90 	bl	8001db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */
  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001896:	e035      	b.n	8001904 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <HAL_UART_MspInit+0x104>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d130      	bne.n	8001904 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_UART_MspInit+0xfc>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <HAL_UART_MspInit+0xfc>)
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_UART_MspInit+0xfc>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_UART_MspInit+0xfc>)
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	4a14      	ldr	r2, [pc, #80]	; (8001910 <HAL_UART_MspInit+0xfc>)
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c4:	6153      	str	r3, [r2, #20]
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_UART_MspInit+0xfc>)
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018d2:	230c      	movs	r3, #12
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e2:	2307      	movs	r3, #7
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f0:	f000 faba 	bl	8001e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2100      	movs	r1, #0
 80018f8:	2026      	movs	r0, #38	; 0x26
 80018fa:	f000 fa40 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018fe:	2026      	movs	r0, #38	; 0x26
 8001900:	f000 fa59 	bl	8001db6 <HAL_NVIC_EnableIRQ>
}
 8001904:	bf00      	nop
 8001906:	3730      	adds	r7, #48	; 0x30
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40013800 	.word	0x40013800
 8001910:	40021000 	.word	0x40021000
 8001914:	48000800 	.word	0x48000800
 8001918:	40004400 	.word	0x40004400

0800191c <send_char>:
  }
} 

/* USER CODE BEGIN 1 */
void send_char(char c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)&c, 1, 1000);
 8001926:	1df9      	adds	r1, r7, #7
 8001928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192c:	2201      	movs	r2, #1
 800192e:	4803      	ldr	r0, [pc, #12]	; (800193c <send_char+0x20>)
 8001930:	f002 fc46 	bl	80041c0 <HAL_UART_Transmit>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200001c0 	.word	0x200001c0

08001940 <__io_putchar>:

int __io_putchar(int c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	if(c == '\n')
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b0a      	cmp	r3, #10
 800194c:	d102      	bne.n	8001954 <__io_putchar+0x14>
		send_char('\r');
 800194e:	200d      	movs	r0, #13
 8001950:	f7ff ffe4 	bl	800191c <send_char>
	send_char(c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ffdf 	bl	800191c <send_char>
	return c;
 800195e:	687b      	ldr	r3, [r7, #4]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_UART_RxCpltCallback+0x28>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d106      	bne.n	8001988 <HAL_UART_RxCpltCallback+0x20>
	{
		pc_interface();
 800197a:	f000 f80f 	bl	800199c <pc_interface>
		HAL_UART_Receive_IT(&huart1, &incoming_byte, 1);
 800197e:	2201      	movs	r2, #1
 8001980:	4904      	ldr	r1, [pc, #16]	; (8001994 <HAL_UART_RxCpltCallback+0x2c>)
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <HAL_UART_RxCpltCallback+0x30>)
 8001984:	f002 fcb0 	bl	80042e8 <HAL_UART_Receive_IT>
//	if(huart->Instance == USART2)
//	{
//		pc_interface();
//		HAL_UART_Receive_IT(&huart2, &incoming_byte, 1);
//	}
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40013800 	.word	0x40013800
 8001994:	200000b4 	.word	0x200000b4
 8001998:	200001c0 	.word	0x200001c0

0800199c <pc_interface>:

void pc_interface()
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	incoming_byte = constraint(incoming_byte, 0, 255);
 80019a0:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <pc_interface+0xb8>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	22ff      	movs	r2, #255	; 0xff
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fb67 	bl	800107c <constraint>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <pc_interface+0xb8>)
 80019b4:	701a      	strb	r2, [r3, #0]
	if ((incoming_byte >= 48) && (incoming_byte <= 57))
 80019b6:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <pc_interface+0xb8>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b2f      	cmp	r3, #47	; 0x2f
 80019bc:	d918      	bls.n	80019f0 <pc_interface+0x54>
 80019be:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <pc_interface+0xb8>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b39      	cmp	r3, #57	; 0x39
 80019c4:	d814      	bhi.n	80019f0 <pc_interface+0x54>
		{
			incoming_byte -= 48;
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <pc_interface+0xb8>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	3b30      	subs	r3, #48	; 0x30
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <pc_interface+0xb8>)
 80019d0:	701a      	strb	r2, [r3, #0]
			buff = buff*10 + incoming_byte;
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <pc_interface+0xbc>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	4413      	add	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <pc_interface+0xb8>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <pc_interface+0xbc>)
 80019ec:	701a      	strb	r2, [r3, #0]
		else
		{
			printf("Incorrect input\n");
			buff = 0;
		}
}
 80019ee:	e02f      	b.n	8001a50 <pc_interface+0xb4>
		else if (incoming_byte == 'x')
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <pc_interface+0xb8>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b78      	cmp	r3, #120	; 0x78
 80019f6:	d109      	bne.n	8001a0c <pc_interface+0x70>
			goal_pos[0] = buff;
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <pc_interface+0xbc>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <pc_interface+0xc0>)
 8001a02:	801a      	strh	r2, [r3, #0]
			buff = 0;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <pc_interface+0xbc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
}
 8001a0a:	e021      	b.n	8001a50 <pc_interface+0xb4>
		else if (incoming_byte == 'y')
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <pc_interface+0xb8>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b79      	cmp	r3, #121	; 0x79
 8001a12:	d109      	bne.n	8001a28 <pc_interface+0x8c>
			goal_pos[1] = buff;
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <pc_interface+0xbc>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	b21a      	sxth	r2, r3
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <pc_interface+0xc0>)
 8001a1e:	805a      	strh	r2, [r3, #2]
			buff = 0;
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <pc_interface+0xbc>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
}
 8001a26:	e013      	b.n	8001a50 <pc_interface+0xb4>
		else if (incoming_byte == 'f')
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <pc_interface+0xb8>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b66      	cmp	r3, #102	; 0x66
 8001a2e:	d109      	bne.n	8001a44 <pc_interface+0xa8>
			goal_pos[2] = buff;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <pc_interface+0xbc>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <pc_interface+0xc0>)
 8001a3a:	809a      	strh	r2, [r3, #4]
			buff = 0;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <pc_interface+0xbc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
}
 8001a42:	e005      	b.n	8001a50 <pc_interface+0xb4>
			printf("Incorrect input\n");
 8001a44:	4806      	ldr	r0, [pc, #24]	; (8001a60 <pc_interface+0xc4>)
 8001a46:	f003 fb6d 	bl	8005124 <puts>
			buff = 0;
 8001a4a:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <pc_interface+0xbc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200000b4 	.word	0x200000b4
 8001a58:	200000b5 	.word	0x200000b5
 8001a5c:	200000b8 	.word	0x200000b8
 8001a60:	08005f0c 	.word	0x08005f0c

08001a64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a9c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a6a:	e003      	b.n	8001a74 <LoopCopyDataInit>

08001a6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a72:	3104      	adds	r1, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a74:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a7c:	d3f6      	bcc.n	8001a6c <CopyDataInit>
	ldr	r2, =_sbss
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a80:	e002      	b.n	8001a88 <LoopFillZerobss>

08001a82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a84:	f842 3b04 	str.w	r3, [r2], #4

08001a88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <LoopForever+0x16>)
	cmp	r2, r3
 8001a8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a8c:	d3f9      	bcc.n	8001a82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a8e:	f7ff fc3d 	bl	800130c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a92:	f003 faa7 	bl	8004fe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a96:	f7ff f87d 	bl	8000b94 <main>

08001a9a <LoopForever>:

LoopForever:
    b LoopForever
 8001a9a:	e7fe      	b.n	8001a9a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a9c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001aa0:	08005ff4 	.word	0x08005ff4
	ldr	r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001aa8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001aac:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001ab0:	200002c8 	.word	0x200002c8

08001ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC1_2_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_Init+0x28>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_Init+0x28>)
 8001ac2:	f043 0310 	orr.w	r3, r3, #16
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 f94d 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f808 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7ff faf2 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x54>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x58>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f965 	bl	8001dd2 <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f000 f92d 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x5c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000008 	.word	0x20000008
 8001b68:	200002c0 	.word	0x200002c0

08001b6c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	200002c0 	.word	0x200002c0

08001b84 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff ffee 	bl	8001b6c <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_Delay+0x40>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffde 	bl	8001b6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000008 	.word	0x20000008

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4907      	ldr	r1, [pc, #28]	; (8001c64 <__NVIC_EnableIRQ+0x38>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff8e 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff29 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff3e 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff8e 	bl	8001cbc <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5d 	bl	8001c68 <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff31 	bl	8001c2c <__NVIC_EnableIRQ>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffa2 	bl	8001d24 <SysTick_Config>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d005      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2204      	movs	r2, #4
 8001e04:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	e027      	b.n	8001e5c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 020e 	bic.w	r2, r2, #14
 8001e1a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e34:	2101      	movs	r1, #1
 8001e36:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
    } 
  }
  return status;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e76:	e160      	b.n	800213a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8152 	beq.w	8002134 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x38>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b12      	cmp	r3, #18
 8001e9e:	d123      	bne.n	8001ee8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	6939      	ldr	r1, [r7, #16]
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d00b      	beq.n	8001f3c <HAL_GPIO_Init+0xd4>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d007      	beq.n	8001f3c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f30:	2b11      	cmp	r3, #17
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b12      	cmp	r3, #18
 8001f3a:	d130      	bne.n	8001f9e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f72:	2201      	movs	r2, #1
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	091b      	lsrs	r3, r3, #4
 8001f88:	f003 0201 	and.w	r2, r3, #1
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80ac 	beq.w	8002134 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fdc:	4b5e      	ldr	r3, [pc, #376]	; (8002158 <HAL_GPIO_Init+0x2f0>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a5d      	ldr	r2, [pc, #372]	; (8002158 <HAL_GPIO_Init+0x2f0>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b5b      	ldr	r3, [pc, #364]	; (8002158 <HAL_GPIO_Init+0x2f0>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ff4:	4a59      	ldr	r2, [pc, #356]	; (800215c <HAL_GPIO_Init+0x2f4>)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800201e:	d025      	beq.n	800206c <HAL_GPIO_Init+0x204>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a4f      	ldr	r2, [pc, #316]	; (8002160 <HAL_GPIO_Init+0x2f8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d01f      	beq.n	8002068 <HAL_GPIO_Init+0x200>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a4e      	ldr	r2, [pc, #312]	; (8002164 <HAL_GPIO_Init+0x2fc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d019      	beq.n	8002064 <HAL_GPIO_Init+0x1fc>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a4d      	ldr	r2, [pc, #308]	; (8002168 <HAL_GPIO_Init+0x300>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d013      	beq.n	8002060 <HAL_GPIO_Init+0x1f8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a4c      	ldr	r2, [pc, #304]	; (800216c <HAL_GPIO_Init+0x304>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00d      	beq.n	800205c <HAL_GPIO_Init+0x1f4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a4b      	ldr	r2, [pc, #300]	; (8002170 <HAL_GPIO_Init+0x308>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <HAL_GPIO_Init+0x1f0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a4a      	ldr	r2, [pc, #296]	; (8002174 <HAL_GPIO_Init+0x30c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d101      	bne.n	8002054 <HAL_GPIO_Init+0x1ec>
 8002050:	2306      	movs	r3, #6
 8002052:	e00c      	b.n	800206e <HAL_GPIO_Init+0x206>
 8002054:	2307      	movs	r3, #7
 8002056:	e00a      	b.n	800206e <HAL_GPIO_Init+0x206>
 8002058:	2305      	movs	r3, #5
 800205a:	e008      	b.n	800206e <HAL_GPIO_Init+0x206>
 800205c:	2304      	movs	r3, #4
 800205e:	e006      	b.n	800206e <HAL_GPIO_Init+0x206>
 8002060:	2303      	movs	r3, #3
 8002062:	e004      	b.n	800206e <HAL_GPIO_Init+0x206>
 8002064:	2302      	movs	r3, #2
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x206>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_GPIO_Init+0x206>
 800206c:	2300      	movs	r3, #0
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	f002 0203 	and.w	r2, r2, #3
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	4093      	lsls	r3, r2
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800207e:	4937      	ldr	r1, [pc, #220]	; (800215c <HAL_GPIO_Init+0x2f4>)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800208c:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <HAL_GPIO_Init+0x310>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020b0:	4a31      	ldr	r2, [pc, #196]	; (8002178 <HAL_GPIO_Init+0x310>)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020b6:	4b30      	ldr	r3, [pc, #192]	; (8002178 <HAL_GPIO_Init+0x310>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43db      	mvns	r3, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020da:	4a27      	ldr	r2, [pc, #156]	; (8002178 <HAL_GPIO_Init+0x310>)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_GPIO_Init+0x310>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002104:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <HAL_GPIO_Init+0x310>)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_GPIO_Init+0x310>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <HAL_GPIO_Init+0x310>)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	f47f ae97 	bne.w	8001e78 <HAL_GPIO_Init+0x10>
  }
}
 800214a:	bf00      	nop
 800214c:	371c      	adds	r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000
 8002160:	48000400 	.word	0x48000400
 8002164:	48000800 	.word	0x48000800
 8002168:	48000c00 	.word	0x48000c00
 800216c:	48001000 	.word	0x48001000
 8002170:	48001400 	.word	0x48001400
 8002174:	48001800 	.word	0x48001800
 8002178:	40010400 	.word	0x40010400

0800217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002198:	e002      	b.n	80021a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	887b      	ldrh	r3, [r7, #2]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	041a      	lsls	r2, r3, #16
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f000 bf01 	b.w	8002ffc <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8160 	beq.w	80024ca <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800220a:	4bae      	ldr	r3, [pc, #696]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d00c      	beq.n	8002230 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002216:	4bab      	ldr	r3, [pc, #684]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d159      	bne.n	80022d6 <HAL_RCC_OscConfig+0xf6>
 8002222:	4ba8      	ldr	r3, [pc, #672]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800222a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222e:	d152      	bne.n	80022d6 <HAL_RCC_OscConfig+0xf6>
 8002230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002234:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002244:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d102      	bne.n	8002262 <HAL_RCC_OscConfig+0x82>
 800225c:	4b99      	ldr	r3, [pc, #612]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	e015      	b.n	800228e <HAL_RCC_OscConfig+0xae>
 8002262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002266:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800227a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800227e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800228a:	4b8e      	ldr	r3, [pc, #568]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002292:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002296:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800229a:	fa92 f2a2 	rbit	r2, r2
 800229e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80022a2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022a6:	fab2 f282 	clz	r2, r2
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	f042 0220 	orr.w	r2, r2, #32
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	f002 021f 	and.w	r2, r2, #31
 80022b6:	2101      	movs	r1, #1
 80022b8:	fa01 f202 	lsl.w	r2, r1, r2
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8102 	beq.w	80024c8 <HAL_RCC_OscConfig+0x2e8>
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 80fc 	bne.w	80024c8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f000 be93 	b.w	8002ffc <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x110>
 80022e2:	4b78      	ldr	r3, [pc, #480]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a77      	ldr	r2, [pc, #476]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e030      	b.n	8002352 <HAL_RCC_OscConfig+0x172>
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x134>
 80022fa:	4b72      	ldr	r3, [pc, #456]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a71      	ldr	r2, [pc, #452]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 8002300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a6e      	ldr	r2, [pc, #440]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 800230c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e01e      	b.n	8002352 <HAL_RCC_OscConfig+0x172>
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800231e:	d10c      	bne.n	800233a <HAL_RCC_OscConfig+0x15a>
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a67      	ldr	r2, [pc, #412]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 8002326:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b65      	ldr	r3, [pc, #404]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a64      	ldr	r2, [pc, #400]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 8002332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	e00b      	b.n	8002352 <HAL_RCC_OscConfig+0x172>
 800233a:	4b62      	ldr	r3, [pc, #392]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a61      	ldr	r2, [pc, #388]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 8002340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b5f      	ldr	r3, [pc, #380]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5e      	ldr	r2, [pc, #376]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 800234c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002350:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d059      	beq.n	8002410 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fc06 	bl	8001b6c <HAL_GetTick>
 8002360:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002366:	f7ff fc01 	bl	8001b6c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d902      	bls.n	800237c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	f000 be40 	b.w	8002ffc <HAL_RCC_OscConfig+0xe1c>
 800237c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002380:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002390:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d102      	bne.n	80023ae <HAL_RCC_OscConfig+0x1ce>
 80023a8:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	e015      	b.n	80023da <HAL_RCC_OscConfig+0x1fa>
 80023ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80023c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023ca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023de:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80023e2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80023e6:	fa92 f2a2 	rbit	r2, r2
 80023ea:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80023ee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023f2:	fab2 f282 	clz	r2, r2
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f042 0220 	orr.w	r2, r2, #32
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	f002 021f 	and.w	r2, r2, #31
 8002402:	2101      	movs	r1, #1
 8002404:	fa01 f202 	lsl.w	r2, r1, r2
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ab      	beq.n	8002366 <HAL_RCC_OscConfig+0x186>
 800240e:	e05c      	b.n	80024ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff fbac 	bl	8001b6c <HAL_GetTick>
 8002414:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241a:	f7ff fba7 	bl	8001b6c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d902      	bls.n	8002430 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	f000 bde6 	b.w	8002ffc <HAL_RCC_OscConfig+0xe1c>
 8002430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002434:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002444:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d102      	bne.n	8002462 <HAL_RCC_OscConfig+0x282>
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x2ae>
 8002462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002466:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800247e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_RCC_OscConfig+0x2e4>)
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002492:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002496:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800249a:	fa92 f2a2 	rbit	r2, r2
 800249e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80024a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024a6:	fab2 f282 	clz	r2, r2
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	f042 0220 	orr.w	r2, r2, #32
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	f002 021f 	and.w	r2, r2, #31
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f202 	lsl.w	r2, r1, r2
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1ab      	bne.n	800241a <HAL_RCC_OscConfig+0x23a>
 80024c2:	e002      	b.n	80024ca <HAL_RCC_OscConfig+0x2ea>
 80024c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8170 	beq.w	80027ba <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024da:	4bd0      	ldr	r3, [pc, #832]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00c      	beq.n	8002500 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024e6:	4bcd      	ldr	r3, [pc, #820]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d16d      	bne.n	80025ce <HAL_RCC_OscConfig+0x3ee>
 80024f2:	4bca      	ldr	r3, [pc, #808]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80024fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024fe:	d166      	bne.n	80025ce <HAL_RCC_OscConfig+0x3ee>
 8002500:	2302      	movs	r3, #2
 8002502:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002512:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d102      	bne.n	8002530 <HAL_RCC_OscConfig+0x350>
 800252a:	4bbc      	ldr	r3, [pc, #752]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	e013      	b.n	8002558 <HAL_RCC_OscConfig+0x378>
 8002530:	2302      	movs	r3, #2
 8002532:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002542:	2302      	movs	r3, #2
 8002544:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002548:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002554:	4bb1      	ldr	r3, [pc, #708]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	2202      	movs	r2, #2
 800255a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800255e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002562:	fa92 f2a2 	rbit	r2, r2
 8002566:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800256a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800256e:	fab2 f282 	clz	r2, r2
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f042 0220 	orr.w	r2, r2, #32
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	f002 021f 	and.w	r2, r2, #31
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f202 	lsl.w	r2, r1, r2
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <HAL_RCC_OscConfig+0x3ba>
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d002      	beq.n	800259a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	f000 bd31 	b.w	8002ffc <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4ba0      	ldr	r3, [pc, #640]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	21f8      	movs	r1, #248	; 0xf8
 80025aa:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80025b2:	fa91 f1a1 	rbit	r1, r1
 80025b6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80025ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025be:	fab1 f181 	clz	r1, r1
 80025c2:	b2c9      	uxtb	r1, r1
 80025c4:	408b      	lsls	r3, r1
 80025c6:	4995      	ldr	r1, [pc, #596]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025cc:	e0f5      	b.n	80027ba <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8085 	beq.w	80026e4 <HAL_RCC_OscConfig+0x504>
 80025da:	2301      	movs	r3, #1
 80025dc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80025ec:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	461a      	mov	r2, r3
 8002602:	2301      	movs	r3, #1
 8002604:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7ff fab1 	bl	8001b6c <HAL_GetTick>
 800260a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	e00a      	b.n	8002626 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002610:	f7ff faac 	bl	8001b6c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d902      	bls.n	8002626 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	f000 bceb 	b.w	8002ffc <HAL_RCC_OscConfig+0xe1c>
 8002626:	2302      	movs	r3, #2
 8002628:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002638:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d102      	bne.n	8002656 <HAL_RCC_OscConfig+0x476>
 8002650:	4b72      	ldr	r3, [pc, #456]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	e013      	b.n	800267e <HAL_RCC_OscConfig+0x49e>
 8002656:	2302      	movs	r3, #2
 8002658:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002668:	2302      	movs	r3, #2
 800266a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800266e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800267a:	4b68      	ldr	r3, [pc, #416]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	2202      	movs	r2, #2
 8002680:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002684:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002688:	fa92 f2a2 	rbit	r2, r2
 800268c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002690:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002694:	fab2 f282 	clz	r2, r2
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f042 0220 	orr.w	r2, r2, #32
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	f002 021f 	and.w	r2, r2, #31
 80026a4:	2101      	movs	r1, #1
 80026a6:	fa01 f202 	lsl.w	r2, r1, r2
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0af      	beq.n	8002610 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	4b5a      	ldr	r3, [pc, #360]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	21f8      	movs	r1, #248	; 0xf8
 80026c0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80026c8:	fa91 f1a1 	rbit	r1, r1
 80026cc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80026d0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026d4:	fab1 f181 	clz	r1, r1
 80026d8:	b2c9      	uxtb	r1, r1
 80026da:	408b      	lsls	r3, r1
 80026dc:	494f      	ldr	r1, [pc, #316]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
 80026e2:	e06a      	b.n	80027ba <HAL_RCC_OscConfig+0x5da>
 80026e4:	2301      	movs	r3, #1
 80026e6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80026f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002704:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	461a      	mov	r2, r3
 800270c:	2300      	movs	r3, #0
 800270e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fa2c 	bl	8001b6c <HAL_GetTick>
 8002714:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271a:	f7ff fa27 	bl	8001b6c <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d902      	bls.n	8002730 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	f000 bc66 	b.w	8002ffc <HAL_RCC_OscConfig+0xe1c>
 8002730:	2302      	movs	r3, #2
 8002732:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002742:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d102      	bne.n	8002760 <HAL_RCC_OscConfig+0x580>
 800275a:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	e013      	b.n	8002788 <HAL_RCC_OscConfig+0x5a8>
 8002760:	2302      	movs	r3, #2
 8002762:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002772:	2302      	movs	r3, #2
 8002774:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002778:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_RCC_OscConfig+0x63c>)
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	2202      	movs	r2, #2
 800278a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800278e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002792:	fa92 f2a2 	rbit	r2, r2
 8002796:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800279a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800279e:	fab2 f282 	clz	r2, r2
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	f042 0220 	orr.w	r2, r2, #32
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	f002 021f 	and.w	r2, r2, #31
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f202 	lsl.w	r2, r1, r2
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1af      	bne.n	800271a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80da 	beq.w	800297e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d069      	beq.n	80028a8 <HAL_RCC_OscConfig+0x6c8>
 80027d4:	2301      	movs	r3, #1
 80027d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80027e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_OscConfig+0x640>)
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	461a      	mov	r2, r3
 80027fa:	2301      	movs	r3, #1
 80027fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7ff f9b5 	bl	8001b6c <HAL_GetTick>
 8002802:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002806:	e00d      	b.n	8002824 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002808:	f7ff f9b0 	bl	8001b6c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d905      	bls.n	8002824 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e3ef      	b.n	8002ffc <HAL_RCC_OscConfig+0xe1c>
 800281c:	40021000 	.word	0x40021000
 8002820:	10908120 	.word	0x10908120
 8002824:	2302      	movs	r3, #2
 8002826:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800283c:	2202      	movs	r2, #2
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fa93 f2a3 	rbit	r2, r3
 800284a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002854:	2202      	movs	r2, #2
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	fa93 f2a3 	rbit	r2, r3
 8002862:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002866:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002868:	4ba4      	ldr	r3, [pc, #656]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 800286a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800286c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002870:	2102      	movs	r1, #2
 8002872:	6019      	str	r1, [r3, #0]
 8002874:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f1a3 	rbit	r1, r3
 800287e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002882:	6019      	str	r1, [r3, #0]
  return result;
 8002884:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	2101      	movs	r1, #1
 800289c:	fa01 f303 	lsl.w	r3, r1, r3
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0b0      	beq.n	8002808 <HAL_RCC_OscConfig+0x628>
 80028a6:	e06a      	b.n	800297e <HAL_RCC_OscConfig+0x79e>
 80028a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	fa93 f2a3 	rbit	r2, r3
 80028ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028be:	601a      	str	r2, [r3, #0]
  return result;
 80028c0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b8c      	ldr	r3, [pc, #560]	; (8002b00 <HAL_RCC_OscConfig+0x920>)
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	461a      	mov	r2, r3
 80028d6:	2300      	movs	r3, #0
 80028d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028da:	f7ff f947 	bl	8001b6c <HAL_GetTick>
 80028de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e2:	e009      	b.n	80028f8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e4:	f7ff f942 	bl	8001b6c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e381      	b.n	8002ffc <HAL_RCC_OscConfig+0xe1c>
 80028f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028fc:	2202      	movs	r2, #2
 80028fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	fa93 f2a3 	rbit	r2, r3
 800290a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002914:	2202      	movs	r2, #2
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	fa93 f2a3 	rbit	r2, r3
 8002922:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800292c:	2202      	movs	r2, #2
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	fa93 f2a3 	rbit	r2, r3
 800293a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800293e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	4b6e      	ldr	r3, [pc, #440]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002944:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002948:	2102      	movs	r1, #2
 800294a:	6019      	str	r1, [r3, #0]
 800294c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	fa93 f1a3 	rbit	r1, r3
 8002956:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800295a:	6019      	str	r1, [r3, #0]
  return result;
 800295c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1b2      	bne.n	80028e4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8157 	beq.w	8002c3c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002994:	4b59      	ldr	r3, [pc, #356]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d112      	bne.n	80029c6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	4b56      	ldr	r3, [pc, #344]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	4a55      	ldr	r2, [pc, #340]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 80029a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029aa:	61d3      	str	r3, [r2, #28]
 80029ac:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80029b4:	f107 030c 	add.w	r3, r7, #12
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	f107 030c 	add.w	r3, r7, #12
 80029be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	4b4f      	ldr	r3, [pc, #316]	; (8002b04 <HAL_RCC_OscConfig+0x924>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11a      	bne.n	8002a08 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d2:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <HAL_RCC_OscConfig+0x924>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a4b      	ldr	r2, [pc, #300]	; (8002b04 <HAL_RCC_OscConfig+0x924>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029de:	f7ff f8c5 	bl	8001b6c <HAL_GetTick>
 80029e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e6:	e009      	b.n	80029fc <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e8:	f7ff f8c0 	bl	8001b6c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b64      	cmp	r3, #100	; 0x64
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e2ff      	b.n	8002ffc <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <HAL_RCC_OscConfig+0x924>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ef      	beq.n	80029e8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d106      	bne.n	8002a20 <HAL_RCC_OscConfig+0x840>
 8002a12:	4b3a      	ldr	r3, [pc, #232]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a39      	ldr	r2, [pc, #228]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6213      	str	r3, [r2, #32]
 8002a1e:	e02f      	b.n	8002a80 <HAL_RCC_OscConfig+0x8a0>
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x864>
 8002a2a:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a33      	ldr	r2, [pc, #204]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6213      	str	r3, [r2, #32]
 8002a36:	4b31      	ldr	r3, [pc, #196]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a30      	ldr	r2, [pc, #192]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	e01d      	b.n	8002a80 <HAL_RCC_OscConfig+0x8a0>
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x888>
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	6213      	str	r3, [r2, #32]
 8002a5a:	4b28      	ldr	r3, [pc, #160]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4a27      	ldr	r2, [pc, #156]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6213      	str	r3, [r2, #32]
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0x8a0>
 8002a68:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4a23      	ldr	r2, [pc, #140]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6213      	str	r3, [r2, #32]
 8002a74:	4b21      	ldr	r3, [pc, #132]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	4a20      	ldr	r2, [pc, #128]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002a7a:	f023 0304 	bic.w	r3, r3, #4
 8002a7e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d06a      	beq.n	8002b60 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8a:	f7ff f86f 	bl	8001b6c <HAL_GetTick>
 8002a8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7ff f86a 	bl	8001b6c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e2a7      	b.n	8002ffc <HAL_RCC_OscConfig+0xe1c>
 8002aac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	fa93 f2a3 	rbit	r2, r3
 8002abe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ac8:	2202      	movs	r2, #2
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	fa93 f2a3 	rbit	r2, r3
 8002ad6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002ada:	601a      	str	r2, [r3, #0]
  return result;
 8002adc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002ae0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d108      	bne.n	8002b08 <HAL_RCC_OscConfig+0x928>
 8002af6:	4b01      	ldr	r3, [pc, #4]	; (8002afc <HAL_RCC_OscConfig+0x91c>)
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	e013      	b.n	8002b24 <HAL_RCC_OscConfig+0x944>
 8002afc:	40021000 	.word	0x40021000
 8002b00:	10908120 	.word	0x10908120
 8002b04:	40007000 	.word	0x40007000
 8002b08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	fa93 f2a3 	rbit	r2, r3
 8002b1a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	4bc0      	ldr	r3, [pc, #768]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002b28:	2102      	movs	r1, #2
 8002b2a:	6011      	str	r1, [r2, #0]
 8002b2c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	fa92 f1a2 	rbit	r1, r2
 8002b36:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b3a:	6011      	str	r1, [r2, #0]
  return result;
 8002b3c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	fab2 f282 	clz	r2, r2
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	f002 021f 	and.w	r2, r2, #31
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d09a      	beq.n	8002a94 <HAL_RCC_OscConfig+0x8b4>
 8002b5e:	e063      	b.n	8002c28 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7ff f804 	bl	8001b6c <HAL_GetTick>
 8002b64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b68:	e00b      	b.n	8002b82 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b6a:	f7fe ffff 	bl	8001b6c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e23c      	b.n	8002ffc <HAL_RCC_OscConfig+0xe1c>
 8002b82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b86:	2202      	movs	r2, #2
 8002b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	fa93 f2a3 	rbit	r2, r3
 8002b94:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	fa93 f2a3 	rbit	r2, r3
 8002bac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002bb0:	601a      	str	r2, [r3, #0]
  return result;
 8002bb2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002bb6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f043 0302 	orr.w	r3, r3, #2
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d102      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x9f2>
 8002bcc:	4b95      	ldr	r3, [pc, #596]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	e00d      	b.n	8002bee <HAL_RCC_OscConfig+0xa0e>
 8002bd2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fa93 f2a3 	rbit	r2, r3
 8002be4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	4b8e      	ldr	r3, [pc, #568]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	6011      	str	r1, [r2, #0]
 8002bf6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	fa92 f1a2 	rbit	r1, r2
 8002c00:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c04:	6011      	str	r1, [r2, #0]
  return result;
 8002c06:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	fab2 f282 	clz	r2, r2
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	f002 021f 	and.w	r2, r2, #31
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1a0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c28:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c30:	4b7c      	ldr	r3, [pc, #496]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4a7b      	ldr	r2, [pc, #492]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 81d9 	beq.w	8002ffa <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c48:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	f000 81a6 	beq.w	8002fa2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	f040 811e 	bne.w	8002e9e <HAL_RCC_OscConfig+0xcbe>
 8002c62:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fa93 f2a3 	rbit	r2, r3
 8002c76:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c7a:	601a      	str	r2, [r3, #0]
  return result;
 8002c7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c80:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	461a      	mov	r2, r3
 8002c94:	2300      	movs	r3, #0
 8002c96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe ff68 	bl	8001b6c <HAL_GetTick>
 8002c9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	e009      	b.n	8002cb6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe ff63 	bl	8001b6c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1a2      	b.n	8002ffc <HAL_RCC_OscConfig+0xe1c>
 8002cb6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002cba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	fa93 f2a3 	rbit	r2, r3
 8002cca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cce:	601a      	str	r2, [r3, #0]
  return result;
 8002cd0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xb10>
 8002cea:	4b4e      	ldr	r3, [pc, #312]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	e01b      	b.n	8002d28 <HAL_RCC_OscConfig+0xb48>
 8002cf0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	fa93 f2a3 	rbit	r2, r3
 8002d04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	fa93 f2a3 	rbit	r2, r3
 8002d1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002d2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d30:	6011      	str	r1, [r2, #0]
 8002d32:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	fa92 f1a2 	rbit	r1, r2
 8002d3c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d40:	6011      	str	r1, [r2, #0]
  return result;
 8002d42:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	fab2 f282 	clz	r2, r2
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	f042 0220 	orr.w	r2, r2, #32
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f002 021f 	and.w	r2, r2, #31
 8002d58:	2101      	movs	r1, #1
 8002d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d19e      	bne.n	8002ca2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d64:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f023 020f 	bic.w	r2, r3, #15
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	492c      	ldr	r1, [pc, #176]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002d78:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6a19      	ldr	r1, [r3, #32]
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	4925      	ldr	r1, [pc, #148]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
 8002d94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	fa93 f2a3 	rbit	r2, r3
 8002da8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002dac:	601a      	str	r2, [r3, #0]
  return result;
 8002dae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002db2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dbe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fe fecf 	bl	8001b6c <HAL_GetTick>
 8002dce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd2:	e009      	b.n	8002de8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe feca 	bl	8001b6c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e109      	b.n	8002ffc <HAL_RCC_OscConfig+0xe1c>
 8002de8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	fa93 f2a3 	rbit	r2, r3
 8002dfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e00:	601a      	str	r2, [r3, #0]
  return result;
 8002e02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCC_OscConfig+0xc48>
 8002e1c:	4b01      	ldr	r3, [pc, #4]	; (8002e24 <HAL_RCC_OscConfig+0xc44>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	e01e      	b.n	8002e60 <HAL_RCC_OscConfig+0xc80>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	fa93 f2a3 	rbit	r2, r3
 8002e3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	fa93 f2a3 	rbit	r2, r3
 8002e56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <HAL_RCC_OscConfig+0xe28>)
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002e64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e68:	6011      	str	r1, [r2, #0]
 8002e6a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	fa92 f1a2 	rbit	r1, r2
 8002e74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e78:	6011      	str	r1, [r2, #0]
  return result;
 8002e7a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	fab2 f282 	clz	r2, r2
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	f042 0220 	orr.w	r2, r2, #32
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	f002 021f 	and.w	r2, r2, #31
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d09b      	beq.n	8002dd4 <HAL_RCC_OscConfig+0xbf4>
 8002e9c:	e0ad      	b.n	8002ffa <HAL_RCC_OscConfig+0xe1a>
 8002e9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ea2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	fa93 f2a3 	rbit	r2, r3
 8002eb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002eb6:	601a      	str	r2, [r3, #0]
  return result;
 8002eb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ebc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ec8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fe4a 	bl	8001b6c <HAL_GetTick>
 8002ed8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002edc:	e009      	b.n	8002ef2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ede:	f7fe fe45 	bl	8001b6c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e084      	b.n	8002ffc <HAL_RCC_OscConfig+0xe1c>
 8002ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ef6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	fa93 f2a3 	rbit	r2, r3
 8002f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f0a:	601a      	str	r2, [r3, #0]
  return result;
 8002f0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d102      	bne.n	8002f2c <HAL_RCC_OscConfig+0xd4c>
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_RCC_OscConfig+0xe28>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	e01b      	b.n	8002f64 <HAL_RCC_OscConfig+0xd84>
 8002f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	fa93 f2a3 	rbit	r2, r3
 8002f40:	f107 0320 	add.w	r3, r7, #32
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	f107 031c 	add.w	r3, r7, #28
 8002f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f107 031c 	add.w	r3, r7, #28
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	fa93 f2a3 	rbit	r2, r3
 8002f5a:	f107 0318 	add.w	r3, r7, #24
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	4b29      	ldr	r3, [pc, #164]	; (8003008 <HAL_RCC_OscConfig+0xe28>)
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	f107 0214 	add.w	r2, r7, #20
 8002f68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f6c:	6011      	str	r1, [r2, #0]
 8002f6e:	f107 0214 	add.w	r2, r7, #20
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	fa92 f1a2 	rbit	r1, r2
 8002f78:	f107 0210 	add.w	r2, r7, #16
 8002f7c:	6011      	str	r1, [r2, #0]
  return result;
 8002f7e:	f107 0210 	add.w	r2, r7, #16
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	fab2 f282 	clz	r2, r2
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	f042 0220 	orr.w	r2, r2, #32
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	f002 021f 	and.w	r2, r2, #31
 8002f94:	2101      	movs	r1, #1
 8002f96:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d19e      	bne.n	8002ede <HAL_RCC_OscConfig+0xcfe>
 8002fa0:	e02b      	b.n	8002ffa <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e025      	b.n	8002ffc <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_RCC_OscConfig+0xe28>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_RCC_OscConfig+0xe28>)
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002fc4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d111      	bne.n	8002ff6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002fd2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002fd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d108      	bne.n	8002ff6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fe8:	f003 020f 	and.w	r2, r3, #15
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000

0800300c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b09e      	sub	sp, #120	; 0x78
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e162      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b90      	ldr	r3, [pc, #576]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d910      	bls.n	8003054 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b8d      	ldr	r3, [pc, #564]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 0207 	bic.w	r2, r3, #7
 800303a:	498b      	ldr	r1, [pc, #556]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b89      	ldr	r3, [pc, #548]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e14a      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b82      	ldr	r3, [pc, #520]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	497f      	ldr	r1, [pc, #508]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80dc 	beq.w	8003238 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d13c      	bne.n	8003102 <HAL_RCC_ClockConfig+0xf6>
 8003088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800308c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d102      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xa6>
 80030ac:	4b6f      	ldr	r3, [pc, #444]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	e00f      	b.n	80030d2 <HAL_RCC_ClockConfig+0xc6>
 80030b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	667b      	str	r3, [r7, #100]	; 0x64
 80030c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030c4:	663b      	str	r3, [r7, #96]	; 0x60
 80030c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ce:	4b67      	ldr	r3, [pc, #412]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80030d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030da:	fa92 f2a2 	rbit	r2, r2
 80030de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030e2:	fab2 f282 	clz	r2, r2
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	f042 0220 	orr.w	r2, r2, #32
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	f002 021f 	and.w	r2, r2, #31
 80030f2:	2101      	movs	r1, #1
 80030f4:	fa01 f202 	lsl.w	r2, r1, r2
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d17b      	bne.n	80031f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0f3      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d13c      	bne.n	8003184 <HAL_RCC_ClockConfig+0x178>
 800310a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800310e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d102      	bne.n	8003134 <HAL_RCC_ClockConfig+0x128>
 800312e:	4b4f      	ldr	r3, [pc, #316]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	e00f      	b.n	8003154 <HAL_RCC_ClockConfig+0x148>
 8003134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003138:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	647b      	str	r3, [r7, #68]	; 0x44
 8003142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003146:	643b      	str	r3, [r7, #64]	; 0x40
 8003148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003150:	4b46      	ldr	r3, [pc, #280]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003158:	63ba      	str	r2, [r7, #56]	; 0x38
 800315a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800315c:	fa92 f2a2 	rbit	r2, r2
 8003160:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003164:	fab2 f282 	clz	r2, r2
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f042 0220 	orr.w	r2, r2, #32
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f002 021f 	and.w	r2, r2, #31
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f202 	lsl.w	r2, r1, r2
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d13a      	bne.n	80031f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0b2      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
 8003184:	2302      	movs	r3, #2
 8003186:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d102      	bne.n	80031ac <HAL_RCC_ClockConfig+0x1a0>
 80031a6:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	e00d      	b.n	80031c8 <HAL_RCC_ClockConfig+0x1bc>
 80031ac:	2302      	movs	r3, #2
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
 80031b8:	2302      	movs	r3, #2
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	2202      	movs	r2, #2
 80031ca:	61ba      	str	r2, [r7, #24]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	fa92 f2a2 	rbit	r2, r2
 80031d2:	617a      	str	r2, [r7, #20]
  return result;
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	fab2 f282 	clz	r2, r2
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	f042 0220 	orr.w	r2, r2, #32
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	f002 021f 	and.w	r2, r2, #31
 80031e6:	2101      	movs	r1, #1
 80031e8:	fa01 f202 	lsl.w	r2, r1, r2
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e079      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	491a      	ldr	r1, [pc, #104]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003208:	f7fe fcb0 	bl	8001b6c <HAL_GetTick>
 800320c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fe fcac 	bl	8001b6c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e061      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d214      	bcs.n	8003270 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 0207 	bic.w	r2, r3, #7
 800324e:	4906      	ldr	r1, [pc, #24]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e040      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
 8003268:	40022000 	.word	0x40022000
 800326c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_RCC_ClockConfig+0x2e8>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	491a      	ldr	r1, [pc, #104]	; (80032f4 <HAL_RCC_ClockConfig+0x2e8>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <HAL_RCC_ClockConfig+0x2e8>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4912      	ldr	r1, [pc, #72]	; (80032f4 <HAL_RCC_ClockConfig+0x2e8>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032ae:	f000 f829 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032b2:	4601      	mov	r1, r0
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_RCC_ClockConfig+0x2e8>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032bc:	22f0      	movs	r2, #240	; 0xf0
 80032be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	fa92 f2a2 	rbit	r2, r2
 80032c6:	60fa      	str	r2, [r7, #12]
  return result;
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	fab2 f282 	clz	r2, r2
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	40d3      	lsrs	r3, r2
 80032d2:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <HAL_RCC_ClockConfig+0x2ec>)
 80032d4:	5cd3      	ldrb	r3, [r2, r3]
 80032d6:	fa21 f303 	lsr.w	r3, r1, r3
 80032da:	4a08      	ldr	r2, [pc, #32]	; (80032fc <HAL_RCC_ClockConfig+0x2f0>)
 80032dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_RCC_ClockConfig+0x2f4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fbfe 	bl	8001ae4 <HAL_InitTick>
  
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3778      	adds	r7, #120	; 0x78
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08005f1c 	.word	0x08005f1c
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004

08003304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b08b      	sub	sp, #44	; 0x2c
 8003308:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b04      	cmp	r3, #4
 800332c:	d002      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x30>
 800332e:	2b08      	cmp	r3, #8
 8003330:	d003      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x36>
 8003332:	e03f      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003336:	623b      	str	r3, [r7, #32]
      break;
 8003338:	e03f      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003340:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003344:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	fa92 f2a2 	rbit	r2, r2
 800334c:	607a      	str	r2, [r7, #4]
  return result;
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	fab2 f282 	clz	r2, r2
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	40d3      	lsrs	r3, r2
 8003358:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800335e:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	220f      	movs	r2, #15
 8003368:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	fa92 f2a2 	rbit	r2, r2
 8003370:	60fa      	str	r2, [r7, #12]
  return result;
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	fab2 f282 	clz	r2, r2
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	40d3      	lsrs	r3, r2
 800337c:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800338c:	4a0f      	ldr	r2, [pc, #60]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	fbb2 f2f3 	udiv	r2, r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
 800339c:	e007      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800339e:	4a0b      	ldr	r2, [pc, #44]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	623b      	str	r3, [r7, #32]
      break;
 80033b2:	e002      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80033b6:	623b      	str	r3, [r7, #32]
      break;
 80033b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ba:	6a3b      	ldr	r3, [r7, #32]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	372c      	adds	r7, #44	; 0x2c
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40021000 	.word	0x40021000
 80033cc:	007a1200 	.word	0x007a1200
 80033d0:	08005f34 	.word	0x08005f34
 80033d4:	08005f44 	.word	0x08005f44

080033d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_RCC_GetHCLKFreq+0x14>)
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000000 	.word	0x20000000

080033f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033f6:	f7ff ffef 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 80033fa:	4601      	mov	r1, r0
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003404:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003408:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	fa92 f2a2 	rbit	r2, r2
 8003410:	603a      	str	r2, [r7, #0]
  return result;
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	fab2 f282 	clz	r2, r2
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	40d3      	lsrs	r3, r2
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x40>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	08005f2c 	.word	0x08005f2c

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800343a:	f7ff ffcd 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 800343e:	4601      	mov	r1, r0
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003448:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800344c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	fa92 f2a2 	rbit	r2, r2
 8003454:	603a      	str	r2, [r7, #0]
  return result;
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	40d3      	lsrs	r3, r2
 8003460:	4a04      	ldr	r2, [pc, #16]	; (8003474 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	08005f2c 	.word	0x08005f2c

08003478 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b092      	sub	sp, #72	; 0x48
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80d7 	beq.w	8003644 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349c:	4b4e      	ldr	r3, [pc, #312]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10e      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a8:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4a4a      	ldr	r2, [pc, #296]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b2:	61d3      	str	r3, [r2, #28]
 80034b4:	4b48      	ldr	r3, [pc, #288]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c6:	4b45      	ldr	r3, [pc, #276]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d118      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d2:	4b42      	ldr	r3, [pc, #264]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a41      	ldr	r2, [pc, #260]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034de:	f7fe fb45 	bl	8001b6c <HAL_GetTick>
 80034e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	e008      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e6:	f7fe fb41 	bl	8001b6c <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b64      	cmp	r3, #100	; 0x64
 80034f2:	d901      	bls.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e1d6      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	4b38      	ldr	r3, [pc, #224]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003504:	4b34      	ldr	r3, [pc, #208]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8084 	beq.w	800361e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003520:	429a      	cmp	r2, r3
 8003522:	d07c      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003524:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	461a      	mov	r2, r3
 800354e:	2301      	movs	r3, #1
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003556:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	461a      	mov	r2, r3
 8003572:	2300      	movs	r3, #0
 8003574:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003576:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d04b      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003586:	f7fe faf1 	bl	8001b6c <HAL_GetTick>
 800358a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fe faed 	bl	8001b6c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	; 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e180      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80035a4:	2302      	movs	r3, #2
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
 80035b0:	2302      	movs	r3, #2
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	61fb      	str	r3, [r7, #28]
  return result;
 80035bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d108      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035d2:	4b01      	ldr	r3, [pc, #4]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	e00d      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40007000 	.word	0x40007000
 80035e0:	10908100 	.word	0x10908100
 80035e4:	2302      	movs	r3, #2
 80035e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	4ba0      	ldr	r3, [pc, #640]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	2202      	movs	r2, #2
 80035f6:	613a      	str	r2, [r7, #16]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	fa92 f2a2 	rbit	r2, r2
 80035fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	fab2 f282 	clz	r2, r2
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f002 021f 	and.w	r2, r2, #31
 8003612:	2101      	movs	r1, #1
 8003614:	fa01 f202 	lsl.w	r2, r1, r2
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0b7      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800361e:	4b95      	ldr	r3, [pc, #596]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4992      	ldr	r1, [pc, #584]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003630:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003634:	2b01      	cmp	r3, #1
 8003636:	d105      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003638:	4b8e      	ldr	r3, [pc, #568]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4a8d      	ldr	r2, [pc, #564]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800363e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003642:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003650:	4b88      	ldr	r3, [pc, #544]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f023 0203 	bic.w	r2, r3, #3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4985      	ldr	r1, [pc, #532]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800366e:	4b81      	ldr	r3, [pc, #516]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	497e      	ldr	r1, [pc, #504]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800367c:	4313      	orrs	r3, r2
 800367e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800368c:	4b79      	ldr	r3, [pc, #484]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	4976      	ldr	r1, [pc, #472]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036aa:	4b72      	ldr	r3, [pc, #456]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f023 0210 	bic.w	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	496f      	ldr	r1, [pc, #444]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80036c8:	4b6a      	ldr	r3, [pc, #424]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	4967      	ldr	r1, [pc, #412]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036e6:	4b63      	ldr	r3, [pc, #396]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f023 0220 	bic.w	r2, r3, #32
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4960      	ldr	r1, [pc, #384]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003704:	4b5b      	ldr	r3, [pc, #364]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	4958      	ldr	r1, [pc, #352]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003722:	4b54      	ldr	r3, [pc, #336]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	4951      	ldr	r1, [pc, #324]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003730:	4313      	orrs	r3, r2
 8003732:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003740:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	4949      	ldr	r1, [pc, #292]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800375e:	4b45      	ldr	r3, [pc, #276]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4942      	ldr	r1, [pc, #264]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800377c:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	493a      	ldr	r1, [pc, #232]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800379a:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	4933      	ldr	r1, [pc, #204]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037b8:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c4:	492b      	ldr	r1, [pc, #172]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80037d6:	4b27      	ldr	r3, [pc, #156]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	4924      	ldr	r1, [pc, #144]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80037f4:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	491c      	ldr	r1, [pc, #112]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003812:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	4915      	ldr	r1, [pc, #84]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003820:	4313      	orrs	r3, r2
 8003822:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003830:	4b10      	ldr	r3, [pc, #64]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	490d      	ldr	r1, [pc, #52]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800383e:	4313      	orrs	r3, r2
 8003840:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	4906      	ldr	r1, [pc, #24]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800385c:	4313      	orrs	r3, r2
 800385e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00c      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800386c:	4b01      	ldr	r3, [pc, #4]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	e002      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003880:	490b      	ldr	r1, [pc, #44]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003882:	4313      	orrs	r3, r2
 8003884:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003892:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389e:	4904      	ldr	r1, [pc, #16]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3748      	adds	r7, #72	; 0x48
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000

080038b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e01d      	b.n	8003902 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd fe6e 	bl	80015bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f000 fa34 	bl	8003d60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <HAL_TIM_Base_Start_IT+0x50>)
 800392c:	4013      	ands	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b06      	cmp	r3, #6
 8003934:	d00b      	beq.n	800394e <HAL_TIM_Base_Start_IT+0x42>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393c:	d007      	beq.n	800394e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	00010007 	.word	0x00010007

08003960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d122      	bne.n	80039bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b02      	cmp	r3, #2
 8003982:	d11b      	bne.n	80039bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0202 	mvn.w	r2, #2
 800398c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9be 	bl	8003d24 <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f9b0 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f9c1 	bl	8003d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d122      	bne.n	8003a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d11b      	bne.n	8003a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0204 	mvn.w	r2, #4
 80039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f994 	bl	8003d24 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f986 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f997 	bl	8003d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d122      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d11b      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0208 	mvn.w	r2, #8
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f96a 	bl	8003d24 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f95c 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f96d 	bl	8003d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0210 	mvn.w	r2, #16
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f940 	bl	8003d24 <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f932 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f943 	bl	8003d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0201 	mvn.w	r2, #1
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd fde4 	bl	80016ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b80      	cmp	r3, #128	; 0x80
 8003af0:	d10e      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afc:	2b80      	cmp	r3, #128	; 0x80
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 faf6 	bl	80040fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2a:	2b80      	cmp	r3, #128	; 0x80
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fae9 	bl	8004110 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f8f1 	bl	8003d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0220 	mvn.w	r2, #32
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 faa9 	bl	80040e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_TIM_ConfigClockSource+0x18>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e0a8      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x16a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bd8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003be0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d067      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x124>
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d80b      	bhi.n	8003c0e <HAL_TIM_ConfigClockSource+0x70>
 8003bf6:	2b10      	cmp	r3, #16
 8003bf8:	d073      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x144>
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d802      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x66>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d06f      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c02:	e078      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d06c      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x144>
 8003c08:	2b30      	cmp	r3, #48	; 0x30
 8003c0a:	d06a      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003c0c:	e073      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c0e:	2b70      	cmp	r3, #112	; 0x70
 8003c10:	d00d      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x90>
 8003c12:	2b70      	cmp	r3, #112	; 0x70
 8003c14:	d804      	bhi.n	8003c20 <HAL_TIM_ConfigClockSource+0x82>
 8003c16:	2b50      	cmp	r3, #80	; 0x50
 8003c18:	d033      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0xe4>
 8003c1a:	2b60      	cmp	r3, #96	; 0x60
 8003c1c:	d041      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003c1e:	e06a      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c24:	d066      	beq.n	8003cf4 <HAL_TIM_ConfigClockSource+0x156>
 8003c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2a:	d017      	beq.n	8003c5c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003c2c:	e063      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6899      	ldr	r1, [r3, #8]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f000 f9a7 	bl	8003f90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	609a      	str	r2, [r3, #8]
      break;
 8003c5a:	e04c      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	6899      	ldr	r1, [r3, #8]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f000 f990 	bl	8003f90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c7e:	609a      	str	r2, [r3, #8]
      break;
 8003c80:	e039      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 f904 	bl	8003e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2150      	movs	r1, #80	; 0x50
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f95d 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e029      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f000 f923 	bl	8003efa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2160      	movs	r1, #96	; 0x60
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f94d 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 8003cc0:	e019      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f000 f8e4 	bl	8003e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2140      	movs	r1, #64	; 0x40
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f93d 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 8003ce0:	e009      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f000 f934 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003cf4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a42      	ldr	r2, [pc, #264]	; (8003e7c <TIM_Base_SetConfig+0x11c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7e:	d00f      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a3f      	ldr	r2, [pc, #252]	; (8003e80 <TIM_Base_SetConfig+0x120>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00b      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a3e      	ldr	r2, [pc, #248]	; (8003e84 <TIM_Base_SetConfig+0x124>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d007      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a3d      	ldr	r2, [pc, #244]	; (8003e88 <TIM_Base_SetConfig+0x128>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_Base_SetConfig+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a3c      	ldr	r2, [pc, #240]	; (8003e8c <TIM_Base_SetConfig+0x12c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d108      	bne.n	8003db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a31      	ldr	r2, [pc, #196]	; (8003e7c <TIM_Base_SetConfig+0x11c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01f      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc0:	d01b      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2e      	ldr	r2, [pc, #184]	; (8003e80 <TIM_Base_SetConfig+0x120>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d017      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a2d      	ldr	r2, [pc, #180]	; (8003e84 <TIM_Base_SetConfig+0x124>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <TIM_Base_SetConfig+0x128>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00f      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <TIM_Base_SetConfig+0x130>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2b      	ldr	r2, [pc, #172]	; (8003e94 <TIM_Base_SetConfig+0x134>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <TIM_Base_SetConfig+0x138>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_Base_SetConfig+0x9a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a25      	ldr	r2, [pc, #148]	; (8003e8c <TIM_Base_SetConfig+0x12c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d108      	bne.n	8003e0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <TIM_Base_SetConfig+0x11c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d013      	beq.n	8003e60 <TIM_Base_SetConfig+0x100>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <TIM_Base_SetConfig+0x128>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00f      	beq.n	8003e60 <TIM_Base_SetConfig+0x100>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <TIM_Base_SetConfig+0x130>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <TIM_Base_SetConfig+0x100>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <TIM_Base_SetConfig+0x134>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <TIM_Base_SetConfig+0x100>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a11      	ldr	r2, [pc, #68]	; (8003e98 <TIM_Base_SetConfig+0x138>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_Base_SetConfig+0x100>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <TIM_Base_SetConfig+0x12c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d103      	bne.n	8003e68 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	615a      	str	r2, [r3, #20]
}
 8003e6e:	bf00      	nop
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40012c00 	.word	0x40012c00
 8003e80:	40000400 	.word	0x40000400
 8003e84:	40000800 	.word	0x40000800
 8003e88:	40013400 	.word	0x40013400
 8003e8c:	40015000 	.word	0x40015000
 8003e90:	40014000 	.word	0x40014000
 8003e94:	40014400 	.word	0x40014400
 8003e98:	40014800 	.word	0x40014800

08003e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f023 0201 	bic.w	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f023 030a 	bic.w	r3, r3, #10
 8003ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b087      	sub	sp, #28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f023 0210 	bic.w	r2, r3, #16
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	031b      	lsls	r3, r3, #12
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f043 0307 	orr.w	r3, r3, #7
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	609a      	str	r2, [r3, #8]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	021a      	lsls	r2, r3, #8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	609a      	str	r2, [r3, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e06d      	b.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a30      	ldr	r2, [pc, #192]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2f      	ldr	r2, [pc, #188]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800402c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d01d      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004064:	d018      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1a      	ldr	r2, [pc, #104]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00e      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d009      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a11      	ldr	r2, [pc, #68]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d10c      	bne.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40013400 	.word	0x40013400
 80040d8:	40015000 	.word	0x40015000
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40014000 	.word	0x40014000

080040e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e040      	b.n	80041b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd fb64 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2224      	movs	r2, #36	; 0x24
 8004150:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fabc 	bl	80046e0 <UART_SetConfig>
 8004168:	4603      	mov	r3, r0
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e022      	b.n	80041b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fcca 	bl	8004b14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800418e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800419e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fd51 	bl	8004c58 <UART_CheckIdleState>
 80041b6:	4603      	mov	r3, r0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	f040 8081 	bne.w	80042dc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_UART_Transmit+0x26>
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e079      	b.n	80042de <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_UART_Transmit+0x38>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e072      	b.n	80042de <HAL_UART_Transmit+0x11e>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2221      	movs	r2, #33	; 0x21
 800420a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800420c:	f7fd fcae 	bl	8001b6c <HAL_GetTick>
 8004210:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	88fa      	ldrh	r2, [r7, #6]
 8004216:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	88fa      	ldrh	r2, [r7, #6]
 800421e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422a:	d108      	bne.n	800423e <HAL_UART_Transmit+0x7e>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d104      	bne.n	800423e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e003      	b.n	8004246 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004246:	e02d      	b.n	80042a4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2200      	movs	r2, #0
 8004250:	2180      	movs	r1, #128	; 0x80
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fd45 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e03d      	b.n	80042de <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	881a      	ldrh	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004274:	b292      	uxth	r2, r2
 8004276:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	3302      	adds	r3, #2
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	e008      	b.n	8004292 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b292      	uxth	r2, r2
 800428a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	3301      	adds	r3, #1
 8004290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1cb      	bne.n	8004248 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2200      	movs	r2, #0
 80042b8:	2140      	movs	r1, #64	; 0x40
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fd11 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e009      	b.n	80042de <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e000      	b.n	80042de <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80042dc:	2302      	movs	r3, #2
  }
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	f040 808a 	bne.w	8004414 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_UART_Receive_IT+0x24>
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e082      	b.n	8004416 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_UART_Receive_IT+0x36>
 800431a:	2302      	movs	r3, #2
 800431c:	e07b      	b.n	8004416 <HAL_UART_Receive_IT+0x12e>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	88fa      	ldrh	r2, [r7, #6]
 8004330:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434a:	d10e      	bne.n	800436a <HAL_UART_Receive_IT+0x82>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <HAL_UART_Receive_IT+0x78>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f240 12ff 	movw	r2, #511	; 0x1ff
 800435a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800435e:	e02d      	b.n	80043bc <HAL_UART_Receive_IT+0xd4>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	22ff      	movs	r2, #255	; 0xff
 8004364:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004368:	e028      	b.n	80043bc <HAL_UART_Receive_IT+0xd4>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10d      	bne.n	800438e <HAL_UART_Receive_IT+0xa6>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <HAL_UART_Receive_IT+0x9c>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	22ff      	movs	r2, #255	; 0xff
 800437e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004382:	e01b      	b.n	80043bc <HAL_UART_Receive_IT+0xd4>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	227f      	movs	r2, #127	; 0x7f
 8004388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800438c:	e016      	b.n	80043bc <HAL_UART_Receive_IT+0xd4>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004396:	d10d      	bne.n	80043b4 <HAL_UART_Receive_IT+0xcc>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d104      	bne.n	80043aa <HAL_UART_Receive_IT+0xc2>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	227f      	movs	r2, #127	; 0x7f
 80043a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043a8:	e008      	b.n	80043bc <HAL_UART_Receive_IT+0xd4>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	223f      	movs	r2, #63	; 0x3f
 80043ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043b2:	e003      	b.n	80043bc <HAL_UART_Receive_IT+0xd4>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2222      	movs	r2, #34	; 0x22
 80043c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e0:	d107      	bne.n	80043f2 <HAL_UART_Receive_IT+0x10a>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <HAL_UART_Receive_IT+0x13c>)
 80043ee:	661a      	str	r2, [r3, #96]	; 0x60
 80043f0:	e002      	b.n	80043f8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <HAL_UART_Receive_IT+0x140>)
 80043f6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800440e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	e000      	b.n	8004416 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004414:	2302      	movs	r3, #2
  }
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	08004f1d 	.word	0x08004f1d
 8004428:	08004e77 	.word	0x08004e77

0800442c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d113      	bne.n	8004484 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00e      	beq.n	8004484 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d009      	beq.n	8004484 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8114 	beq.w	80046a2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4798      	blx	r3
      }
      return;
 8004482:	e10e      	b.n	80046a2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80d6 	beq.w	8004638 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d105      	bne.n	80044a2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80cb 	beq.w	8004638 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00e      	beq.n	80044ca <HAL_UART_IRQHandler+0x9e>
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2201      	movs	r2, #1
 80044bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c2:	f043 0201 	orr.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00e      	beq.n	80044f2 <HAL_UART_IRQHandler+0xc6>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2202      	movs	r2, #2
 80044e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ea:	f043 0204 	orr.w	r2, r3, #4
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00e      	beq.n	800451a <HAL_UART_IRQHandler+0xee>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2204      	movs	r2, #4
 800450c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004512:	f043 0202 	orr.w	r2, r3, #2
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d013      	beq.n	800454c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b00      	cmp	r3, #0
 800452c:	d104      	bne.n	8004538 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2208      	movs	r2, #8
 800453e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004544:	f043 0208 	orr.w	r2, r3, #8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00f      	beq.n	8004576 <HAL_UART_IRQHandler+0x14a>
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004568:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800456e:	f043 0220 	orr.w	r2, r3, #32
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8093 	beq.w	80046a6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00c      	beq.n	80045a4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d004      	beq.n	80045c2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d031      	beq.n	8004626 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fc08 	bl	8004dd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d123      	bne.n	800461e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d013      	beq.n	8004616 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f2:	4a30      	ldr	r2, [pc, #192]	; (80046b4 <HAL_UART_IRQHandler+0x288>)
 80045f4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fd fbf5 	bl	8001dea <HAL_DMA_Abort_IT>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d016      	beq.n	8004634 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004610:	4610      	mov	r0, r2
 8004612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004614:	e00e      	b.n	8004634 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f858 	bl	80046cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461c:	e00a      	b.n	8004634 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f854 	bl	80046cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004624:	e006      	b.n	8004634 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f850 	bl	80046cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004632:	e038      	b.n	80046a6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004634:	bf00      	nop
    return;
 8004636:	e036      	b.n	80046a6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <HAL_UART_IRQHandler+0x232>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fcb3 	bl	8004fc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800465c:	e026      	b.n	80046ac <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004676:	2b00      	cmp	r3, #0
 8004678:	d017      	beq.n	80046aa <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
    }
    return;
 8004682:	e012      	b.n	80046aa <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00e      	beq.n	80046ac <HAL_UART_IRQHandler+0x280>
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d009      	beq.n	80046ac <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fbd3 	bl	8004e44 <UART_EndTransmit_IT>
    return;
 800469e:	bf00      	nop
 80046a0:	e004      	b.n	80046ac <HAL_UART_IRQHandler+0x280>
      return;
 80046a2:	bf00      	nop
 80046a4:	e002      	b.n	80046ac <HAL_UART_IRQHandler+0x280>
    return;
 80046a6:	bf00      	nop
 80046a8:	e000      	b.n	80046ac <HAL_UART_IRQHandler+0x280>
    return;
 80046aa:	bf00      	nop
  }

}
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	08004e19 	.word	0x08004e19

080046b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4bac      	ldr	r3, [pc, #688]	; (80049c0 <UART_SetConfig+0x2e0>)
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	6939      	ldr	r1, [r7, #16]
 8004718:	430b      	orrs	r3, r1
 800471a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	430a      	orrs	r2, r1
 8004754:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a9a      	ldr	r2, [pc, #616]	; (80049c4 <UART_SetConfig+0x2e4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d121      	bne.n	80047a4 <UART_SetConfig+0xc4>
 8004760:	4b99      	ldr	r3, [pc, #612]	; (80049c8 <UART_SetConfig+0x2e8>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b03      	cmp	r3, #3
 800476a:	d817      	bhi.n	800479c <UART_SetConfig+0xbc>
 800476c:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0x94>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	08004785 	.word	0x08004785
 8004778:	08004791 	.word	0x08004791
 800477c:	08004797 	.word	0x08004797
 8004780:	0800478b 	.word	0x0800478b
 8004784:	2301      	movs	r3, #1
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e0b2      	b.n	80048f0 <UART_SetConfig+0x210>
 800478a:	2302      	movs	r3, #2
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e0af      	b.n	80048f0 <UART_SetConfig+0x210>
 8004790:	2304      	movs	r3, #4
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e0ac      	b.n	80048f0 <UART_SetConfig+0x210>
 8004796:	2308      	movs	r3, #8
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e0a9      	b.n	80048f0 <UART_SetConfig+0x210>
 800479c:	2310      	movs	r3, #16
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	bf00      	nop
 80047a2:	e0a5      	b.n	80048f0 <UART_SetConfig+0x210>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a88      	ldr	r2, [pc, #544]	; (80049cc <UART_SetConfig+0x2ec>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d123      	bne.n	80047f6 <UART_SetConfig+0x116>
 80047ae:	4b86      	ldr	r3, [pc, #536]	; (80049c8 <UART_SetConfig+0x2e8>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ba:	d012      	beq.n	80047e2 <UART_SetConfig+0x102>
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c0:	d802      	bhi.n	80047c8 <UART_SetConfig+0xe8>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <UART_SetConfig+0xf6>
 80047c6:	e012      	b.n	80047ee <UART_SetConfig+0x10e>
 80047c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047cc:	d00c      	beq.n	80047e8 <UART_SetConfig+0x108>
 80047ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047d2:	d003      	beq.n	80047dc <UART_SetConfig+0xfc>
 80047d4:	e00b      	b.n	80047ee <UART_SetConfig+0x10e>
 80047d6:	2300      	movs	r3, #0
 80047d8:	77fb      	strb	r3, [r7, #31]
 80047da:	e089      	b.n	80048f0 <UART_SetConfig+0x210>
 80047dc:	2302      	movs	r3, #2
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e086      	b.n	80048f0 <UART_SetConfig+0x210>
 80047e2:	2304      	movs	r3, #4
 80047e4:	77fb      	strb	r3, [r7, #31]
 80047e6:	e083      	b.n	80048f0 <UART_SetConfig+0x210>
 80047e8:	2308      	movs	r3, #8
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e080      	b.n	80048f0 <UART_SetConfig+0x210>
 80047ee:	2310      	movs	r3, #16
 80047f0:	77fb      	strb	r3, [r7, #31]
 80047f2:	bf00      	nop
 80047f4:	e07c      	b.n	80048f0 <UART_SetConfig+0x210>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a75      	ldr	r2, [pc, #468]	; (80049d0 <UART_SetConfig+0x2f0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d123      	bne.n	8004848 <UART_SetConfig+0x168>
 8004800:	4b71      	ldr	r3, [pc, #452]	; (80049c8 <UART_SetConfig+0x2e8>)
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004808:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800480c:	d012      	beq.n	8004834 <UART_SetConfig+0x154>
 800480e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004812:	d802      	bhi.n	800481a <UART_SetConfig+0x13a>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <UART_SetConfig+0x148>
 8004818:	e012      	b.n	8004840 <UART_SetConfig+0x160>
 800481a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800481e:	d00c      	beq.n	800483a <UART_SetConfig+0x15a>
 8004820:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004824:	d003      	beq.n	800482e <UART_SetConfig+0x14e>
 8004826:	e00b      	b.n	8004840 <UART_SetConfig+0x160>
 8004828:	2300      	movs	r3, #0
 800482a:	77fb      	strb	r3, [r7, #31]
 800482c:	e060      	b.n	80048f0 <UART_SetConfig+0x210>
 800482e:	2302      	movs	r3, #2
 8004830:	77fb      	strb	r3, [r7, #31]
 8004832:	e05d      	b.n	80048f0 <UART_SetConfig+0x210>
 8004834:	2304      	movs	r3, #4
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e05a      	b.n	80048f0 <UART_SetConfig+0x210>
 800483a:	2308      	movs	r3, #8
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e057      	b.n	80048f0 <UART_SetConfig+0x210>
 8004840:	2310      	movs	r3, #16
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	bf00      	nop
 8004846:	e053      	b.n	80048f0 <UART_SetConfig+0x210>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a61      	ldr	r2, [pc, #388]	; (80049d4 <UART_SetConfig+0x2f4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d123      	bne.n	800489a <UART_SetConfig+0x1ba>
 8004852:	4b5d      	ldr	r3, [pc, #372]	; (80049c8 <UART_SetConfig+0x2e8>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800485a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485e:	d012      	beq.n	8004886 <UART_SetConfig+0x1a6>
 8004860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004864:	d802      	bhi.n	800486c <UART_SetConfig+0x18c>
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <UART_SetConfig+0x19a>
 800486a:	e012      	b.n	8004892 <UART_SetConfig+0x1b2>
 800486c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004870:	d00c      	beq.n	800488c <UART_SetConfig+0x1ac>
 8004872:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004876:	d003      	beq.n	8004880 <UART_SetConfig+0x1a0>
 8004878:	e00b      	b.n	8004892 <UART_SetConfig+0x1b2>
 800487a:	2300      	movs	r3, #0
 800487c:	77fb      	strb	r3, [r7, #31]
 800487e:	e037      	b.n	80048f0 <UART_SetConfig+0x210>
 8004880:	2302      	movs	r3, #2
 8004882:	77fb      	strb	r3, [r7, #31]
 8004884:	e034      	b.n	80048f0 <UART_SetConfig+0x210>
 8004886:	2304      	movs	r3, #4
 8004888:	77fb      	strb	r3, [r7, #31]
 800488a:	e031      	b.n	80048f0 <UART_SetConfig+0x210>
 800488c:	2308      	movs	r3, #8
 800488e:	77fb      	strb	r3, [r7, #31]
 8004890:	e02e      	b.n	80048f0 <UART_SetConfig+0x210>
 8004892:	2310      	movs	r3, #16
 8004894:	77fb      	strb	r3, [r7, #31]
 8004896:	bf00      	nop
 8004898:	e02a      	b.n	80048f0 <UART_SetConfig+0x210>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a4e      	ldr	r2, [pc, #312]	; (80049d8 <UART_SetConfig+0x2f8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d123      	bne.n	80048ec <UART_SetConfig+0x20c>
 80048a4:	4b48      	ldr	r3, [pc, #288]	; (80049c8 <UART_SetConfig+0x2e8>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80048ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b0:	d012      	beq.n	80048d8 <UART_SetConfig+0x1f8>
 80048b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b6:	d802      	bhi.n	80048be <UART_SetConfig+0x1de>
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <UART_SetConfig+0x1ec>
 80048bc:	e012      	b.n	80048e4 <UART_SetConfig+0x204>
 80048be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048c2:	d00c      	beq.n	80048de <UART_SetConfig+0x1fe>
 80048c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048c8:	d003      	beq.n	80048d2 <UART_SetConfig+0x1f2>
 80048ca:	e00b      	b.n	80048e4 <UART_SetConfig+0x204>
 80048cc:	2300      	movs	r3, #0
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e00e      	b.n	80048f0 <UART_SetConfig+0x210>
 80048d2:	2302      	movs	r3, #2
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e00b      	b.n	80048f0 <UART_SetConfig+0x210>
 80048d8:	2304      	movs	r3, #4
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e008      	b.n	80048f0 <UART_SetConfig+0x210>
 80048de:	2308      	movs	r3, #8
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e005      	b.n	80048f0 <UART_SetConfig+0x210>
 80048e4:	2310      	movs	r3, #16
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	bf00      	nop
 80048ea:	e001      	b.n	80048f0 <UART_SetConfig+0x210>
 80048ec:	2310      	movs	r3, #16
 80048ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	f040 8090 	bne.w	8004a1c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80048fc:	7ffb      	ldrb	r3, [r7, #31]
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d86c      	bhi.n	80049dc <UART_SetConfig+0x2fc>
 8004902:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0x228>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	0800492d 	.word	0x0800492d
 800490c:	0800494d 	.word	0x0800494d
 8004910:	0800496d 	.word	0x0800496d
 8004914:	080049dd 	.word	0x080049dd
 8004918:	08004989 	.word	0x08004989
 800491c:	080049dd 	.word	0x080049dd
 8004920:	080049dd 	.word	0x080049dd
 8004924:	080049dd 	.word	0x080049dd
 8004928:	080049a9 	.word	0x080049a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800492c:	f7fe fd60 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8004930:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	005a      	lsls	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	441a      	add	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	fbb2 f3f3 	udiv	r3, r2, r3
 8004946:	b29b      	uxth	r3, r3
 8004948:	61bb      	str	r3, [r7, #24]
        break;
 800494a:	e04a      	b.n	80049e2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7fe fd72 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8004950:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	005a      	lsls	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	441a      	add	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	fbb2 f3f3 	udiv	r3, r2, r3
 8004966:	b29b      	uxth	r3, r3
 8004968:	61bb      	str	r3, [r7, #24]
        break;
 800496a:	e03a      	b.n	80049e2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004976:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6852      	ldr	r2, [r2, #4]
 800497e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004982:	b29b      	uxth	r3, r3
 8004984:	61bb      	str	r3, [r7, #24]
        break;
 8004986:	e02c      	b.n	80049e2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004988:	f7fe fcbc 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 800498c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	005a      	lsls	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	441a      	add	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	61bb      	str	r3, [r7, #24]
        break;
 80049a6:	e01c      	b.n	80049e2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	61bb      	str	r3, [r7, #24]
        break;
 80049be:	e010      	b.n	80049e2 <UART_SetConfig+0x302>
 80049c0:	efff69f3 	.word	0xefff69f3
 80049c4:	40013800 	.word	0x40013800
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40004400 	.word	0x40004400
 80049d0:	40004800 	.word	0x40004800
 80049d4:	40004c00 	.word	0x40004c00
 80049d8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	75fb      	strb	r3, [r7, #23]
        break;
 80049e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b0f      	cmp	r3, #15
 80049e6:	d916      	bls.n	8004a16 <UART_SetConfig+0x336>
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ee:	d212      	bcs.n	8004a16 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f023 030f 	bic.w	r3, r3, #15
 80049f8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	897b      	ldrh	r3, [r7, #10]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	897a      	ldrh	r2, [r7, #10]
 8004a12:	60da      	str	r2, [r3, #12]
 8004a14:	e072      	b.n	8004afc <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
 8004a1a:	e06f      	b.n	8004afc <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004a1c:	7ffb      	ldrb	r3, [r7, #31]
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d85b      	bhi.n	8004ada <UART_SetConfig+0x3fa>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <UART_SetConfig+0x348>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a4d 	.word	0x08004a4d
 8004a2c:	08004a6b 	.word	0x08004a6b
 8004a30:	08004a89 	.word	0x08004a89
 8004a34:	08004adb 	.word	0x08004adb
 8004a38:	08004aa5 	.word	0x08004aa5
 8004a3c:	08004adb 	.word	0x08004adb
 8004a40:	08004adb 	.word	0x08004adb
 8004a44:	08004adb 	.word	0x08004adb
 8004a48:	08004ac3 	.word	0x08004ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a4c:	f7fe fcd0 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8004a50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	085a      	lsrs	r2, r3, #1
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	441a      	add	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	61bb      	str	r3, [r7, #24]
        break;
 8004a68:	e03a      	b.n	8004ae0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a6a:	f7fe fce3 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8004a6e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	085a      	lsrs	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	441a      	add	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	61bb      	str	r3, [r7, #24]
        break;
 8004a86:	e02b      	b.n	8004ae0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004a92:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6852      	ldr	r2, [r2, #4]
 8004a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	61bb      	str	r3, [r7, #24]
        break;
 8004aa2:	e01d      	b.n	8004ae0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa4:	f7fe fc2e 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004aa8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	085a      	lsrs	r2, r3, #1
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	441a      	add	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	61bb      	str	r3, [r7, #24]
        break;
 8004ac0:	e00e      	b.n	8004ae0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	085b      	lsrs	r3, r3, #1
 8004ac8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	61bb      	str	r3, [r7, #24]
        break;
 8004ad8:	e002      	b.n	8004ae0 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	75fb      	strb	r3, [r7, #23]
        break;
 8004ade:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2b0f      	cmp	r3, #15
 8004ae4:	d908      	bls.n	8004af8 <UART_SetConfig+0x418>
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aec:	d204      	bcs.n	8004af8 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	60da      	str	r2, [r3, #12]
 8004af6:	e001      	b.n	8004afc <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop

08004b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01a      	beq.n	8004c2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c12:	d10a      	bne.n	8004c2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c66:	f7fc ff81 	bl	8001b6c <HAL_GetTick>
 8004c6a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d10e      	bne.n	8004c98 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f82a 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e020      	b.n	8004cda <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d10e      	bne.n	8004cc4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f814 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e00a      	b.n	8004cda <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf2:	e05d      	b.n	8004db0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d059      	beq.n	8004db0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfc:	f7fc ff36 	bl	8001b6c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d302      	bcc.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d11b      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d20:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
 8004d30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e042      	b.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02b      	beq.n	8004db0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d66:	d123      	bne.n	8004db0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d70:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d80:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e00f      	b.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d092      	beq.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0201 	bic.w	r2, r2, #1
 8004dfe:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff fc48 	bl	80046cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff fc25 	bl	80046b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e84:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e8a:	2b22      	cmp	r3, #34	; 0x22
 8004e8c:	d13a      	bne.n	8004f04 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e94:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e96:	89bb      	ldrh	r3, [r7, #12]
 8004e98:	b2d9      	uxtb	r1, r3
 8004e9a:	89fb      	ldrh	r3, [r7, #14]
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	400a      	ands	r2, r1
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d121      	bne.n	8004f14 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ede:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0201 	bic.w	r2, r2, #1
 8004eee:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7fc fd33 	bl	8001968 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f02:	e007      	b.n	8004f14 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0208 	orr.w	r2, r2, #8
 8004f12:	619a      	str	r2, [r3, #24]
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f2a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f30:	2b22      	cmp	r3, #34	; 0x22
 8004f32:	d13a      	bne.n	8004faa <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f3a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f40:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f42:	89ba      	ldrh	r2, [r7, #12]
 8004f44:	89fb      	ldrh	r3, [r7, #14]
 8004f46:	4013      	ands	r3, r2
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f52:	1c9a      	adds	r2, r3, #2
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d121      	bne.n	8004fba <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f84:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0201 	bic.w	r2, r2, #1
 8004f94:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fc fce0 	bl	8001968 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fa8:	e007      	b.n	8004fba <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	699a      	ldr	r2, [r3, #24]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0208 	orr.w	r2, r2, #8
 8004fb8:	619a      	str	r2, [r3, #24]
}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <__errno>:
 8004fd8:	4b01      	ldr	r3, [pc, #4]	; (8004fe0 <__errno+0x8>)
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	2000000c 	.word	0x2000000c

08004fe4 <__libc_init_array>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	4e0d      	ldr	r6, [pc, #52]	; (800501c <__libc_init_array+0x38>)
 8004fe8:	4c0d      	ldr	r4, [pc, #52]	; (8005020 <__libc_init_array+0x3c>)
 8004fea:	1ba4      	subs	r4, r4, r6
 8004fec:	10a4      	asrs	r4, r4, #2
 8004fee:	2500      	movs	r5, #0
 8004ff0:	42a5      	cmp	r5, r4
 8004ff2:	d109      	bne.n	8005008 <__libc_init_array+0x24>
 8004ff4:	4e0b      	ldr	r6, [pc, #44]	; (8005024 <__libc_init_array+0x40>)
 8004ff6:	4c0c      	ldr	r4, [pc, #48]	; (8005028 <__libc_init_array+0x44>)
 8004ff8:	f000 ff68 	bl	8005ecc <_init>
 8004ffc:	1ba4      	subs	r4, r4, r6
 8004ffe:	10a4      	asrs	r4, r4, #2
 8005000:	2500      	movs	r5, #0
 8005002:	42a5      	cmp	r5, r4
 8005004:	d105      	bne.n	8005012 <__libc_init_array+0x2e>
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800500c:	4798      	blx	r3
 800500e:	3501      	adds	r5, #1
 8005010:	e7ee      	b.n	8004ff0 <__libc_init_array+0xc>
 8005012:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005016:	4798      	blx	r3
 8005018:	3501      	adds	r5, #1
 800501a:	e7f2      	b.n	8005002 <__libc_init_array+0x1e>
 800501c:	08005fec 	.word	0x08005fec
 8005020:	08005fec 	.word	0x08005fec
 8005024:	08005fec 	.word	0x08005fec
 8005028:	08005ff0 	.word	0x08005ff0

0800502c <memset>:
 800502c:	4402      	add	r2, r0
 800502e:	4603      	mov	r3, r0
 8005030:	4293      	cmp	r3, r2
 8005032:	d100      	bne.n	8005036 <memset+0xa>
 8005034:	4770      	bx	lr
 8005036:	f803 1b01 	strb.w	r1, [r3], #1
 800503a:	e7f9      	b.n	8005030 <memset+0x4>

0800503c <iprintf>:
 800503c:	b40f      	push	{r0, r1, r2, r3}
 800503e:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <iprintf+0x2c>)
 8005040:	b513      	push	{r0, r1, r4, lr}
 8005042:	681c      	ldr	r4, [r3, #0]
 8005044:	b124      	cbz	r4, 8005050 <iprintf+0x14>
 8005046:	69a3      	ldr	r3, [r4, #24]
 8005048:	b913      	cbnz	r3, 8005050 <iprintf+0x14>
 800504a:	4620      	mov	r0, r4
 800504c:	f000 fa22 	bl	8005494 <__sinit>
 8005050:	ab05      	add	r3, sp, #20
 8005052:	9a04      	ldr	r2, [sp, #16]
 8005054:	68a1      	ldr	r1, [r4, #8]
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	4620      	mov	r0, r4
 800505a:	f000 fbdb 	bl	8005814 <_vfiprintf_r>
 800505e:	b002      	add	sp, #8
 8005060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005064:	b004      	add	sp, #16
 8005066:	4770      	bx	lr
 8005068:	2000000c 	.word	0x2000000c

0800506c <_puts_r>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	460e      	mov	r6, r1
 8005070:	4605      	mov	r5, r0
 8005072:	b118      	cbz	r0, 800507c <_puts_r+0x10>
 8005074:	6983      	ldr	r3, [r0, #24]
 8005076:	b90b      	cbnz	r3, 800507c <_puts_r+0x10>
 8005078:	f000 fa0c 	bl	8005494 <__sinit>
 800507c:	69ab      	ldr	r3, [r5, #24]
 800507e:	68ac      	ldr	r4, [r5, #8]
 8005080:	b913      	cbnz	r3, 8005088 <_puts_r+0x1c>
 8005082:	4628      	mov	r0, r5
 8005084:	f000 fa06 	bl	8005494 <__sinit>
 8005088:	4b23      	ldr	r3, [pc, #140]	; (8005118 <_puts_r+0xac>)
 800508a:	429c      	cmp	r4, r3
 800508c:	d117      	bne.n	80050be <_puts_r+0x52>
 800508e:	686c      	ldr	r4, [r5, #4]
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	071b      	lsls	r3, r3, #28
 8005094:	d51d      	bpl.n	80050d2 <_puts_r+0x66>
 8005096:	6923      	ldr	r3, [r4, #16]
 8005098:	b1db      	cbz	r3, 80050d2 <_puts_r+0x66>
 800509a:	3e01      	subs	r6, #1
 800509c:	68a3      	ldr	r3, [r4, #8]
 800509e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050a2:	3b01      	subs	r3, #1
 80050a4:	60a3      	str	r3, [r4, #8]
 80050a6:	b9e9      	cbnz	r1, 80050e4 <_puts_r+0x78>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	da2e      	bge.n	800510a <_puts_r+0x9e>
 80050ac:	4622      	mov	r2, r4
 80050ae:	210a      	movs	r1, #10
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 f83f 	bl	8005134 <__swbuf_r>
 80050b6:	3001      	adds	r0, #1
 80050b8:	d011      	beq.n	80050de <_puts_r+0x72>
 80050ba:	200a      	movs	r0, #10
 80050bc:	e011      	b.n	80050e2 <_puts_r+0x76>
 80050be:	4b17      	ldr	r3, [pc, #92]	; (800511c <_puts_r+0xb0>)
 80050c0:	429c      	cmp	r4, r3
 80050c2:	d101      	bne.n	80050c8 <_puts_r+0x5c>
 80050c4:	68ac      	ldr	r4, [r5, #8]
 80050c6:	e7e3      	b.n	8005090 <_puts_r+0x24>
 80050c8:	4b15      	ldr	r3, [pc, #84]	; (8005120 <_puts_r+0xb4>)
 80050ca:	429c      	cmp	r4, r3
 80050cc:	bf08      	it	eq
 80050ce:	68ec      	ldreq	r4, [r5, #12]
 80050d0:	e7de      	b.n	8005090 <_puts_r+0x24>
 80050d2:	4621      	mov	r1, r4
 80050d4:	4628      	mov	r0, r5
 80050d6:	f000 f87f 	bl	80051d8 <__swsetup_r>
 80050da:	2800      	cmp	r0, #0
 80050dc:	d0dd      	beq.n	800509a <_puts_r+0x2e>
 80050de:	f04f 30ff 	mov.w	r0, #4294967295
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	da04      	bge.n	80050f2 <_puts_r+0x86>
 80050e8:	69a2      	ldr	r2, [r4, #24]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	dc06      	bgt.n	80050fc <_puts_r+0x90>
 80050ee:	290a      	cmp	r1, #10
 80050f0:	d004      	beq.n	80050fc <_puts_r+0x90>
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	6022      	str	r2, [r4, #0]
 80050f8:	7019      	strb	r1, [r3, #0]
 80050fa:	e7cf      	b.n	800509c <_puts_r+0x30>
 80050fc:	4622      	mov	r2, r4
 80050fe:	4628      	mov	r0, r5
 8005100:	f000 f818 	bl	8005134 <__swbuf_r>
 8005104:	3001      	adds	r0, #1
 8005106:	d1c9      	bne.n	800509c <_puts_r+0x30>
 8005108:	e7e9      	b.n	80050de <_puts_r+0x72>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	200a      	movs	r0, #10
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	6022      	str	r2, [r4, #0]
 8005112:	7018      	strb	r0, [r3, #0]
 8005114:	e7e5      	b.n	80050e2 <_puts_r+0x76>
 8005116:	bf00      	nop
 8005118:	08005f78 	.word	0x08005f78
 800511c:	08005f98 	.word	0x08005f98
 8005120:	08005f58 	.word	0x08005f58

08005124 <puts>:
 8005124:	4b02      	ldr	r3, [pc, #8]	; (8005130 <puts+0xc>)
 8005126:	4601      	mov	r1, r0
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	f7ff bf9f 	b.w	800506c <_puts_r>
 800512e:	bf00      	nop
 8005130:	2000000c 	.word	0x2000000c

08005134 <__swbuf_r>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	460e      	mov	r6, r1
 8005138:	4614      	mov	r4, r2
 800513a:	4605      	mov	r5, r0
 800513c:	b118      	cbz	r0, 8005146 <__swbuf_r+0x12>
 800513e:	6983      	ldr	r3, [r0, #24]
 8005140:	b90b      	cbnz	r3, 8005146 <__swbuf_r+0x12>
 8005142:	f000 f9a7 	bl	8005494 <__sinit>
 8005146:	4b21      	ldr	r3, [pc, #132]	; (80051cc <__swbuf_r+0x98>)
 8005148:	429c      	cmp	r4, r3
 800514a:	d12a      	bne.n	80051a2 <__swbuf_r+0x6e>
 800514c:	686c      	ldr	r4, [r5, #4]
 800514e:	69a3      	ldr	r3, [r4, #24]
 8005150:	60a3      	str	r3, [r4, #8]
 8005152:	89a3      	ldrh	r3, [r4, #12]
 8005154:	071a      	lsls	r2, r3, #28
 8005156:	d52e      	bpl.n	80051b6 <__swbuf_r+0x82>
 8005158:	6923      	ldr	r3, [r4, #16]
 800515a:	b363      	cbz	r3, 80051b6 <__swbuf_r+0x82>
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	6820      	ldr	r0, [r4, #0]
 8005160:	1ac0      	subs	r0, r0, r3
 8005162:	6963      	ldr	r3, [r4, #20]
 8005164:	b2f6      	uxtb	r6, r6
 8005166:	4283      	cmp	r3, r0
 8005168:	4637      	mov	r7, r6
 800516a:	dc04      	bgt.n	8005176 <__swbuf_r+0x42>
 800516c:	4621      	mov	r1, r4
 800516e:	4628      	mov	r0, r5
 8005170:	f000 f926 	bl	80053c0 <_fflush_r>
 8005174:	bb28      	cbnz	r0, 80051c2 <__swbuf_r+0x8e>
 8005176:	68a3      	ldr	r3, [r4, #8]
 8005178:	3b01      	subs	r3, #1
 800517a:	60a3      	str	r3, [r4, #8]
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	6022      	str	r2, [r4, #0]
 8005182:	701e      	strb	r6, [r3, #0]
 8005184:	6963      	ldr	r3, [r4, #20]
 8005186:	3001      	adds	r0, #1
 8005188:	4283      	cmp	r3, r0
 800518a:	d004      	beq.n	8005196 <__swbuf_r+0x62>
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	07db      	lsls	r3, r3, #31
 8005190:	d519      	bpl.n	80051c6 <__swbuf_r+0x92>
 8005192:	2e0a      	cmp	r6, #10
 8005194:	d117      	bne.n	80051c6 <__swbuf_r+0x92>
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 f911 	bl	80053c0 <_fflush_r>
 800519e:	b190      	cbz	r0, 80051c6 <__swbuf_r+0x92>
 80051a0:	e00f      	b.n	80051c2 <__swbuf_r+0x8e>
 80051a2:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <__swbuf_r+0x9c>)
 80051a4:	429c      	cmp	r4, r3
 80051a6:	d101      	bne.n	80051ac <__swbuf_r+0x78>
 80051a8:	68ac      	ldr	r4, [r5, #8]
 80051aa:	e7d0      	b.n	800514e <__swbuf_r+0x1a>
 80051ac:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <__swbuf_r+0xa0>)
 80051ae:	429c      	cmp	r4, r3
 80051b0:	bf08      	it	eq
 80051b2:	68ec      	ldreq	r4, [r5, #12]
 80051b4:	e7cb      	b.n	800514e <__swbuf_r+0x1a>
 80051b6:	4621      	mov	r1, r4
 80051b8:	4628      	mov	r0, r5
 80051ba:	f000 f80d 	bl	80051d8 <__swsetup_r>
 80051be:	2800      	cmp	r0, #0
 80051c0:	d0cc      	beq.n	800515c <__swbuf_r+0x28>
 80051c2:	f04f 37ff 	mov.w	r7, #4294967295
 80051c6:	4638      	mov	r0, r7
 80051c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ca:	bf00      	nop
 80051cc:	08005f78 	.word	0x08005f78
 80051d0:	08005f98 	.word	0x08005f98
 80051d4:	08005f58 	.word	0x08005f58

080051d8 <__swsetup_r>:
 80051d8:	4b32      	ldr	r3, [pc, #200]	; (80052a4 <__swsetup_r+0xcc>)
 80051da:	b570      	push	{r4, r5, r6, lr}
 80051dc:	681d      	ldr	r5, [r3, #0]
 80051de:	4606      	mov	r6, r0
 80051e0:	460c      	mov	r4, r1
 80051e2:	b125      	cbz	r5, 80051ee <__swsetup_r+0x16>
 80051e4:	69ab      	ldr	r3, [r5, #24]
 80051e6:	b913      	cbnz	r3, 80051ee <__swsetup_r+0x16>
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 f953 	bl	8005494 <__sinit>
 80051ee:	4b2e      	ldr	r3, [pc, #184]	; (80052a8 <__swsetup_r+0xd0>)
 80051f0:	429c      	cmp	r4, r3
 80051f2:	d10f      	bne.n	8005214 <__swsetup_r+0x3c>
 80051f4:	686c      	ldr	r4, [r5, #4]
 80051f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	0715      	lsls	r5, r2, #28
 80051fe:	d42c      	bmi.n	800525a <__swsetup_r+0x82>
 8005200:	06d0      	lsls	r0, r2, #27
 8005202:	d411      	bmi.n	8005228 <__swsetup_r+0x50>
 8005204:	2209      	movs	r2, #9
 8005206:	6032      	str	r2, [r6, #0]
 8005208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800520c:	81a3      	strh	r3, [r4, #12]
 800520e:	f04f 30ff 	mov.w	r0, #4294967295
 8005212:	e03e      	b.n	8005292 <__swsetup_r+0xba>
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <__swsetup_r+0xd4>)
 8005216:	429c      	cmp	r4, r3
 8005218:	d101      	bne.n	800521e <__swsetup_r+0x46>
 800521a:	68ac      	ldr	r4, [r5, #8]
 800521c:	e7eb      	b.n	80051f6 <__swsetup_r+0x1e>
 800521e:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <__swsetup_r+0xd8>)
 8005220:	429c      	cmp	r4, r3
 8005222:	bf08      	it	eq
 8005224:	68ec      	ldreq	r4, [r5, #12]
 8005226:	e7e6      	b.n	80051f6 <__swsetup_r+0x1e>
 8005228:	0751      	lsls	r1, r2, #29
 800522a:	d512      	bpl.n	8005252 <__swsetup_r+0x7a>
 800522c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800522e:	b141      	cbz	r1, 8005242 <__swsetup_r+0x6a>
 8005230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005234:	4299      	cmp	r1, r3
 8005236:	d002      	beq.n	800523e <__swsetup_r+0x66>
 8005238:	4630      	mov	r0, r6
 800523a:	f000 fa19 	bl	8005670 <_free_r>
 800523e:	2300      	movs	r3, #0
 8005240:	6363      	str	r3, [r4, #52]	; 0x34
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005248:	81a3      	strh	r3, [r4, #12]
 800524a:	2300      	movs	r3, #0
 800524c:	6063      	str	r3, [r4, #4]
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	f043 0308 	orr.w	r3, r3, #8
 8005258:	81a3      	strh	r3, [r4, #12]
 800525a:	6923      	ldr	r3, [r4, #16]
 800525c:	b94b      	cbnz	r3, 8005272 <__swsetup_r+0x9a>
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005268:	d003      	beq.n	8005272 <__swsetup_r+0x9a>
 800526a:	4621      	mov	r1, r4
 800526c:	4630      	mov	r0, r6
 800526e:	f000 f9bf 	bl	80055f0 <__smakebuf_r>
 8005272:	89a2      	ldrh	r2, [r4, #12]
 8005274:	f012 0301 	ands.w	r3, r2, #1
 8005278:	d00c      	beq.n	8005294 <__swsetup_r+0xbc>
 800527a:	2300      	movs	r3, #0
 800527c:	60a3      	str	r3, [r4, #8]
 800527e:	6963      	ldr	r3, [r4, #20]
 8005280:	425b      	negs	r3, r3
 8005282:	61a3      	str	r3, [r4, #24]
 8005284:	6923      	ldr	r3, [r4, #16]
 8005286:	b953      	cbnz	r3, 800529e <__swsetup_r+0xc6>
 8005288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800528c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005290:	d1ba      	bne.n	8005208 <__swsetup_r+0x30>
 8005292:	bd70      	pop	{r4, r5, r6, pc}
 8005294:	0792      	lsls	r2, r2, #30
 8005296:	bf58      	it	pl
 8005298:	6963      	ldrpl	r3, [r4, #20]
 800529a:	60a3      	str	r3, [r4, #8]
 800529c:	e7f2      	b.n	8005284 <__swsetup_r+0xac>
 800529e:	2000      	movs	r0, #0
 80052a0:	e7f7      	b.n	8005292 <__swsetup_r+0xba>
 80052a2:	bf00      	nop
 80052a4:	2000000c 	.word	0x2000000c
 80052a8:	08005f78 	.word	0x08005f78
 80052ac:	08005f98 	.word	0x08005f98
 80052b0:	08005f58 	.word	0x08005f58

080052b4 <__sflush_r>:
 80052b4:	898a      	ldrh	r2, [r1, #12]
 80052b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ba:	4605      	mov	r5, r0
 80052bc:	0710      	lsls	r0, r2, #28
 80052be:	460c      	mov	r4, r1
 80052c0:	d458      	bmi.n	8005374 <__sflush_r+0xc0>
 80052c2:	684b      	ldr	r3, [r1, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dc05      	bgt.n	80052d4 <__sflush_r+0x20>
 80052c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	dc02      	bgt.n	80052d4 <__sflush_r+0x20>
 80052ce:	2000      	movs	r0, #0
 80052d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052d6:	2e00      	cmp	r6, #0
 80052d8:	d0f9      	beq.n	80052ce <__sflush_r+0x1a>
 80052da:	2300      	movs	r3, #0
 80052dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052e0:	682f      	ldr	r7, [r5, #0]
 80052e2:	6a21      	ldr	r1, [r4, #32]
 80052e4:	602b      	str	r3, [r5, #0]
 80052e6:	d032      	beq.n	800534e <__sflush_r+0x9a>
 80052e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	075a      	lsls	r2, r3, #29
 80052ee:	d505      	bpl.n	80052fc <__sflush_r+0x48>
 80052f0:	6863      	ldr	r3, [r4, #4]
 80052f2:	1ac0      	subs	r0, r0, r3
 80052f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052f6:	b10b      	cbz	r3, 80052fc <__sflush_r+0x48>
 80052f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052fa:	1ac0      	subs	r0, r0, r3
 80052fc:	2300      	movs	r3, #0
 80052fe:	4602      	mov	r2, r0
 8005300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005302:	6a21      	ldr	r1, [r4, #32]
 8005304:	4628      	mov	r0, r5
 8005306:	47b0      	blx	r6
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	d106      	bne.n	800531c <__sflush_r+0x68>
 800530e:	6829      	ldr	r1, [r5, #0]
 8005310:	291d      	cmp	r1, #29
 8005312:	d848      	bhi.n	80053a6 <__sflush_r+0xf2>
 8005314:	4a29      	ldr	r2, [pc, #164]	; (80053bc <__sflush_r+0x108>)
 8005316:	40ca      	lsrs	r2, r1
 8005318:	07d6      	lsls	r6, r2, #31
 800531a:	d544      	bpl.n	80053a6 <__sflush_r+0xf2>
 800531c:	2200      	movs	r2, #0
 800531e:	6062      	str	r2, [r4, #4]
 8005320:	04d9      	lsls	r1, r3, #19
 8005322:	6922      	ldr	r2, [r4, #16]
 8005324:	6022      	str	r2, [r4, #0]
 8005326:	d504      	bpl.n	8005332 <__sflush_r+0x7e>
 8005328:	1c42      	adds	r2, r0, #1
 800532a:	d101      	bne.n	8005330 <__sflush_r+0x7c>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	b903      	cbnz	r3, 8005332 <__sflush_r+0x7e>
 8005330:	6560      	str	r0, [r4, #84]	; 0x54
 8005332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005334:	602f      	str	r7, [r5, #0]
 8005336:	2900      	cmp	r1, #0
 8005338:	d0c9      	beq.n	80052ce <__sflush_r+0x1a>
 800533a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800533e:	4299      	cmp	r1, r3
 8005340:	d002      	beq.n	8005348 <__sflush_r+0x94>
 8005342:	4628      	mov	r0, r5
 8005344:	f000 f994 	bl	8005670 <_free_r>
 8005348:	2000      	movs	r0, #0
 800534a:	6360      	str	r0, [r4, #52]	; 0x34
 800534c:	e7c0      	b.n	80052d0 <__sflush_r+0x1c>
 800534e:	2301      	movs	r3, #1
 8005350:	4628      	mov	r0, r5
 8005352:	47b0      	blx	r6
 8005354:	1c41      	adds	r1, r0, #1
 8005356:	d1c8      	bne.n	80052ea <__sflush_r+0x36>
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0c5      	beq.n	80052ea <__sflush_r+0x36>
 800535e:	2b1d      	cmp	r3, #29
 8005360:	d001      	beq.n	8005366 <__sflush_r+0xb2>
 8005362:	2b16      	cmp	r3, #22
 8005364:	d101      	bne.n	800536a <__sflush_r+0xb6>
 8005366:	602f      	str	r7, [r5, #0]
 8005368:	e7b1      	b.n	80052ce <__sflush_r+0x1a>
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	e7ad      	b.n	80052d0 <__sflush_r+0x1c>
 8005374:	690f      	ldr	r7, [r1, #16]
 8005376:	2f00      	cmp	r7, #0
 8005378:	d0a9      	beq.n	80052ce <__sflush_r+0x1a>
 800537a:	0793      	lsls	r3, r2, #30
 800537c:	680e      	ldr	r6, [r1, #0]
 800537e:	bf08      	it	eq
 8005380:	694b      	ldreq	r3, [r1, #20]
 8005382:	600f      	str	r7, [r1, #0]
 8005384:	bf18      	it	ne
 8005386:	2300      	movne	r3, #0
 8005388:	eba6 0807 	sub.w	r8, r6, r7
 800538c:	608b      	str	r3, [r1, #8]
 800538e:	f1b8 0f00 	cmp.w	r8, #0
 8005392:	dd9c      	ble.n	80052ce <__sflush_r+0x1a>
 8005394:	4643      	mov	r3, r8
 8005396:	463a      	mov	r2, r7
 8005398:	6a21      	ldr	r1, [r4, #32]
 800539a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800539c:	4628      	mov	r0, r5
 800539e:	47b0      	blx	r6
 80053a0:	2800      	cmp	r0, #0
 80053a2:	dc06      	bgt.n	80053b2 <__sflush_r+0xfe>
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053aa:	81a3      	strh	r3, [r4, #12]
 80053ac:	f04f 30ff 	mov.w	r0, #4294967295
 80053b0:	e78e      	b.n	80052d0 <__sflush_r+0x1c>
 80053b2:	4407      	add	r7, r0
 80053b4:	eba8 0800 	sub.w	r8, r8, r0
 80053b8:	e7e9      	b.n	800538e <__sflush_r+0xda>
 80053ba:	bf00      	nop
 80053bc:	20400001 	.word	0x20400001

080053c0 <_fflush_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	690b      	ldr	r3, [r1, #16]
 80053c4:	4605      	mov	r5, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	b1db      	cbz	r3, 8005402 <_fflush_r+0x42>
 80053ca:	b118      	cbz	r0, 80053d4 <_fflush_r+0x14>
 80053cc:	6983      	ldr	r3, [r0, #24]
 80053ce:	b90b      	cbnz	r3, 80053d4 <_fflush_r+0x14>
 80053d0:	f000 f860 	bl	8005494 <__sinit>
 80053d4:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <_fflush_r+0x48>)
 80053d6:	429c      	cmp	r4, r3
 80053d8:	d109      	bne.n	80053ee <_fflush_r+0x2e>
 80053da:	686c      	ldr	r4, [r5, #4]
 80053dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e0:	b17b      	cbz	r3, 8005402 <_fflush_r+0x42>
 80053e2:	4621      	mov	r1, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ea:	f7ff bf63 	b.w	80052b4 <__sflush_r>
 80053ee:	4b07      	ldr	r3, [pc, #28]	; (800540c <_fflush_r+0x4c>)
 80053f0:	429c      	cmp	r4, r3
 80053f2:	d101      	bne.n	80053f8 <_fflush_r+0x38>
 80053f4:	68ac      	ldr	r4, [r5, #8]
 80053f6:	e7f1      	b.n	80053dc <_fflush_r+0x1c>
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <_fflush_r+0x50>)
 80053fa:	429c      	cmp	r4, r3
 80053fc:	bf08      	it	eq
 80053fe:	68ec      	ldreq	r4, [r5, #12]
 8005400:	e7ec      	b.n	80053dc <_fflush_r+0x1c>
 8005402:	2000      	movs	r0, #0
 8005404:	bd38      	pop	{r3, r4, r5, pc}
 8005406:	bf00      	nop
 8005408:	08005f78 	.word	0x08005f78
 800540c:	08005f98 	.word	0x08005f98
 8005410:	08005f58 	.word	0x08005f58

08005414 <std>:
 8005414:	2300      	movs	r3, #0
 8005416:	b510      	push	{r4, lr}
 8005418:	4604      	mov	r4, r0
 800541a:	e9c0 3300 	strd	r3, r3, [r0]
 800541e:	6083      	str	r3, [r0, #8]
 8005420:	8181      	strh	r1, [r0, #12]
 8005422:	6643      	str	r3, [r0, #100]	; 0x64
 8005424:	81c2      	strh	r2, [r0, #14]
 8005426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800542a:	6183      	str	r3, [r0, #24]
 800542c:	4619      	mov	r1, r3
 800542e:	2208      	movs	r2, #8
 8005430:	305c      	adds	r0, #92	; 0x5c
 8005432:	f7ff fdfb 	bl	800502c <memset>
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <std+0x38>)
 8005438:	6263      	str	r3, [r4, #36]	; 0x24
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <std+0x3c>)
 800543c:	62a3      	str	r3, [r4, #40]	; 0x28
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <std+0x40>)
 8005440:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <std+0x44>)
 8005444:	6224      	str	r4, [r4, #32]
 8005446:	6323      	str	r3, [r4, #48]	; 0x30
 8005448:	bd10      	pop	{r4, pc}
 800544a:	bf00      	nop
 800544c:	08005d71 	.word	0x08005d71
 8005450:	08005d93 	.word	0x08005d93
 8005454:	08005dcb 	.word	0x08005dcb
 8005458:	08005def 	.word	0x08005def

0800545c <_cleanup_r>:
 800545c:	4901      	ldr	r1, [pc, #4]	; (8005464 <_cleanup_r+0x8>)
 800545e:	f000 b885 	b.w	800556c <_fwalk_reent>
 8005462:	bf00      	nop
 8005464:	080053c1 	.word	0x080053c1

08005468 <__sfmoreglue>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	1e4a      	subs	r2, r1, #1
 800546c:	2568      	movs	r5, #104	; 0x68
 800546e:	4355      	muls	r5, r2
 8005470:	460e      	mov	r6, r1
 8005472:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005476:	f000 f949 	bl	800570c <_malloc_r>
 800547a:	4604      	mov	r4, r0
 800547c:	b140      	cbz	r0, 8005490 <__sfmoreglue+0x28>
 800547e:	2100      	movs	r1, #0
 8005480:	e9c0 1600 	strd	r1, r6, [r0]
 8005484:	300c      	adds	r0, #12
 8005486:	60a0      	str	r0, [r4, #8]
 8005488:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800548c:	f7ff fdce 	bl	800502c <memset>
 8005490:	4620      	mov	r0, r4
 8005492:	bd70      	pop	{r4, r5, r6, pc}

08005494 <__sinit>:
 8005494:	6983      	ldr	r3, [r0, #24]
 8005496:	b510      	push	{r4, lr}
 8005498:	4604      	mov	r4, r0
 800549a:	bb33      	cbnz	r3, 80054ea <__sinit+0x56>
 800549c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80054a0:	6503      	str	r3, [r0, #80]	; 0x50
 80054a2:	4b12      	ldr	r3, [pc, #72]	; (80054ec <__sinit+0x58>)
 80054a4:	4a12      	ldr	r2, [pc, #72]	; (80054f0 <__sinit+0x5c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6282      	str	r2, [r0, #40]	; 0x28
 80054aa:	4298      	cmp	r0, r3
 80054ac:	bf04      	itt	eq
 80054ae:	2301      	moveq	r3, #1
 80054b0:	6183      	streq	r3, [r0, #24]
 80054b2:	f000 f81f 	bl	80054f4 <__sfp>
 80054b6:	6060      	str	r0, [r4, #4]
 80054b8:	4620      	mov	r0, r4
 80054ba:	f000 f81b 	bl	80054f4 <__sfp>
 80054be:	60a0      	str	r0, [r4, #8]
 80054c0:	4620      	mov	r0, r4
 80054c2:	f000 f817 	bl	80054f4 <__sfp>
 80054c6:	2200      	movs	r2, #0
 80054c8:	60e0      	str	r0, [r4, #12]
 80054ca:	2104      	movs	r1, #4
 80054cc:	6860      	ldr	r0, [r4, #4]
 80054ce:	f7ff ffa1 	bl	8005414 <std>
 80054d2:	2201      	movs	r2, #1
 80054d4:	2109      	movs	r1, #9
 80054d6:	68a0      	ldr	r0, [r4, #8]
 80054d8:	f7ff ff9c 	bl	8005414 <std>
 80054dc:	2202      	movs	r2, #2
 80054de:	2112      	movs	r1, #18
 80054e0:	68e0      	ldr	r0, [r4, #12]
 80054e2:	f7ff ff97 	bl	8005414 <std>
 80054e6:	2301      	movs	r3, #1
 80054e8:	61a3      	str	r3, [r4, #24]
 80054ea:	bd10      	pop	{r4, pc}
 80054ec:	08005f54 	.word	0x08005f54
 80054f0:	0800545d 	.word	0x0800545d

080054f4 <__sfp>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <__sfp+0x70>)
 80054f8:	681e      	ldr	r6, [r3, #0]
 80054fa:	69b3      	ldr	r3, [r6, #24]
 80054fc:	4607      	mov	r7, r0
 80054fe:	b913      	cbnz	r3, 8005506 <__sfp+0x12>
 8005500:	4630      	mov	r0, r6
 8005502:	f7ff ffc7 	bl	8005494 <__sinit>
 8005506:	3648      	adds	r6, #72	; 0x48
 8005508:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800550c:	3b01      	subs	r3, #1
 800550e:	d503      	bpl.n	8005518 <__sfp+0x24>
 8005510:	6833      	ldr	r3, [r6, #0]
 8005512:	b133      	cbz	r3, 8005522 <__sfp+0x2e>
 8005514:	6836      	ldr	r6, [r6, #0]
 8005516:	e7f7      	b.n	8005508 <__sfp+0x14>
 8005518:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800551c:	b16d      	cbz	r5, 800553a <__sfp+0x46>
 800551e:	3468      	adds	r4, #104	; 0x68
 8005520:	e7f4      	b.n	800550c <__sfp+0x18>
 8005522:	2104      	movs	r1, #4
 8005524:	4638      	mov	r0, r7
 8005526:	f7ff ff9f 	bl	8005468 <__sfmoreglue>
 800552a:	6030      	str	r0, [r6, #0]
 800552c:	2800      	cmp	r0, #0
 800552e:	d1f1      	bne.n	8005514 <__sfp+0x20>
 8005530:	230c      	movs	r3, #12
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	4604      	mov	r4, r0
 8005536:	4620      	mov	r0, r4
 8005538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800553a:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <__sfp+0x74>)
 800553c:	6665      	str	r5, [r4, #100]	; 0x64
 800553e:	e9c4 5500 	strd	r5, r5, [r4]
 8005542:	60a5      	str	r5, [r4, #8]
 8005544:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005548:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800554c:	2208      	movs	r2, #8
 800554e:	4629      	mov	r1, r5
 8005550:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005554:	f7ff fd6a 	bl	800502c <memset>
 8005558:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800555c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005560:	e7e9      	b.n	8005536 <__sfp+0x42>
 8005562:	bf00      	nop
 8005564:	08005f54 	.word	0x08005f54
 8005568:	ffff0001 	.word	0xffff0001

0800556c <_fwalk_reent>:
 800556c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005570:	4680      	mov	r8, r0
 8005572:	4689      	mov	r9, r1
 8005574:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005578:	2600      	movs	r6, #0
 800557a:	b914      	cbnz	r4, 8005582 <_fwalk_reent+0x16>
 800557c:	4630      	mov	r0, r6
 800557e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005582:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005586:	3f01      	subs	r7, #1
 8005588:	d501      	bpl.n	800558e <_fwalk_reent+0x22>
 800558a:	6824      	ldr	r4, [r4, #0]
 800558c:	e7f5      	b.n	800557a <_fwalk_reent+0xe>
 800558e:	89ab      	ldrh	r3, [r5, #12]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d907      	bls.n	80055a4 <_fwalk_reent+0x38>
 8005594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005598:	3301      	adds	r3, #1
 800559a:	d003      	beq.n	80055a4 <_fwalk_reent+0x38>
 800559c:	4629      	mov	r1, r5
 800559e:	4640      	mov	r0, r8
 80055a0:	47c8      	blx	r9
 80055a2:	4306      	orrs	r6, r0
 80055a4:	3568      	adds	r5, #104	; 0x68
 80055a6:	e7ee      	b.n	8005586 <_fwalk_reent+0x1a>

080055a8 <__swhatbuf_r>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	460e      	mov	r6, r1
 80055ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b0:	2900      	cmp	r1, #0
 80055b2:	b096      	sub	sp, #88	; 0x58
 80055b4:	4614      	mov	r4, r2
 80055b6:	461d      	mov	r5, r3
 80055b8:	da07      	bge.n	80055ca <__swhatbuf_r+0x22>
 80055ba:	2300      	movs	r3, #0
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	89b3      	ldrh	r3, [r6, #12]
 80055c0:	061a      	lsls	r2, r3, #24
 80055c2:	d410      	bmi.n	80055e6 <__swhatbuf_r+0x3e>
 80055c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c8:	e00e      	b.n	80055e8 <__swhatbuf_r+0x40>
 80055ca:	466a      	mov	r2, sp
 80055cc:	f000 fc36 	bl	8005e3c <_fstat_r>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	dbf2      	blt.n	80055ba <__swhatbuf_r+0x12>
 80055d4:	9a01      	ldr	r2, [sp, #4]
 80055d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055de:	425a      	negs	r2, r3
 80055e0:	415a      	adcs	r2, r3
 80055e2:	602a      	str	r2, [r5, #0]
 80055e4:	e7ee      	b.n	80055c4 <__swhatbuf_r+0x1c>
 80055e6:	2340      	movs	r3, #64	; 0x40
 80055e8:	2000      	movs	r0, #0
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	b016      	add	sp, #88	; 0x58
 80055ee:	bd70      	pop	{r4, r5, r6, pc}

080055f0 <__smakebuf_r>:
 80055f0:	898b      	ldrh	r3, [r1, #12]
 80055f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055f4:	079d      	lsls	r5, r3, #30
 80055f6:	4606      	mov	r6, r0
 80055f8:	460c      	mov	r4, r1
 80055fa:	d507      	bpl.n	800560c <__smakebuf_r+0x1c>
 80055fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	6123      	str	r3, [r4, #16]
 8005604:	2301      	movs	r3, #1
 8005606:	6163      	str	r3, [r4, #20]
 8005608:	b002      	add	sp, #8
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	ab01      	add	r3, sp, #4
 800560e:	466a      	mov	r2, sp
 8005610:	f7ff ffca 	bl	80055a8 <__swhatbuf_r>
 8005614:	9900      	ldr	r1, [sp, #0]
 8005616:	4605      	mov	r5, r0
 8005618:	4630      	mov	r0, r6
 800561a:	f000 f877 	bl	800570c <_malloc_r>
 800561e:	b948      	cbnz	r0, 8005634 <__smakebuf_r+0x44>
 8005620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005624:	059a      	lsls	r2, r3, #22
 8005626:	d4ef      	bmi.n	8005608 <__smakebuf_r+0x18>
 8005628:	f023 0303 	bic.w	r3, r3, #3
 800562c:	f043 0302 	orr.w	r3, r3, #2
 8005630:	81a3      	strh	r3, [r4, #12]
 8005632:	e7e3      	b.n	80055fc <__smakebuf_r+0xc>
 8005634:	4b0d      	ldr	r3, [pc, #52]	; (800566c <__smakebuf_r+0x7c>)
 8005636:	62b3      	str	r3, [r6, #40]	; 0x28
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	6020      	str	r0, [r4, #0]
 800563c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005640:	81a3      	strh	r3, [r4, #12]
 8005642:	9b00      	ldr	r3, [sp, #0]
 8005644:	6163      	str	r3, [r4, #20]
 8005646:	9b01      	ldr	r3, [sp, #4]
 8005648:	6120      	str	r0, [r4, #16]
 800564a:	b15b      	cbz	r3, 8005664 <__smakebuf_r+0x74>
 800564c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005650:	4630      	mov	r0, r6
 8005652:	f000 fc05 	bl	8005e60 <_isatty_r>
 8005656:	b128      	cbz	r0, 8005664 <__smakebuf_r+0x74>
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	81a3      	strh	r3, [r4, #12]
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	431d      	orrs	r5, r3
 8005668:	81a5      	strh	r5, [r4, #12]
 800566a:	e7cd      	b.n	8005608 <__smakebuf_r+0x18>
 800566c:	0800545d 	.word	0x0800545d

08005670 <_free_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4605      	mov	r5, r0
 8005674:	2900      	cmp	r1, #0
 8005676:	d045      	beq.n	8005704 <_free_r+0x94>
 8005678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800567c:	1f0c      	subs	r4, r1, #4
 800567e:	2b00      	cmp	r3, #0
 8005680:	bfb8      	it	lt
 8005682:	18e4      	addlt	r4, r4, r3
 8005684:	f000 fc0e 	bl	8005ea4 <__malloc_lock>
 8005688:	4a1f      	ldr	r2, [pc, #124]	; (8005708 <_free_r+0x98>)
 800568a:	6813      	ldr	r3, [r2, #0]
 800568c:	4610      	mov	r0, r2
 800568e:	b933      	cbnz	r3, 800569e <_free_r+0x2e>
 8005690:	6063      	str	r3, [r4, #4]
 8005692:	6014      	str	r4, [r2, #0]
 8005694:	4628      	mov	r0, r5
 8005696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800569a:	f000 bc04 	b.w	8005ea6 <__malloc_unlock>
 800569e:	42a3      	cmp	r3, r4
 80056a0:	d90c      	bls.n	80056bc <_free_r+0x4c>
 80056a2:	6821      	ldr	r1, [r4, #0]
 80056a4:	1862      	adds	r2, r4, r1
 80056a6:	4293      	cmp	r3, r2
 80056a8:	bf04      	itt	eq
 80056aa:	681a      	ldreq	r2, [r3, #0]
 80056ac:	685b      	ldreq	r3, [r3, #4]
 80056ae:	6063      	str	r3, [r4, #4]
 80056b0:	bf04      	itt	eq
 80056b2:	1852      	addeq	r2, r2, r1
 80056b4:	6022      	streq	r2, [r4, #0]
 80056b6:	6004      	str	r4, [r0, #0]
 80056b8:	e7ec      	b.n	8005694 <_free_r+0x24>
 80056ba:	4613      	mov	r3, r2
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	b10a      	cbz	r2, 80056c4 <_free_r+0x54>
 80056c0:	42a2      	cmp	r2, r4
 80056c2:	d9fa      	bls.n	80056ba <_free_r+0x4a>
 80056c4:	6819      	ldr	r1, [r3, #0]
 80056c6:	1858      	adds	r0, r3, r1
 80056c8:	42a0      	cmp	r0, r4
 80056ca:	d10b      	bne.n	80056e4 <_free_r+0x74>
 80056cc:	6820      	ldr	r0, [r4, #0]
 80056ce:	4401      	add	r1, r0
 80056d0:	1858      	adds	r0, r3, r1
 80056d2:	4282      	cmp	r2, r0
 80056d4:	6019      	str	r1, [r3, #0]
 80056d6:	d1dd      	bne.n	8005694 <_free_r+0x24>
 80056d8:	6810      	ldr	r0, [r2, #0]
 80056da:	6852      	ldr	r2, [r2, #4]
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	4401      	add	r1, r0
 80056e0:	6019      	str	r1, [r3, #0]
 80056e2:	e7d7      	b.n	8005694 <_free_r+0x24>
 80056e4:	d902      	bls.n	80056ec <_free_r+0x7c>
 80056e6:	230c      	movs	r3, #12
 80056e8:	602b      	str	r3, [r5, #0]
 80056ea:	e7d3      	b.n	8005694 <_free_r+0x24>
 80056ec:	6820      	ldr	r0, [r4, #0]
 80056ee:	1821      	adds	r1, r4, r0
 80056f0:	428a      	cmp	r2, r1
 80056f2:	bf04      	itt	eq
 80056f4:	6811      	ldreq	r1, [r2, #0]
 80056f6:	6852      	ldreq	r2, [r2, #4]
 80056f8:	6062      	str	r2, [r4, #4]
 80056fa:	bf04      	itt	eq
 80056fc:	1809      	addeq	r1, r1, r0
 80056fe:	6021      	streq	r1, [r4, #0]
 8005700:	605c      	str	r4, [r3, #4]
 8005702:	e7c7      	b.n	8005694 <_free_r+0x24>
 8005704:	bd38      	pop	{r3, r4, r5, pc}
 8005706:	bf00      	nop
 8005708:	20000090 	.word	0x20000090

0800570c <_malloc_r>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	1ccd      	adds	r5, r1, #3
 8005710:	f025 0503 	bic.w	r5, r5, #3
 8005714:	3508      	adds	r5, #8
 8005716:	2d0c      	cmp	r5, #12
 8005718:	bf38      	it	cc
 800571a:	250c      	movcc	r5, #12
 800571c:	2d00      	cmp	r5, #0
 800571e:	4606      	mov	r6, r0
 8005720:	db01      	blt.n	8005726 <_malloc_r+0x1a>
 8005722:	42a9      	cmp	r1, r5
 8005724:	d903      	bls.n	800572e <_malloc_r+0x22>
 8005726:	230c      	movs	r3, #12
 8005728:	6033      	str	r3, [r6, #0]
 800572a:	2000      	movs	r0, #0
 800572c:	bd70      	pop	{r4, r5, r6, pc}
 800572e:	f000 fbb9 	bl	8005ea4 <__malloc_lock>
 8005732:	4a21      	ldr	r2, [pc, #132]	; (80057b8 <_malloc_r+0xac>)
 8005734:	6814      	ldr	r4, [r2, #0]
 8005736:	4621      	mov	r1, r4
 8005738:	b991      	cbnz	r1, 8005760 <_malloc_r+0x54>
 800573a:	4c20      	ldr	r4, [pc, #128]	; (80057bc <_malloc_r+0xb0>)
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	b91b      	cbnz	r3, 8005748 <_malloc_r+0x3c>
 8005740:	4630      	mov	r0, r6
 8005742:	f000 fb05 	bl	8005d50 <_sbrk_r>
 8005746:	6020      	str	r0, [r4, #0]
 8005748:	4629      	mov	r1, r5
 800574a:	4630      	mov	r0, r6
 800574c:	f000 fb00 	bl	8005d50 <_sbrk_r>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	d124      	bne.n	800579e <_malloc_r+0x92>
 8005754:	230c      	movs	r3, #12
 8005756:	6033      	str	r3, [r6, #0]
 8005758:	4630      	mov	r0, r6
 800575a:	f000 fba4 	bl	8005ea6 <__malloc_unlock>
 800575e:	e7e4      	b.n	800572a <_malloc_r+0x1e>
 8005760:	680b      	ldr	r3, [r1, #0]
 8005762:	1b5b      	subs	r3, r3, r5
 8005764:	d418      	bmi.n	8005798 <_malloc_r+0x8c>
 8005766:	2b0b      	cmp	r3, #11
 8005768:	d90f      	bls.n	800578a <_malloc_r+0x7e>
 800576a:	600b      	str	r3, [r1, #0]
 800576c:	50cd      	str	r5, [r1, r3]
 800576e:	18cc      	adds	r4, r1, r3
 8005770:	4630      	mov	r0, r6
 8005772:	f000 fb98 	bl	8005ea6 <__malloc_unlock>
 8005776:	f104 000b 	add.w	r0, r4, #11
 800577a:	1d23      	adds	r3, r4, #4
 800577c:	f020 0007 	bic.w	r0, r0, #7
 8005780:	1ac3      	subs	r3, r0, r3
 8005782:	d0d3      	beq.n	800572c <_malloc_r+0x20>
 8005784:	425a      	negs	r2, r3
 8005786:	50e2      	str	r2, [r4, r3]
 8005788:	e7d0      	b.n	800572c <_malloc_r+0x20>
 800578a:	428c      	cmp	r4, r1
 800578c:	684b      	ldr	r3, [r1, #4]
 800578e:	bf16      	itet	ne
 8005790:	6063      	strne	r3, [r4, #4]
 8005792:	6013      	streq	r3, [r2, #0]
 8005794:	460c      	movne	r4, r1
 8005796:	e7eb      	b.n	8005770 <_malloc_r+0x64>
 8005798:	460c      	mov	r4, r1
 800579a:	6849      	ldr	r1, [r1, #4]
 800579c:	e7cc      	b.n	8005738 <_malloc_r+0x2c>
 800579e:	1cc4      	adds	r4, r0, #3
 80057a0:	f024 0403 	bic.w	r4, r4, #3
 80057a4:	42a0      	cmp	r0, r4
 80057a6:	d005      	beq.n	80057b4 <_malloc_r+0xa8>
 80057a8:	1a21      	subs	r1, r4, r0
 80057aa:	4630      	mov	r0, r6
 80057ac:	f000 fad0 	bl	8005d50 <_sbrk_r>
 80057b0:	3001      	adds	r0, #1
 80057b2:	d0cf      	beq.n	8005754 <_malloc_r+0x48>
 80057b4:	6025      	str	r5, [r4, #0]
 80057b6:	e7db      	b.n	8005770 <_malloc_r+0x64>
 80057b8:	20000090 	.word	0x20000090
 80057bc:	20000094 	.word	0x20000094

080057c0 <__sfputc_r>:
 80057c0:	6893      	ldr	r3, [r2, #8]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	b410      	push	{r4}
 80057c8:	6093      	str	r3, [r2, #8]
 80057ca:	da08      	bge.n	80057de <__sfputc_r+0x1e>
 80057cc:	6994      	ldr	r4, [r2, #24]
 80057ce:	42a3      	cmp	r3, r4
 80057d0:	db01      	blt.n	80057d6 <__sfputc_r+0x16>
 80057d2:	290a      	cmp	r1, #10
 80057d4:	d103      	bne.n	80057de <__sfputc_r+0x1e>
 80057d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057da:	f7ff bcab 	b.w	8005134 <__swbuf_r>
 80057de:	6813      	ldr	r3, [r2, #0]
 80057e0:	1c58      	adds	r0, r3, #1
 80057e2:	6010      	str	r0, [r2, #0]
 80057e4:	7019      	strb	r1, [r3, #0]
 80057e6:	4608      	mov	r0, r1
 80057e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <__sfputs_r>:
 80057ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f0:	4606      	mov	r6, r0
 80057f2:	460f      	mov	r7, r1
 80057f4:	4614      	mov	r4, r2
 80057f6:	18d5      	adds	r5, r2, r3
 80057f8:	42ac      	cmp	r4, r5
 80057fa:	d101      	bne.n	8005800 <__sfputs_r+0x12>
 80057fc:	2000      	movs	r0, #0
 80057fe:	e007      	b.n	8005810 <__sfputs_r+0x22>
 8005800:	463a      	mov	r2, r7
 8005802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005806:	4630      	mov	r0, r6
 8005808:	f7ff ffda 	bl	80057c0 <__sfputc_r>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d1f3      	bne.n	80057f8 <__sfputs_r+0xa>
 8005810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005814 <_vfiprintf_r>:
 8005814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	460c      	mov	r4, r1
 800581a:	b09d      	sub	sp, #116	; 0x74
 800581c:	4617      	mov	r7, r2
 800581e:	461d      	mov	r5, r3
 8005820:	4606      	mov	r6, r0
 8005822:	b118      	cbz	r0, 800582c <_vfiprintf_r+0x18>
 8005824:	6983      	ldr	r3, [r0, #24]
 8005826:	b90b      	cbnz	r3, 800582c <_vfiprintf_r+0x18>
 8005828:	f7ff fe34 	bl	8005494 <__sinit>
 800582c:	4b7c      	ldr	r3, [pc, #496]	; (8005a20 <_vfiprintf_r+0x20c>)
 800582e:	429c      	cmp	r4, r3
 8005830:	d158      	bne.n	80058e4 <_vfiprintf_r+0xd0>
 8005832:	6874      	ldr	r4, [r6, #4]
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	0718      	lsls	r0, r3, #28
 8005838:	d55e      	bpl.n	80058f8 <_vfiprintf_r+0xe4>
 800583a:	6923      	ldr	r3, [r4, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d05b      	beq.n	80058f8 <_vfiprintf_r+0xe4>
 8005840:	2300      	movs	r3, #0
 8005842:	9309      	str	r3, [sp, #36]	; 0x24
 8005844:	2320      	movs	r3, #32
 8005846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800584a:	2330      	movs	r3, #48	; 0x30
 800584c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005850:	9503      	str	r5, [sp, #12]
 8005852:	f04f 0b01 	mov.w	fp, #1
 8005856:	46b8      	mov	r8, r7
 8005858:	4645      	mov	r5, r8
 800585a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800585e:	b10b      	cbz	r3, 8005864 <_vfiprintf_r+0x50>
 8005860:	2b25      	cmp	r3, #37	; 0x25
 8005862:	d154      	bne.n	800590e <_vfiprintf_r+0xfa>
 8005864:	ebb8 0a07 	subs.w	sl, r8, r7
 8005868:	d00b      	beq.n	8005882 <_vfiprintf_r+0x6e>
 800586a:	4653      	mov	r3, sl
 800586c:	463a      	mov	r2, r7
 800586e:	4621      	mov	r1, r4
 8005870:	4630      	mov	r0, r6
 8005872:	f7ff ffbc 	bl	80057ee <__sfputs_r>
 8005876:	3001      	adds	r0, #1
 8005878:	f000 80c2 	beq.w	8005a00 <_vfiprintf_r+0x1ec>
 800587c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587e:	4453      	add	r3, sl
 8005880:	9309      	str	r3, [sp, #36]	; 0x24
 8005882:	f898 3000 	ldrb.w	r3, [r8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 80ba 	beq.w	8005a00 <_vfiprintf_r+0x1ec>
 800588c:	2300      	movs	r3, #0
 800588e:	f04f 32ff 	mov.w	r2, #4294967295
 8005892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005896:	9304      	str	r3, [sp, #16]
 8005898:	9307      	str	r3, [sp, #28]
 800589a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800589e:	931a      	str	r3, [sp, #104]	; 0x68
 80058a0:	46a8      	mov	r8, r5
 80058a2:	2205      	movs	r2, #5
 80058a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80058a8:	485e      	ldr	r0, [pc, #376]	; (8005a24 <_vfiprintf_r+0x210>)
 80058aa:	f7fa fc99 	bl	80001e0 <memchr>
 80058ae:	9b04      	ldr	r3, [sp, #16]
 80058b0:	bb78      	cbnz	r0, 8005912 <_vfiprintf_r+0xfe>
 80058b2:	06d9      	lsls	r1, r3, #27
 80058b4:	bf44      	itt	mi
 80058b6:	2220      	movmi	r2, #32
 80058b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058bc:	071a      	lsls	r2, r3, #28
 80058be:	bf44      	itt	mi
 80058c0:	222b      	movmi	r2, #43	; 0x2b
 80058c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058c6:	782a      	ldrb	r2, [r5, #0]
 80058c8:	2a2a      	cmp	r2, #42	; 0x2a
 80058ca:	d02a      	beq.n	8005922 <_vfiprintf_r+0x10e>
 80058cc:	9a07      	ldr	r2, [sp, #28]
 80058ce:	46a8      	mov	r8, r5
 80058d0:	2000      	movs	r0, #0
 80058d2:	250a      	movs	r5, #10
 80058d4:	4641      	mov	r1, r8
 80058d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058da:	3b30      	subs	r3, #48	; 0x30
 80058dc:	2b09      	cmp	r3, #9
 80058de:	d969      	bls.n	80059b4 <_vfiprintf_r+0x1a0>
 80058e0:	b360      	cbz	r0, 800593c <_vfiprintf_r+0x128>
 80058e2:	e024      	b.n	800592e <_vfiprintf_r+0x11a>
 80058e4:	4b50      	ldr	r3, [pc, #320]	; (8005a28 <_vfiprintf_r+0x214>)
 80058e6:	429c      	cmp	r4, r3
 80058e8:	d101      	bne.n	80058ee <_vfiprintf_r+0xda>
 80058ea:	68b4      	ldr	r4, [r6, #8]
 80058ec:	e7a2      	b.n	8005834 <_vfiprintf_r+0x20>
 80058ee:	4b4f      	ldr	r3, [pc, #316]	; (8005a2c <_vfiprintf_r+0x218>)
 80058f0:	429c      	cmp	r4, r3
 80058f2:	bf08      	it	eq
 80058f4:	68f4      	ldreq	r4, [r6, #12]
 80058f6:	e79d      	b.n	8005834 <_vfiprintf_r+0x20>
 80058f8:	4621      	mov	r1, r4
 80058fa:	4630      	mov	r0, r6
 80058fc:	f7ff fc6c 	bl	80051d8 <__swsetup_r>
 8005900:	2800      	cmp	r0, #0
 8005902:	d09d      	beq.n	8005840 <_vfiprintf_r+0x2c>
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	b01d      	add	sp, #116	; 0x74
 800590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590e:	46a8      	mov	r8, r5
 8005910:	e7a2      	b.n	8005858 <_vfiprintf_r+0x44>
 8005912:	4a44      	ldr	r2, [pc, #272]	; (8005a24 <_vfiprintf_r+0x210>)
 8005914:	1a80      	subs	r0, r0, r2
 8005916:	fa0b f000 	lsl.w	r0, fp, r0
 800591a:	4318      	orrs	r0, r3
 800591c:	9004      	str	r0, [sp, #16]
 800591e:	4645      	mov	r5, r8
 8005920:	e7be      	b.n	80058a0 <_vfiprintf_r+0x8c>
 8005922:	9a03      	ldr	r2, [sp, #12]
 8005924:	1d11      	adds	r1, r2, #4
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	9103      	str	r1, [sp, #12]
 800592a:	2a00      	cmp	r2, #0
 800592c:	db01      	blt.n	8005932 <_vfiprintf_r+0x11e>
 800592e:	9207      	str	r2, [sp, #28]
 8005930:	e004      	b.n	800593c <_vfiprintf_r+0x128>
 8005932:	4252      	negs	r2, r2
 8005934:	f043 0302 	orr.w	r3, r3, #2
 8005938:	9207      	str	r2, [sp, #28]
 800593a:	9304      	str	r3, [sp, #16]
 800593c:	f898 3000 	ldrb.w	r3, [r8]
 8005940:	2b2e      	cmp	r3, #46	; 0x2e
 8005942:	d10e      	bne.n	8005962 <_vfiprintf_r+0x14e>
 8005944:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005948:	2b2a      	cmp	r3, #42	; 0x2a
 800594a:	d138      	bne.n	80059be <_vfiprintf_r+0x1aa>
 800594c:	9b03      	ldr	r3, [sp, #12]
 800594e:	1d1a      	adds	r2, r3, #4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	9203      	str	r2, [sp, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	bfb8      	it	lt
 8005958:	f04f 33ff 	movlt.w	r3, #4294967295
 800595c:	f108 0802 	add.w	r8, r8, #2
 8005960:	9305      	str	r3, [sp, #20]
 8005962:	4d33      	ldr	r5, [pc, #204]	; (8005a30 <_vfiprintf_r+0x21c>)
 8005964:	f898 1000 	ldrb.w	r1, [r8]
 8005968:	2203      	movs	r2, #3
 800596a:	4628      	mov	r0, r5
 800596c:	f7fa fc38 	bl	80001e0 <memchr>
 8005970:	b140      	cbz	r0, 8005984 <_vfiprintf_r+0x170>
 8005972:	2340      	movs	r3, #64	; 0x40
 8005974:	1b40      	subs	r0, r0, r5
 8005976:	fa03 f000 	lsl.w	r0, r3, r0
 800597a:	9b04      	ldr	r3, [sp, #16]
 800597c:	4303      	orrs	r3, r0
 800597e:	f108 0801 	add.w	r8, r8, #1
 8005982:	9304      	str	r3, [sp, #16]
 8005984:	f898 1000 	ldrb.w	r1, [r8]
 8005988:	482a      	ldr	r0, [pc, #168]	; (8005a34 <_vfiprintf_r+0x220>)
 800598a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800598e:	2206      	movs	r2, #6
 8005990:	f108 0701 	add.w	r7, r8, #1
 8005994:	f7fa fc24 	bl	80001e0 <memchr>
 8005998:	2800      	cmp	r0, #0
 800599a:	d037      	beq.n	8005a0c <_vfiprintf_r+0x1f8>
 800599c:	4b26      	ldr	r3, [pc, #152]	; (8005a38 <_vfiprintf_r+0x224>)
 800599e:	bb1b      	cbnz	r3, 80059e8 <_vfiprintf_r+0x1d4>
 80059a0:	9b03      	ldr	r3, [sp, #12]
 80059a2:	3307      	adds	r3, #7
 80059a4:	f023 0307 	bic.w	r3, r3, #7
 80059a8:	3308      	adds	r3, #8
 80059aa:	9303      	str	r3, [sp, #12]
 80059ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ae:	444b      	add	r3, r9
 80059b0:	9309      	str	r3, [sp, #36]	; 0x24
 80059b2:	e750      	b.n	8005856 <_vfiprintf_r+0x42>
 80059b4:	fb05 3202 	mla	r2, r5, r2, r3
 80059b8:	2001      	movs	r0, #1
 80059ba:	4688      	mov	r8, r1
 80059bc:	e78a      	b.n	80058d4 <_vfiprintf_r+0xc0>
 80059be:	2300      	movs	r3, #0
 80059c0:	f108 0801 	add.w	r8, r8, #1
 80059c4:	9305      	str	r3, [sp, #20]
 80059c6:	4619      	mov	r1, r3
 80059c8:	250a      	movs	r5, #10
 80059ca:	4640      	mov	r0, r8
 80059cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059d0:	3a30      	subs	r2, #48	; 0x30
 80059d2:	2a09      	cmp	r2, #9
 80059d4:	d903      	bls.n	80059de <_vfiprintf_r+0x1ca>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0c3      	beq.n	8005962 <_vfiprintf_r+0x14e>
 80059da:	9105      	str	r1, [sp, #20]
 80059dc:	e7c1      	b.n	8005962 <_vfiprintf_r+0x14e>
 80059de:	fb05 2101 	mla	r1, r5, r1, r2
 80059e2:	2301      	movs	r3, #1
 80059e4:	4680      	mov	r8, r0
 80059e6:	e7f0      	b.n	80059ca <_vfiprintf_r+0x1b6>
 80059e8:	ab03      	add	r3, sp, #12
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	4622      	mov	r2, r4
 80059ee:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <_vfiprintf_r+0x228>)
 80059f0:	a904      	add	r1, sp, #16
 80059f2:	4630      	mov	r0, r6
 80059f4:	f3af 8000 	nop.w
 80059f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80059fc:	4681      	mov	r9, r0
 80059fe:	d1d5      	bne.n	80059ac <_vfiprintf_r+0x198>
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	065b      	lsls	r3, r3, #25
 8005a04:	f53f af7e 	bmi.w	8005904 <_vfiprintf_r+0xf0>
 8005a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a0a:	e77d      	b.n	8005908 <_vfiprintf_r+0xf4>
 8005a0c:	ab03      	add	r3, sp, #12
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	4622      	mov	r2, r4
 8005a12:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <_vfiprintf_r+0x228>)
 8005a14:	a904      	add	r1, sp, #16
 8005a16:	4630      	mov	r0, r6
 8005a18:	f000 f888 	bl	8005b2c <_printf_i>
 8005a1c:	e7ec      	b.n	80059f8 <_vfiprintf_r+0x1e4>
 8005a1e:	bf00      	nop
 8005a20:	08005f78 	.word	0x08005f78
 8005a24:	08005fb8 	.word	0x08005fb8
 8005a28:	08005f98 	.word	0x08005f98
 8005a2c:	08005f58 	.word	0x08005f58
 8005a30:	08005fbe 	.word	0x08005fbe
 8005a34:	08005fc2 	.word	0x08005fc2
 8005a38:	00000000 	.word	0x00000000
 8005a3c:	080057ef 	.word	0x080057ef

08005a40 <_printf_common>:
 8005a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a44:	4691      	mov	r9, r2
 8005a46:	461f      	mov	r7, r3
 8005a48:	688a      	ldr	r2, [r1, #8]
 8005a4a:	690b      	ldr	r3, [r1, #16]
 8005a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a50:	4293      	cmp	r3, r2
 8005a52:	bfb8      	it	lt
 8005a54:	4613      	movlt	r3, r2
 8005a56:	f8c9 3000 	str.w	r3, [r9]
 8005a5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a5e:	4606      	mov	r6, r0
 8005a60:	460c      	mov	r4, r1
 8005a62:	b112      	cbz	r2, 8005a6a <_printf_common+0x2a>
 8005a64:	3301      	adds	r3, #1
 8005a66:	f8c9 3000 	str.w	r3, [r9]
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	0699      	lsls	r1, r3, #26
 8005a6e:	bf42      	ittt	mi
 8005a70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a74:	3302      	addmi	r3, #2
 8005a76:	f8c9 3000 	strmi.w	r3, [r9]
 8005a7a:	6825      	ldr	r5, [r4, #0]
 8005a7c:	f015 0506 	ands.w	r5, r5, #6
 8005a80:	d107      	bne.n	8005a92 <_printf_common+0x52>
 8005a82:	f104 0a19 	add.w	sl, r4, #25
 8005a86:	68e3      	ldr	r3, [r4, #12]
 8005a88:	f8d9 2000 	ldr.w	r2, [r9]
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	42ab      	cmp	r3, r5
 8005a90:	dc28      	bgt.n	8005ae4 <_printf_common+0xa4>
 8005a92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a96:	6822      	ldr	r2, [r4, #0]
 8005a98:	3300      	adds	r3, #0
 8005a9a:	bf18      	it	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	0692      	lsls	r2, r2, #26
 8005aa0:	d42d      	bmi.n	8005afe <_printf_common+0xbe>
 8005aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	47c0      	blx	r8
 8005aac:	3001      	adds	r0, #1
 8005aae:	d020      	beq.n	8005af2 <_printf_common+0xb2>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	68e5      	ldr	r5, [r4, #12]
 8005ab4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ab8:	f003 0306 	and.w	r3, r3, #6
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	bf08      	it	eq
 8005ac0:	1aad      	subeq	r5, r5, r2
 8005ac2:	68a3      	ldr	r3, [r4, #8]
 8005ac4:	6922      	ldr	r2, [r4, #16]
 8005ac6:	bf0c      	ite	eq
 8005ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005acc:	2500      	movne	r5, #0
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	bfc4      	itt	gt
 8005ad2:	1a9b      	subgt	r3, r3, r2
 8005ad4:	18ed      	addgt	r5, r5, r3
 8005ad6:	f04f 0900 	mov.w	r9, #0
 8005ada:	341a      	adds	r4, #26
 8005adc:	454d      	cmp	r5, r9
 8005ade:	d11a      	bne.n	8005b16 <_printf_common+0xd6>
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	e008      	b.n	8005af6 <_printf_common+0xb6>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	4652      	mov	r2, sl
 8005ae8:	4639      	mov	r1, r7
 8005aea:	4630      	mov	r0, r6
 8005aec:	47c0      	blx	r8
 8005aee:	3001      	adds	r0, #1
 8005af0:	d103      	bne.n	8005afa <_printf_common+0xba>
 8005af2:	f04f 30ff 	mov.w	r0, #4294967295
 8005af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afa:	3501      	adds	r5, #1
 8005afc:	e7c3      	b.n	8005a86 <_printf_common+0x46>
 8005afe:	18e1      	adds	r1, r4, r3
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	2030      	movs	r0, #48	; 0x30
 8005b04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b08:	4422      	add	r2, r4
 8005b0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b12:	3302      	adds	r3, #2
 8005b14:	e7c5      	b.n	8005aa2 <_printf_common+0x62>
 8005b16:	2301      	movs	r3, #1
 8005b18:	4622      	mov	r2, r4
 8005b1a:	4639      	mov	r1, r7
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	47c0      	blx	r8
 8005b20:	3001      	adds	r0, #1
 8005b22:	d0e6      	beq.n	8005af2 <_printf_common+0xb2>
 8005b24:	f109 0901 	add.w	r9, r9, #1
 8005b28:	e7d8      	b.n	8005adc <_printf_common+0x9c>
	...

08005b2c <_printf_i>:
 8005b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b34:	460c      	mov	r4, r1
 8005b36:	7e09      	ldrb	r1, [r1, #24]
 8005b38:	b085      	sub	sp, #20
 8005b3a:	296e      	cmp	r1, #110	; 0x6e
 8005b3c:	4617      	mov	r7, r2
 8005b3e:	4606      	mov	r6, r0
 8005b40:	4698      	mov	r8, r3
 8005b42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b44:	f000 80b3 	beq.w	8005cae <_printf_i+0x182>
 8005b48:	d822      	bhi.n	8005b90 <_printf_i+0x64>
 8005b4a:	2963      	cmp	r1, #99	; 0x63
 8005b4c:	d036      	beq.n	8005bbc <_printf_i+0x90>
 8005b4e:	d80a      	bhi.n	8005b66 <_printf_i+0x3a>
 8005b50:	2900      	cmp	r1, #0
 8005b52:	f000 80b9 	beq.w	8005cc8 <_printf_i+0x19c>
 8005b56:	2958      	cmp	r1, #88	; 0x58
 8005b58:	f000 8083 	beq.w	8005c62 <_printf_i+0x136>
 8005b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005b64:	e032      	b.n	8005bcc <_printf_i+0xa0>
 8005b66:	2964      	cmp	r1, #100	; 0x64
 8005b68:	d001      	beq.n	8005b6e <_printf_i+0x42>
 8005b6a:	2969      	cmp	r1, #105	; 0x69
 8005b6c:	d1f6      	bne.n	8005b5c <_printf_i+0x30>
 8005b6e:	6820      	ldr	r0, [r4, #0]
 8005b70:	6813      	ldr	r3, [r2, #0]
 8005b72:	0605      	lsls	r5, r0, #24
 8005b74:	f103 0104 	add.w	r1, r3, #4
 8005b78:	d52a      	bpl.n	8005bd0 <_printf_i+0xa4>
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6011      	str	r1, [r2, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da03      	bge.n	8005b8a <_printf_i+0x5e>
 8005b82:	222d      	movs	r2, #45	; 0x2d
 8005b84:	425b      	negs	r3, r3
 8005b86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b8a:	486f      	ldr	r0, [pc, #444]	; (8005d48 <_printf_i+0x21c>)
 8005b8c:	220a      	movs	r2, #10
 8005b8e:	e039      	b.n	8005c04 <_printf_i+0xd8>
 8005b90:	2973      	cmp	r1, #115	; 0x73
 8005b92:	f000 809d 	beq.w	8005cd0 <_printf_i+0x1a4>
 8005b96:	d808      	bhi.n	8005baa <_printf_i+0x7e>
 8005b98:	296f      	cmp	r1, #111	; 0x6f
 8005b9a:	d020      	beq.n	8005bde <_printf_i+0xb2>
 8005b9c:	2970      	cmp	r1, #112	; 0x70
 8005b9e:	d1dd      	bne.n	8005b5c <_printf_i+0x30>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	f043 0320 	orr.w	r3, r3, #32
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	e003      	b.n	8005bb2 <_printf_i+0x86>
 8005baa:	2975      	cmp	r1, #117	; 0x75
 8005bac:	d017      	beq.n	8005bde <_printf_i+0xb2>
 8005bae:	2978      	cmp	r1, #120	; 0x78
 8005bb0:	d1d4      	bne.n	8005b5c <_printf_i+0x30>
 8005bb2:	2378      	movs	r3, #120	; 0x78
 8005bb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bb8:	4864      	ldr	r0, [pc, #400]	; (8005d4c <_printf_i+0x220>)
 8005bba:	e055      	b.n	8005c68 <_printf_i+0x13c>
 8005bbc:	6813      	ldr	r3, [r2, #0]
 8005bbe:	1d19      	adds	r1, r3, #4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6011      	str	r1, [r2, #0]
 8005bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e08c      	b.n	8005cea <_printf_i+0x1be>
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6011      	str	r1, [r2, #0]
 8005bd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bd8:	bf18      	it	ne
 8005bda:	b21b      	sxthne	r3, r3
 8005bdc:	e7cf      	b.n	8005b7e <_printf_i+0x52>
 8005bde:	6813      	ldr	r3, [r2, #0]
 8005be0:	6825      	ldr	r5, [r4, #0]
 8005be2:	1d18      	adds	r0, r3, #4
 8005be4:	6010      	str	r0, [r2, #0]
 8005be6:	0628      	lsls	r0, r5, #24
 8005be8:	d501      	bpl.n	8005bee <_printf_i+0xc2>
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	e002      	b.n	8005bf4 <_printf_i+0xc8>
 8005bee:	0668      	lsls	r0, r5, #25
 8005bf0:	d5fb      	bpl.n	8005bea <_printf_i+0xbe>
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	4854      	ldr	r0, [pc, #336]	; (8005d48 <_printf_i+0x21c>)
 8005bf6:	296f      	cmp	r1, #111	; 0x6f
 8005bf8:	bf14      	ite	ne
 8005bfa:	220a      	movne	r2, #10
 8005bfc:	2208      	moveq	r2, #8
 8005bfe:	2100      	movs	r1, #0
 8005c00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c04:	6865      	ldr	r5, [r4, #4]
 8005c06:	60a5      	str	r5, [r4, #8]
 8005c08:	2d00      	cmp	r5, #0
 8005c0a:	f2c0 8095 	blt.w	8005d38 <_printf_i+0x20c>
 8005c0e:	6821      	ldr	r1, [r4, #0]
 8005c10:	f021 0104 	bic.w	r1, r1, #4
 8005c14:	6021      	str	r1, [r4, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d13d      	bne.n	8005c96 <_printf_i+0x16a>
 8005c1a:	2d00      	cmp	r5, #0
 8005c1c:	f040 808e 	bne.w	8005d3c <_printf_i+0x210>
 8005c20:	4665      	mov	r5, ip
 8005c22:	2a08      	cmp	r2, #8
 8005c24:	d10b      	bne.n	8005c3e <_printf_i+0x112>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	07db      	lsls	r3, r3, #31
 8005c2a:	d508      	bpl.n	8005c3e <_printf_i+0x112>
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	6862      	ldr	r2, [r4, #4]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	bfde      	ittt	le
 8005c34:	2330      	movle	r3, #48	; 0x30
 8005c36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c3e:	ebac 0305 	sub.w	r3, ip, r5
 8005c42:	6123      	str	r3, [r4, #16]
 8005c44:	f8cd 8000 	str.w	r8, [sp]
 8005c48:	463b      	mov	r3, r7
 8005c4a:	aa03      	add	r2, sp, #12
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f7ff fef6 	bl	8005a40 <_printf_common>
 8005c54:	3001      	adds	r0, #1
 8005c56:	d14d      	bne.n	8005cf4 <_printf_i+0x1c8>
 8005c58:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5c:	b005      	add	sp, #20
 8005c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c62:	4839      	ldr	r0, [pc, #228]	; (8005d48 <_printf_i+0x21c>)
 8005c64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005c68:	6813      	ldr	r3, [r2, #0]
 8005c6a:	6821      	ldr	r1, [r4, #0]
 8005c6c:	1d1d      	adds	r5, r3, #4
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6015      	str	r5, [r2, #0]
 8005c72:	060a      	lsls	r2, r1, #24
 8005c74:	d50b      	bpl.n	8005c8e <_printf_i+0x162>
 8005c76:	07ca      	lsls	r2, r1, #31
 8005c78:	bf44      	itt	mi
 8005c7a:	f041 0120 	orrmi.w	r1, r1, #32
 8005c7e:	6021      	strmi	r1, [r4, #0]
 8005c80:	b91b      	cbnz	r3, 8005c8a <_printf_i+0x15e>
 8005c82:	6822      	ldr	r2, [r4, #0]
 8005c84:	f022 0220 	bic.w	r2, r2, #32
 8005c88:	6022      	str	r2, [r4, #0]
 8005c8a:	2210      	movs	r2, #16
 8005c8c:	e7b7      	b.n	8005bfe <_printf_i+0xd2>
 8005c8e:	064d      	lsls	r5, r1, #25
 8005c90:	bf48      	it	mi
 8005c92:	b29b      	uxthmi	r3, r3
 8005c94:	e7ef      	b.n	8005c76 <_printf_i+0x14a>
 8005c96:	4665      	mov	r5, ip
 8005c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c9c:	fb02 3311 	mls	r3, r2, r1, r3
 8005ca0:	5cc3      	ldrb	r3, [r0, r3]
 8005ca2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	2900      	cmp	r1, #0
 8005caa:	d1f5      	bne.n	8005c98 <_printf_i+0x16c>
 8005cac:	e7b9      	b.n	8005c22 <_printf_i+0xf6>
 8005cae:	6813      	ldr	r3, [r2, #0]
 8005cb0:	6825      	ldr	r5, [r4, #0]
 8005cb2:	6961      	ldr	r1, [r4, #20]
 8005cb4:	1d18      	adds	r0, r3, #4
 8005cb6:	6010      	str	r0, [r2, #0]
 8005cb8:	0628      	lsls	r0, r5, #24
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	d501      	bpl.n	8005cc2 <_printf_i+0x196>
 8005cbe:	6019      	str	r1, [r3, #0]
 8005cc0:	e002      	b.n	8005cc8 <_printf_i+0x19c>
 8005cc2:	066a      	lsls	r2, r5, #25
 8005cc4:	d5fb      	bpl.n	8005cbe <_printf_i+0x192>
 8005cc6:	8019      	strh	r1, [r3, #0]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6123      	str	r3, [r4, #16]
 8005ccc:	4665      	mov	r5, ip
 8005cce:	e7b9      	b.n	8005c44 <_printf_i+0x118>
 8005cd0:	6813      	ldr	r3, [r2, #0]
 8005cd2:	1d19      	adds	r1, r3, #4
 8005cd4:	6011      	str	r1, [r2, #0]
 8005cd6:	681d      	ldr	r5, [r3, #0]
 8005cd8:	6862      	ldr	r2, [r4, #4]
 8005cda:	2100      	movs	r1, #0
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f7fa fa7f 	bl	80001e0 <memchr>
 8005ce2:	b108      	cbz	r0, 8005ce8 <_printf_i+0x1bc>
 8005ce4:	1b40      	subs	r0, r0, r5
 8005ce6:	6060      	str	r0, [r4, #4]
 8005ce8:	6863      	ldr	r3, [r4, #4]
 8005cea:	6123      	str	r3, [r4, #16]
 8005cec:	2300      	movs	r3, #0
 8005cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf2:	e7a7      	b.n	8005c44 <_printf_i+0x118>
 8005cf4:	6923      	ldr	r3, [r4, #16]
 8005cf6:	462a      	mov	r2, r5
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	47c0      	blx	r8
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d0aa      	beq.n	8005c58 <_printf_i+0x12c>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	079b      	lsls	r3, r3, #30
 8005d06:	d413      	bmi.n	8005d30 <_printf_i+0x204>
 8005d08:	68e0      	ldr	r0, [r4, #12]
 8005d0a:	9b03      	ldr	r3, [sp, #12]
 8005d0c:	4298      	cmp	r0, r3
 8005d0e:	bfb8      	it	lt
 8005d10:	4618      	movlt	r0, r3
 8005d12:	e7a3      	b.n	8005c5c <_printf_i+0x130>
 8005d14:	2301      	movs	r3, #1
 8005d16:	464a      	mov	r2, r9
 8005d18:	4639      	mov	r1, r7
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	47c0      	blx	r8
 8005d1e:	3001      	adds	r0, #1
 8005d20:	d09a      	beq.n	8005c58 <_printf_i+0x12c>
 8005d22:	3501      	adds	r5, #1
 8005d24:	68e3      	ldr	r3, [r4, #12]
 8005d26:	9a03      	ldr	r2, [sp, #12]
 8005d28:	1a9b      	subs	r3, r3, r2
 8005d2a:	42ab      	cmp	r3, r5
 8005d2c:	dcf2      	bgt.n	8005d14 <_printf_i+0x1e8>
 8005d2e:	e7eb      	b.n	8005d08 <_printf_i+0x1dc>
 8005d30:	2500      	movs	r5, #0
 8005d32:	f104 0919 	add.w	r9, r4, #25
 8005d36:	e7f5      	b.n	8005d24 <_printf_i+0x1f8>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1ac      	bne.n	8005c96 <_printf_i+0x16a>
 8005d3c:	7803      	ldrb	r3, [r0, #0]
 8005d3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d46:	e76c      	b.n	8005c22 <_printf_i+0xf6>
 8005d48:	08005fc9 	.word	0x08005fc9
 8005d4c:	08005fda 	.word	0x08005fda

08005d50 <_sbrk_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4c06      	ldr	r4, [pc, #24]	; (8005d6c <_sbrk_r+0x1c>)
 8005d54:	2300      	movs	r3, #0
 8005d56:	4605      	mov	r5, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	f7fb faaa 	bl	80012b4 <_sbrk>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_sbrk_r+0x1a>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_sbrk_r+0x1a>
 8005d68:	602b      	str	r3, [r5, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	200002c4 	.word	0x200002c4

08005d70 <__sread>:
 8005d70:	b510      	push	{r4, lr}
 8005d72:	460c      	mov	r4, r1
 8005d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d78:	f000 f896 	bl	8005ea8 <_read_r>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	bfab      	itete	ge
 8005d80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d82:	89a3      	ldrhlt	r3, [r4, #12]
 8005d84:	181b      	addge	r3, r3, r0
 8005d86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d8a:	bfac      	ite	ge
 8005d8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d8e:	81a3      	strhlt	r3, [r4, #12]
 8005d90:	bd10      	pop	{r4, pc}

08005d92 <__swrite>:
 8005d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d96:	461f      	mov	r7, r3
 8005d98:	898b      	ldrh	r3, [r1, #12]
 8005d9a:	05db      	lsls	r3, r3, #23
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	4616      	mov	r6, r2
 8005da2:	d505      	bpl.n	8005db0 <__swrite+0x1e>
 8005da4:	2302      	movs	r3, #2
 8005da6:	2200      	movs	r2, #0
 8005da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dac:	f000 f868 	bl	8005e80 <_lseek_r>
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005db6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dba:	81a3      	strh	r3, [r4, #12]
 8005dbc:	4632      	mov	r2, r6
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc6:	f000 b817 	b.w	8005df8 <_write_r>

08005dca <__sseek>:
 8005dca:	b510      	push	{r4, lr}
 8005dcc:	460c      	mov	r4, r1
 8005dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd2:	f000 f855 	bl	8005e80 <_lseek_r>
 8005dd6:	1c43      	adds	r3, r0, #1
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	bf15      	itete	ne
 8005ddc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005dde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005de2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005de6:	81a3      	strheq	r3, [r4, #12]
 8005de8:	bf18      	it	ne
 8005dea:	81a3      	strhne	r3, [r4, #12]
 8005dec:	bd10      	pop	{r4, pc}

08005dee <__sclose>:
 8005dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df2:	f000 b813 	b.w	8005e1c <_close_r>
	...

08005df8 <_write_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4c07      	ldr	r4, [pc, #28]	; (8005e18 <_write_r+0x20>)
 8005dfc:	4605      	mov	r5, r0
 8005dfe:	4608      	mov	r0, r1
 8005e00:	4611      	mov	r1, r2
 8005e02:	2200      	movs	r2, #0
 8005e04:	6022      	str	r2, [r4, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f7fb fa03 	bl	8001212 <_write>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_write_r+0x1e>
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_write_r+0x1e>
 8005e14:	602b      	str	r3, [r5, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	200002c4 	.word	0x200002c4

08005e1c <_close_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4c06      	ldr	r4, [pc, #24]	; (8005e38 <_close_r+0x1c>)
 8005e20:	2300      	movs	r3, #0
 8005e22:	4605      	mov	r5, r0
 8005e24:	4608      	mov	r0, r1
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	f7fb fa0f 	bl	800124a <_close>
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	d102      	bne.n	8005e36 <_close_r+0x1a>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	b103      	cbz	r3, 8005e36 <_close_r+0x1a>
 8005e34:	602b      	str	r3, [r5, #0]
 8005e36:	bd38      	pop	{r3, r4, r5, pc}
 8005e38:	200002c4 	.word	0x200002c4

08005e3c <_fstat_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4c07      	ldr	r4, [pc, #28]	; (8005e5c <_fstat_r+0x20>)
 8005e40:	2300      	movs	r3, #0
 8005e42:	4605      	mov	r5, r0
 8005e44:	4608      	mov	r0, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	f7fb fa0a 	bl	8001262 <_fstat>
 8005e4e:	1c43      	adds	r3, r0, #1
 8005e50:	d102      	bne.n	8005e58 <_fstat_r+0x1c>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	b103      	cbz	r3, 8005e58 <_fstat_r+0x1c>
 8005e56:	602b      	str	r3, [r5, #0]
 8005e58:	bd38      	pop	{r3, r4, r5, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200002c4 	.word	0x200002c4

08005e60 <_isatty_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4c06      	ldr	r4, [pc, #24]	; (8005e7c <_isatty_r+0x1c>)
 8005e64:	2300      	movs	r3, #0
 8005e66:	4605      	mov	r5, r0
 8005e68:	4608      	mov	r0, r1
 8005e6a:	6023      	str	r3, [r4, #0]
 8005e6c:	f7fb fa09 	bl	8001282 <_isatty>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_isatty_r+0x1a>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_isatty_r+0x1a>
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	200002c4 	.word	0x200002c4

08005e80 <_lseek_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4c07      	ldr	r4, [pc, #28]	; (8005ea0 <_lseek_r+0x20>)
 8005e84:	4605      	mov	r5, r0
 8005e86:	4608      	mov	r0, r1
 8005e88:	4611      	mov	r1, r2
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	6022      	str	r2, [r4, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f7fb fa02 	bl	8001298 <_lseek>
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	d102      	bne.n	8005e9e <_lseek_r+0x1e>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	b103      	cbz	r3, 8005e9e <_lseek_r+0x1e>
 8005e9c:	602b      	str	r3, [r5, #0]
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	200002c4 	.word	0x200002c4

08005ea4 <__malloc_lock>:
 8005ea4:	4770      	bx	lr

08005ea6 <__malloc_unlock>:
 8005ea6:	4770      	bx	lr

08005ea8 <_read_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	4c07      	ldr	r4, [pc, #28]	; (8005ec8 <_read_r+0x20>)
 8005eac:	4605      	mov	r5, r0
 8005eae:	4608      	mov	r0, r1
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	6022      	str	r2, [r4, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f7fb f98e 	bl	80011d8 <_read>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d102      	bne.n	8005ec6 <_read_r+0x1e>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	b103      	cbz	r3, 8005ec6 <_read_r+0x1e>
 8005ec4:	602b      	str	r3, [r5, #0]
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	200002c4 	.word	0x200002c4

08005ecc <_init>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr

08005ed8 <_fini>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	bf00      	nop
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr
