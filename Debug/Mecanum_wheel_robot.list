
Mecanum_wheel_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000536c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800550c  0800550c  0001550c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005628  08005628  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005628  08005628  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005628  08005628  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000070  080056a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  080056a0  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100c8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002585  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de0  00000000  00000000  000326f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca8  00000000  00000000  000334d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ed70  00000000  00000000  00034178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cd77  00000000  00000000  00052ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b103b  00000000  00000000  0005fc5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110c9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f9c  00000000  00000000  00110d18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054f4 	.word	0x080054f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080054f4 	.word	0x080054f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b40      	ldr	r3, [pc, #256]	; (8000398 <MX_GPIO_Init+0x118>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a3f      	ldr	r2, [pc, #252]	; (8000398 <MX_GPIO_Init+0x118>)
 800029c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b3d      	ldr	r3, [pc, #244]	; (8000398 <MX_GPIO_Init+0x118>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b3a      	ldr	r3, [pc, #232]	; (8000398 <MX_GPIO_Init+0x118>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a39      	ldr	r2, [pc, #228]	; (8000398 <MX_GPIO_Init+0x118>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b37      	ldr	r3, [pc, #220]	; (8000398 <MX_GPIO_Init+0x118>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b34      	ldr	r3, [pc, #208]	; (8000398 <MX_GPIO_Init+0x118>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a33      	ldr	r2, [pc, #204]	; (8000398 <MX_GPIO_Init+0x118>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b31      	ldr	r3, [pc, #196]	; (8000398 <MX_GPIO_Init+0x118>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b2e      	ldr	r3, [pc, #184]	; (8000398 <MX_GPIO_Init+0x118>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <MX_GPIO_Init+0x118>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <MX_GPIO_Init+0x118>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Z_DIR_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000300:	f001 fa50 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin|Z_STEP_Pin 
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800030a:	4824      	ldr	r0, [pc, #144]	; (800039c <MX_GPIO_Init+0x11c>)
 800030c:	f001 fa4a 	bl	80017a4 <HAL_GPIO_WritePin>
                          |A_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_STEP_GPIO_Port, A_STEP_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2180      	movs	r1, #128	; 0x80
 8000314:	4822      	ldr	r0, [pc, #136]	; (80003a0 <MX_GPIO_Init+0x120>)
 8000316:	f001 fa45 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800031a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000320:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <MX_GPIO_Init+0x124>)
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	4619      	mov	r1, r3
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <MX_GPIO_Init+0x120>)
 8000330:	f001 f8ae 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Z_DIR_Pin|X_STEP_Pin;
 8000334:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2300      	movs	r3, #0
 8000344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000346:	f107 0314 	add.w	r3, r7, #20
 800034a:	4619      	mov	r1, r3
 800034c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000350:	f001 f89e 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = Y_DIR_Pin|Y_STEP_Pin|X_DIR_Pin|Z_STEP_Pin 
 8000354:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8000358:	617b      	str	r3, [r7, #20]
                          |A_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	2300      	movs	r3, #0
 8000364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	4619      	mov	r1, r3
 800036c:	480b      	ldr	r0, [pc, #44]	; (800039c <MX_GPIO_Init+0x11c>)
 800036e:	f001 f88f 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A_STEP_Pin;
 8000372:	2380      	movs	r3, #128	; 0x80
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000376:	2301      	movs	r3, #1
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037e:	2300      	movs	r3, #0
 8000380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A_STEP_GPIO_Port, &GPIO_InitStruct);
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	4619      	mov	r1, r3
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_GPIO_Init+0x120>)
 800038a:	f001 f881 	bl	8001490 <HAL_GPIO_Init>

}
 800038e:	bf00      	nop
 8000390:	3728      	adds	r7, #40	; 0x28
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000
 800039c:	48000400 	.word	0x48000400
 80003a0:	48000800 	.word	0x48000800
 80003a4:	10210000 	.word	0x10210000

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 fe98 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f854 	bl	800045c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f7ff ff64 	bl	8000280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003b8:	f000 fd4a 	bl	8000e50 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80003bc:	f000 fb3a 	bl	8000a34 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003c0:	f000 fb86 	bl	8000ad0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80003c4:	f000 fbd4 	bl	8000b70 <MX_TIM4_Init>
  MX_TIM8_Init();
 80003c8:	f000 fc22 	bl	8000c10 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &incoming_byte, 1);
 80003cc:	2201      	movs	r2, #1
 80003ce:	4919      	ldr	r1, [pc, #100]	; (8000434 <main+0x8c>)
 80003d0:	4819      	ldr	r0, [pc, #100]	; (8000438 <main+0x90>)
 80003d2:	f003 fa9d 	bl	8003910 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80003d6:	4819      	ldr	r0, [pc, #100]	; (800043c <main+0x94>)
 80003d8:	f002 fdac 	bl	8002f34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80003dc:	4818      	ldr	r0, [pc, #96]	; (8000440 <main+0x98>)
 80003de:	f002 fda9 	bl	8002f34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80003e2:	4818      	ldr	r0, [pc, #96]	; (8000444 <main+0x9c>)
 80003e4:	f002 fda6 	bl	8002f34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80003e8:	4817      	ldr	r0, [pc, #92]	; (8000448 <main+0xa0>)
 80003ea:	f002 fda3 	bl	8002f34 <HAL_TIM_Base_Start_IT>
  printf("AT+INQ\n");
 80003ee:	4817      	ldr	r0, [pc, #92]	; (800044c <main+0xa4>)
 80003f0:	f004 f9ac 	bl	800474c <puts>
  HAL_Delay(3000);
 80003f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80003f8:	f000 fed8 	bl	80011ac <HAL_Delay>
  printf("AT+CONN1\n");
 80003fc:	4814      	ldr	r0, [pc, #80]	; (8000450 <main+0xa8>)
 80003fe:	f004 f9a5 	bl	800474c <puts>
  HAL_Delay(3000);
 8000402:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000406:	f000 fed1 	bl	80011ac <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("goal position x = %d, y = %d, fi = %d\n", goal_pos[0], goal_pos[1], goal_pos[2]);
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <main+0xac>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	b21b      	sxth	r3, r3
 8000410:	4619      	mov	r1, r3
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <main+0xac>)
 8000414:	885b      	ldrh	r3, [r3, #2]
 8000416:	b21b      	sxth	r3, r3
 8000418:	461a      	mov	r2, r3
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <main+0xac>)
 800041c:	889b      	ldrh	r3, [r3, #4]
 800041e:	b21b      	sxth	r3, r3
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <main+0xb0>)
 8000422:	f004 f91f 	bl	8004664 <iprintf>
	  control_loop();
 8000426:	f000 f87f 	bl	8000528 <control_loop>
	  HAL_Delay(100);
 800042a:	2064      	movs	r0, #100	; 0x64
 800042c:	f000 febe 	bl	80011ac <HAL_Delay>
	  printf("goal position x = %d, y = %d, fi = %d\n", goal_pos[0], goal_pos[1], goal_pos[2]);
 8000430:	e7eb      	b.n	800040a <main+0x62>
 8000432:	bf00      	nop
 8000434:	200000b4 	.word	0x200000b4
 8000438:	200001c0 	.word	0x200001c0
 800043c:	20000180 	.word	0x20000180
 8000440:	20000140 	.word	0x20000140
 8000444:	20000100 	.word	0x20000100
 8000448:	200000c0 	.word	0x200000c0
 800044c:	0800550c 	.word	0x0800550c
 8000450:	08005514 	.word	0x08005514
 8000454:	200000b8 	.word	0x200000b8
 8000458:	08005520 	.word	0x08005520

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b0a6      	sub	sp, #152	; 0x98
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000466:	2228      	movs	r2, #40	; 0x28
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f004 f8f2 	bl	8004654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000470:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2258      	movs	r2, #88	; 0x58
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f004 f8e4 	bl	8004654 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048c:	2302      	movs	r3, #2
 800048e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000490:	2301      	movs	r3, #1
 8000492:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000494:	2310      	movs	r3, #16
 8000496:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049a:	2302      	movs	r3, #2
 800049c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004ba:	4618      	mov	r0, r3
 80004bc:	f001 f9a4 	bl	8001808 <HAL_RCC_OscConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004c6:	f000 f97a 	bl	80007be <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ca:	230f      	movs	r3, #15
 80004cc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ce:	2302      	movs	r3, #2
 80004d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004e4:	2102      	movs	r1, #2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f002 f8a4 	bl	8002634 <HAL_RCC_ClockConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004f2:	f000 f964 	bl	80007be <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM8
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <SystemClock_Config+0xc8>)
 80004f8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80004fe:	2300      	movs	r3, #0
 8000500:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000502:	2300      	movs	r3, #0
 8000504:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000506:	2300      	movs	r3, #0
 8000508:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	4618      	mov	r0, r3
 800050e:	f002 fac7 	bl	8002aa0 <HAL_RCCEx_PeriphCLKConfig>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000518:	f000 f951 	bl	80007be <Error_Handler>
  }
}
 800051c:	bf00      	nop
 800051e:	3798      	adds	r7, #152	; 0x98
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	00302002 	.word	0x00302002

08000528 <control_loop>:

/* USER CODE BEGIN 4 */
void control_loop()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	// calculate speed for each wheel
	x_vel = goal_pos[0] - 100;
 800052c:	4b88      	ldr	r3, [pc, #544]	; (8000750 <control_loop+0x228>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	b21b      	sxth	r3, r3
 8000532:	3b64      	subs	r3, #100	; 0x64
 8000534:	4a87      	ldr	r2, [pc, #540]	; (8000754 <control_loop+0x22c>)
 8000536:	6013      	str	r3, [r2, #0]
	y_vel = goal_pos[1] - 100;
 8000538:	4b85      	ldr	r3, [pc, #532]	; (8000750 <control_loop+0x228>)
 800053a:	885b      	ldrh	r3, [r3, #2]
 800053c:	b21b      	sxth	r3, r3
 800053e:	3b64      	subs	r3, #100	; 0x64
 8000540:	4a85      	ldr	r2, [pc, #532]	; (8000758 <control_loop+0x230>)
 8000542:	6013      	str	r3, [r2, #0]
	fi_vel = goal_pos[2] - 100;
 8000544:	4b82      	ldr	r3, [pc, #520]	; (8000750 <control_loop+0x228>)
 8000546:	889b      	ldrh	r3, [r3, #4]
 8000548:	b21b      	sxth	r3, r3
 800054a:	3b64      	subs	r3, #100	; 0x64
 800054c:	4a83      	ldr	r2, [pc, #524]	; (800075c <control_loop+0x234>)
 800054e:	6013      	str	r3, [r2, #0]
	vx = (x_vel - y_vel - (L + D)*fi_vel)*SPEED; //forward left v1
 8000550:	4b80      	ldr	r3, [pc, #512]	; (8000754 <control_loop+0x22c>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b80      	ldr	r3, [pc, #512]	; (8000758 <control_loop+0x230>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	1ad1      	subs	r1, r2, r3
 800055a:	4b80      	ldr	r3, [pc, #512]	; (800075c <control_loop+0x234>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4613      	mov	r3, r2
 8000560:	079b      	lsls	r3, r3, #30
 8000562:	1a9b      	subs	r3, r3, r2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	1a9b      	subs	r3, r3, r2
 8000568:	440b      	add	r3, r1
 800056a:	2232      	movs	r2, #50	; 0x32
 800056c:	fb02 f303 	mul.w	r3, r2, r3
 8000570:	4a7b      	ldr	r2, [pc, #492]	; (8000760 <control_loop+0x238>)
 8000572:	6013      	str	r3, [r2, #0]
	vy = (x_vel + y_vel - (L + D)*fi_vel)*SPEED; //back left v2
 8000574:	4b77      	ldr	r3, [pc, #476]	; (8000754 <control_loop+0x22c>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b77      	ldr	r3, [pc, #476]	; (8000758 <control_loop+0x230>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	18d1      	adds	r1, r2, r3
 800057e:	4b77      	ldr	r3, [pc, #476]	; (800075c <control_loop+0x234>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	4613      	mov	r3, r2
 8000584:	079b      	lsls	r3, r3, #30
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	440b      	add	r3, r1
 800058e:	2232      	movs	r2, #50	; 0x32
 8000590:	fb02 f303 	mul.w	r3, r2, r3
 8000594:	4a73      	ldr	r2, [pc, #460]	; (8000764 <control_loop+0x23c>)
 8000596:	6013      	str	r3, [r2, #0]
	va = (x_vel - y_vel + (L + D)*fi_vel)*SPEED; //back right v3
 8000598:	4b6e      	ldr	r3, [pc, #440]	; (8000754 <control_loop+0x22c>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b6e      	ldr	r3, [pc, #440]	; (8000758 <control_loop+0x230>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	1ad1      	subs	r1, r2, r3
 80005a2:	4b6e      	ldr	r3, [pc, #440]	; (800075c <control_loop+0x234>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	440b      	add	r3, r1
 80005ae:	2232      	movs	r2, #50	; 0x32
 80005b0:	fb02 f303 	mul.w	r3, r2, r3
 80005b4:	4a6c      	ldr	r2, [pc, #432]	; (8000768 <control_loop+0x240>)
 80005b6:	6013      	str	r3, [r2, #0]
	vz = (x_vel + y_vel + (L + D)*fi_vel)*SPEED; //forward right v4
 80005b8:	4b66      	ldr	r3, [pc, #408]	; (8000754 <control_loop+0x22c>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b66      	ldr	r3, [pc, #408]	; (8000758 <control_loop+0x230>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	18d1      	adds	r1, r2, r3
 80005c2:	4b66      	ldr	r3, [pc, #408]	; (800075c <control_loop+0x234>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	440b      	add	r3, r1
 80005ce:	2232      	movs	r2, #50	; 0x32
 80005d0:	fb02 f303 	mul.w	r3, r2, r3
 80005d4:	4a65      	ldr	r2, [pc, #404]	; (800076c <control_loop+0x244>)
 80005d6:	6013      	str	r3, [r2, #0]
	// set direction for each wheel
	if(vx < 0)
 80005d8:	4b61      	ldr	r3, [pc, #388]	; (8000760 <control_loop+0x238>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	da05      	bge.n	80005ec <control_loop+0xc4>
		HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2110      	movs	r1, #16
 80005e4:	4862      	ldr	r0, [pc, #392]	; (8000770 <control_loop+0x248>)
 80005e6:	f001 f8dd 	bl	80017a4 <HAL_GPIO_WritePin>
 80005ea:	e004      	b.n	80005f6 <control_loop+0xce>
	else
		HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2110      	movs	r1, #16
 80005f0:	485f      	ldr	r0, [pc, #380]	; (8000770 <control_loop+0x248>)
 80005f2:	f001 f8d7 	bl	80017a4 <HAL_GPIO_WritePin>
	if(vy < 0)
 80005f6:	4b5b      	ldr	r3, [pc, #364]	; (8000764 <control_loop+0x23c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	da06      	bge.n	800060c <control_loop+0xe4>
		HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000604:	485a      	ldr	r0, [pc, #360]	; (8000770 <control_loop+0x248>)
 8000606:	f001 f8cd 	bl	80017a4 <HAL_GPIO_WritePin>
 800060a:	e005      	b.n	8000618 <control_loop+0xf0>
	else
		HAL_GPIO_WritePin(Y_DIR_GPIO_Port, Y_DIR_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000612:	4857      	ldr	r0, [pc, #348]	; (8000770 <control_loop+0x248>)
 8000614:	f001 f8c6 	bl	80017a4 <HAL_GPIO_WritePin>
	if(vz > 0)
 8000618:	4b54      	ldr	r3, [pc, #336]	; (800076c <control_loop+0x244>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	dd07      	ble.n	8000630 <control_loop+0x108>
		HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062a:	f001 f8bb 	bl	80017a4 <HAL_GPIO_WritePin>
 800062e:	e006      	b.n	800063e <control_loop+0x116>
	else
		HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f001 f8b3 	bl	80017a4 <HAL_GPIO_WritePin>
	if(va > 0)
 800063e:	4b4a      	ldr	r3, [pc, #296]	; (8000768 <control_loop+0x240>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	dd05      	ble.n	8000652 <control_loop+0x12a>
		HAL_GPIO_WritePin(A_DIR_GPIO_Port, A_DIR_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	4849      	ldr	r0, [pc, #292]	; (8000770 <control_loop+0x248>)
 800064c:	f001 f8aa 	bl	80017a4 <HAL_GPIO_WritePin>
 8000650:	e004      	b.n	800065c <control_loop+0x134>
	else
		HAL_GPIO_WritePin(A_DIR_GPIO_Port, A_DIR_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	2140      	movs	r1, #64	; 0x40
 8000656:	4846      	ldr	r0, [pc, #280]	; (8000770 <control_loop+0x248>)
 8000658:	f001 f8a4 	bl	80017a4 <HAL_GPIO_WritePin>
	// set interrupts
	vx = abs(vx);
 800065c:	4b40      	ldr	r3, [pc, #256]	; (8000760 <control_loop+0x238>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	bfb8      	it	lt
 8000664:	425b      	neglt	r3, r3
 8000666:	4a3e      	ldr	r2, [pc, #248]	; (8000760 <control_loop+0x238>)
 8000668:	6013      	str	r3, [r2, #0]
	TIM2->ARR = constraint(SystemCoreClock/(vx*(TIM2->PSC + 1)) - 1, 1, MAX);
 800066a:	4b42      	ldr	r3, [pc, #264]	; (8000774 <control_loop+0x24c>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000674:	3301      	adds	r3, #1
 8000676:	493a      	ldr	r1, [pc, #232]	; (8000760 <control_loop+0x238>)
 8000678:	6809      	ldr	r1, [r1, #0]
 800067a:	fb01 f303 	mul.w	r3, r1, r3
 800067e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000682:	3b01      	subs	r3, #1
 8000684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000688:	2101      	movs	r1, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f87e 	bl	800078c <constraint>
 8000690:	4602      	mov	r2, r0
 8000692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
	vy = abs(vy);
 8000698:	4b32      	ldr	r3, [pc, #200]	; (8000764 <control_loop+0x23c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	bfb8      	it	lt
 80006a0:	425b      	neglt	r3, r3
 80006a2:	4a30      	ldr	r2, [pc, #192]	; (8000764 <control_loop+0x23c>)
 80006a4:	6013      	str	r3, [r2, #0]
	TIM3->ARR = constraint(SystemCoreClock/(vy*(TIM3->PSC + 1)) - 1, 1, MAX);
 80006a6:	4b33      	ldr	r3, [pc, #204]	; (8000774 <control_loop+0x24c>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b33      	ldr	r3, [pc, #204]	; (8000778 <control_loop+0x250>)
 80006ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ae:	3301      	adds	r3, #1
 80006b0:	492c      	ldr	r1, [pc, #176]	; (8000764 <control_loop+0x23c>)
 80006b2:	6809      	ldr	r1, [r1, #0]
 80006b4:	fb01 f303 	mul.w	r3, r1, r3
 80006b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006bc:	3b01      	subs	r3, #1
 80006be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006c2:	2101      	movs	r1, #1
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f861 	bl	800078c <constraint>
 80006ca:	4602      	mov	r2, r0
 80006cc:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <control_loop+0x250>)
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
	vz = abs(vz);
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <control_loop+0x244>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bfb8      	it	lt
 80006d8:	425b      	neglt	r3, r3
 80006da:	4a24      	ldr	r2, [pc, #144]	; (800076c <control_loop+0x244>)
 80006dc:	6013      	str	r3, [r2, #0]
	TIM4->ARR = constraint(SystemCoreClock/(vz*(TIM4->PSC + 1)) - 1, 1, MAX);
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <control_loop+0x24c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <control_loop+0x254>)
 80006e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e6:	3301      	adds	r3, #1
 80006e8:	4920      	ldr	r1, [pc, #128]	; (800076c <control_loop+0x244>)
 80006ea:	6809      	ldr	r1, [r1, #0]
 80006ec:	fb01 f303 	mul.w	r3, r1, r3
 80006f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f4:	3b01      	subs	r3, #1
 80006f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006fa:	2101      	movs	r1, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f845 	bl	800078c <constraint>
 8000702:	4602      	mov	r2, r0
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <control_loop+0x254>)
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
	va = abs(va);
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <control_loop+0x240>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	bfb8      	it	lt
 8000710:	425b      	neglt	r3, r3
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <control_loop+0x240>)
 8000714:	6013      	str	r3, [r2, #0]
	TIM8->ARR = constraint(SystemCoreClock/(va*(TIM8->PSC + 1)) - 1, 1, MAX);
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <control_loop+0x24c>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <control_loop+0x258>)
 800071c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800071e:	3301      	adds	r3, #1
 8000720:	4911      	ldr	r1, [pc, #68]	; (8000768 <control_loop+0x240>)
 8000722:	6809      	ldr	r1, [r1, #0]
 8000724:	fb01 f303 	mul.w	r3, r1, r3
 8000728:	fbb2 f3f3 	udiv	r3, r2, r3
 800072c:	3b01      	subs	r3, #1
 800072e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000732:	2101      	movs	r1, #1
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f829 	bl	800078c <constraint>
 800073a:	4602      	mov	r2, r0
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <control_loop+0x258>)
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_UART_Receive_IT(&huart2, &incoming_byte, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	4910      	ldr	r1, [pc, #64]	; (8000784 <control_loop+0x25c>)
 8000744:	4810      	ldr	r0, [pc, #64]	; (8000788 <control_loop+0x260>)
 8000746:	f003 f8e3 	bl	8003910 <HAL_UART_Receive_IT>

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000b8 	.word	0x200000b8
 8000754:	200000b0 	.word	0x200000b0
 8000758:	2000009c 	.word	0x2000009c
 800075c:	200000a8 	.word	0x200000a8
 8000760:	200000a0 	.word	0x200000a0
 8000764:	200000ac 	.word	0x200000ac
 8000768:	200000a4 	.word	0x200000a4
 800076c:	20000098 	.word	0x20000098
 8000770:	48000400 	.word	0x48000400
 8000774:	20000000 	.word	0x20000000
 8000778:	40000400 	.word	0x40000400
 800077c:	40000800 	.word	0x40000800
 8000780:	40013400 	.word	0x40013400
 8000784:	200000b4 	.word	0x200000b4
 8000788:	200001c0 	.word	0x200001c0

0800078c <constraint>:

int constraint(int32_t var, int bottom_lim, int upper_lim)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
	if(var > upper_lim)
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	dd01      	ble.n	80007a4 <constraint+0x18>
		return upper_lim;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	e006      	b.n	80007b2 <constraint+0x26>
	else if(var < bottom_lim)
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	da01      	bge.n	80007b0 <constraint+0x24>
		return bottom_lim;
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	e000      	b.n	80007b2 <constraint+0x26>
	else
		return var;
 80007b0:	68fb      	ldr	r3, [r7, #12]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_MspInit+0x44>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <HAL_MspInit+0x44>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <HAL_MspInit+0x44>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x44>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x44>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x44>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000802:	2007      	movs	r0, #7
 8000804:	f000 fdc4 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 fc80 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <TIM2_IRQHandler+0x10>)
 8000876:	f002 fb87 	bl	8002f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000180 	.word	0x20000180

08000884 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <TIM3_IRQHandler+0x10>)
 800088a:	f002 fb7d 	bl	8002f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000140 	.word	0x20000140

08000898 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <TIM4_IRQHandler+0x10>)
 800089e:	f002 fb73 	bl	8002f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000100 	.word	0x20000100

080008ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <USART2_IRQHandler+0x10>)
 80008b2:	f003 f8cf 	bl	8003a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200001c0 	.word	0x200001c0

080008c0 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM8_UP_IRQHandler+0x10>)
 80008c6:	f002 fb5f 	bl	8002f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000c0 	.word	0x200000c0

080008d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e00a      	b.n	80008fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008e6:	f3af 8000 	nop.w
 80008ea:	4601      	mov	r1, r0
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	60ba      	str	r2, [r7, #8]
 80008f2:	b2ca      	uxtb	r2, r1
 80008f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbf0      	blt.n	80008e6 <_read+0x12>
	}

return len;
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	e009      	b.n	8000934 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	60ba      	str	r2, [r7, #8]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f000 fb1d 	bl	8000f68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	3301      	adds	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	429a      	cmp	r2, r3
 800093a:	dbf1      	blt.n	8000920 <_write+0x12>
	}
	return len;
 800093c:	687b      	ldr	r3, [r7, #4]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <_close>:

int _close(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
	return -1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800096e:	605a      	str	r2, [r3, #4]
	return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <_isatty>:

int _isatty(int file)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
	return 1;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
	return 0;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x50>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d102      	bne.n	80009c6 <_sbrk+0x16>
		heap_end = &end;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <_sbrk+0x50>)
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <_sbrk+0x54>)
 80009c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <_sbrk+0x50>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <_sbrk+0x50>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4413      	add	r3, r2
 80009d4:	466a      	mov	r2, sp
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d907      	bls.n	80009ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80009da:	f003 fe11 	bl	8004600 <__errno>
 80009de:	4602      	mov	r2, r0
 80009e0:	230c      	movs	r3, #12
 80009e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
 80009e8:	e006      	b.n	80009f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <_sbrk+0x50>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <_sbrk+0x50>)
 80009f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80009f6:	68fb      	ldr	r3, [r7, #12]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2000008c 	.word	0x2000008c
 8000a04:	20000248 	.word	0x20000248

08000a08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <SystemInit+0x28>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <SystemInit+0x28>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SystemInit+0x28>)
 8000a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a22:	609a      	str	r2, [r3, #8]
#endif
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a5c:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000a60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a6a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a7e:	f002 fa2d 	bl	8002edc <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a88:	f7ff fe99 	bl	80007be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	4619      	mov	r1, r3
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <MX_TIM2_Init+0x98>)
 8000a9a:	f002 fb94 	bl	80031c6 <HAL_TIM_ConfigClockSource>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000aa4:	f7ff fe8b 	bl	80007be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_TIM2_Init+0x98>)
 8000ab6:	f002 fd9f 	bl	80035f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ac0:	f7ff fe7d 	bl	80007be <Error_Handler>
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3720      	adds	r7, #32
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000180 	.word	0x20000180

08000ad0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000af0:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <MX_TIM3_Init+0x9c>)
 8000af2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3599;
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000af6:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000afa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000b04:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b16:	4814      	ldr	r0, [pc, #80]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000b18:	f002 f9e0 	bl	8002edc <HAL_TIM_Base_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000b22:	f7ff fe4c 	bl	80007be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000b34:	f002 fb47 	bl	80031c6 <HAL_TIM_ConfigClockSource>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000b3e:	f7ff fe3e 	bl	80007be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000b50:	f002 fd52 	bl	80035f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000b5a:	f7ff fe30 	bl	80007be <Error_Handler>
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000140 	.word	0x20000140
 8000b6c:	40000400 	.word	0x40000400

08000b70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000b90:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <MX_TIM4_Init+0x9c>)
 8000b92:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3599;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000b96:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000b9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000ba4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ba8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bb6:	4814      	ldr	r0, [pc, #80]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000bb8:	f002 f990 	bl	8002edc <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000bc2:	f7ff fdfc 	bl	80007be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000bd4:	f002 faf7 	bl	80031c6 <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000bde:	f7ff fdee 	bl	80007be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <MX_TIM4_Init+0x98>)
 8000bf0:	f002 fd02 	bl	80035f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000bfa:	f7ff fde0 	bl	80007be <Error_Handler>
  }

}
 8000bfe:	bf00      	nop
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000100 	.word	0x20000100
 8000c0c:	40000800 	.word	0x40000800

08000c10 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]

  htim8.Instance = TIM8;
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <MX_TIM8_Init+0xa0>)
 8000c30:	4a20      	ldr	r2, [pc, #128]	; (8000cb4 <MX_TIM8_Init+0xa4>)
 8000c32:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3599;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <MX_TIM8_Init+0xa0>)
 8000c36:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000c3a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_TIM8_Init+0xa0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_TIM8_Init+0xa0>)
 8000c44:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c48:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_TIM8_Init+0xa0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_TIM8_Init+0xa0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_TIM8_Init+0xa0>)
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c5c:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <MX_TIM8_Init+0xa0>)
 8000c5e:	f002 f93d 	bl	8002edc <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f7ff fda9 	bl	80007be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4619      	mov	r1, r3
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_TIM8_Init+0xa0>)
 8000c7a:	f002 faa4 	bl	80031c6 <HAL_TIM_ConfigClockSource>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000c84:	f7ff fd9b 	bl	80007be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_TIM8_Init+0xa0>)
 8000c9a:	f002 fcad 	bl	80035f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000ca4:	f7ff fd8b 	bl	80007be <Error_Handler>
  }

}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000c0 	.word	0x200000c0
 8000cb4:	40013400 	.word	0x40013400

08000cb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc8:	d114      	bne.n	8000cf4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cca:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <HAL_TIM_Base_MspInit+0xe0>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a32      	ldr	r2, [pc, #200]	; (8000d98 <HAL_TIM_Base_MspInit+0xe0>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <HAL_TIM_Base_MspInit+0xe0>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	201c      	movs	r0, #28
 8000ce8:	f000 fb5d 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cec:	201c      	movs	r0, #28
 8000cee:	f000 fb76 	bl	80013de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000cf2:	e04c      	b.n	8000d8e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a28      	ldr	r2, [pc, #160]	; (8000d9c <HAL_TIM_Base_MspInit+0xe4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d114      	bne.n	8000d28 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cfe:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <HAL_TIM_Base_MspInit+0xe0>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <HAL_TIM_Base_MspInit+0xe0>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <HAL_TIM_Base_MspInit+0xe0>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201d      	movs	r0, #29
 8000d1c:	f000 fb43 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d20:	201d      	movs	r0, #29
 8000d22:	f000 fb5c 	bl	80013de <HAL_NVIC_EnableIRQ>
}
 8000d26:	e032      	b.n	8000d8e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <HAL_TIM_Base_MspInit+0xe8>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d114      	bne.n	8000d5c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_TIM_Base_MspInit+0xe0>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <HAL_TIM_Base_MspInit+0xe0>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_TIM_Base_MspInit+0xe0>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	201e      	movs	r0, #30
 8000d50:	f000 fb29 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d54:	201e      	movs	r0, #30
 8000d56:	f000 fb42 	bl	80013de <HAL_NVIC_EnableIRQ>
}
 8000d5a:	e018      	b.n	8000d8e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM8)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_TIM_Base_MspInit+0xec>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d113      	bne.n	8000d8e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_TIM_Base_MspInit+0xe0>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <HAL_TIM_Base_MspInit+0xe0>)
 8000d6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d70:	6193      	str	r3, [r2, #24]
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_TIM_Base_MspInit+0xe0>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	202c      	movs	r0, #44	; 0x2c
 8000d84:	f000 fb0f 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000d88:	202c      	movs	r0, #44	; 0x2c
 8000d8a:	f000 fb28 	bl	80013de <HAL_NVIC_EnableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40000400 	.word	0x40000400
 8000da0:	40000800 	.word	0x40000800
 8000da4:	40013400 	.word	0x40013400

08000da8 <HAL_TIM_PeriodElapsedCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db8:	d10a      	bne.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		if(vx != 0)
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d02f      	beq.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x7a>
			HAL_GPIO_TogglePin(X_STEP_GPIO_Port, X_STEP_Pin);
 8000dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f000 fd03 	bl	80017d4 <HAL_GPIO_TogglePin>
		if(va != 0)
			HAL_GPIO_TogglePin(A_STEP_GPIO_Port, A_STEP_Pin);
	}


}
 8000dce:	e028      	b.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x7a>
	else if(htim->Instance == TIM3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a16      	ldr	r2, [pc, #88]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d108      	bne.n	8000dec <HAL_TIM_PeriodElapsedCallback+0x44>
		if(vy != 0)
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d01f      	beq.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x7a>
			HAL_GPIO_TogglePin(Y_STEP_GPIO_Port, Y_STEP_Pin);
 8000de2:	2108      	movs	r1, #8
 8000de4:	4814      	ldr	r0, [pc, #80]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000de6:	f000 fcf5 	bl	80017d4 <HAL_GPIO_TogglePin>
}
 8000dea:	e01a      	b.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x7a>
	else if(htim->Instance == TIM4)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d108      	bne.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x60>
		if(vz != 0)
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d011      	beq.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x7a>
			HAL_GPIO_TogglePin(Z_STEP_GPIO_Port, Z_STEP_Pin);
 8000dfe:	2120      	movs	r1, #32
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e02:	f000 fce7 	bl	80017d4 <HAL_GPIO_TogglePin>
}
 8000e06:	e00c      	b.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x7a>
	else if(htim->Instance == TIM8)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d107      	bne.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x7a>
		if(va != 0)
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_TIM_PeriodElapsedCallback+0x7a>
			HAL_GPIO_TogglePin(A_STEP_GPIO_Port, A_STEP_Pin);
 8000e1a:	2180      	movs	r1, #128	; 0x80
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000e1e:	f000 fcd9 	bl	80017d4 <HAL_GPIO_TogglePin>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200000a0 	.word	0x200000a0
 8000e30:	40000400 	.word	0x40000400
 8000e34:	200000ac 	.word	0x200000ac
 8000e38:	48000400 	.word	0x48000400
 8000e3c:	40000800 	.word	0x40000800
 8000e40:	20000098 	.word	0x20000098
 8000e44:	40013400 	.word	0x40013400
 8000e48:	200000a4 	.word	0x200000a4
 8000e4c:	48000800 	.word	0x48000800

08000e50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <MX_USART2_UART_Init+0x5c>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_USART2_UART_Init+0x58>)
 8000e94:	f002 fc5a 	bl	800374c <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e9e:	f7ff fc8e 	bl	80007be <Error_Handler>
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001c0 	.word	0x200001c0
 8000eac:	40004400 	.word	0x40004400

08000eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <HAL_UART_MspInit+0x8c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d130      	bne.n	8000f34 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <HAL_UART_MspInit+0x90>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <HAL_UART_MspInit+0x90>)
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <HAL_UART_MspInit+0x90>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_UART_MspInit+0x90>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <HAL_UART_MspInit+0x90>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	6153      	str	r3, [r2, #20]
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_UART_MspInit+0x90>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f02:	230c      	movs	r3, #12
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f12:	2307      	movs	r3, #7
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f000 fab6 	bl	8001490 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2026      	movs	r0, #38	; 0x26
 8000f2a:	f000 fa3c 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f2e:	2026      	movs	r0, #38	; 0x26
 8000f30:	f000 fa55 	bl	80013de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */
  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40004400 	.word	0x40004400
 8000f40:	40021000 	.word	0x40021000

08000f44 <send_char>:
  }
} 

/* USER CODE BEGIN 1 */
void send_char(char c)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t*)&c, 1, 1000);
 8000f4e:	1df9      	adds	r1, r7, #7
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	2201      	movs	r2, #1
 8000f56:	4803      	ldr	r0, [pc, #12]	; (8000f64 <send_char+0x20>)
 8000f58:	f002 fc46 	bl	80037e8 <HAL_UART_Transmit>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200001c0 	.word	0x200001c0

08000f68 <__io_putchar>:

int __io_putchar(int c)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	if(c == '\n')
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b0a      	cmp	r3, #10
 8000f74:	d102      	bne.n	8000f7c <__io_putchar+0x14>
		send_char('\r');
 8000f76:	200d      	movs	r0, #13
 8000f78:	f7ff ffe4 	bl	8000f44 <send_char>
	send_char(c);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ffdf 	bl	8000f44 <send_char>
	return c;
 8000f86:	687b      	ldr	r3, [r7, #4]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_UART_RxCpltCallback+0x28>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d106      	bne.n	8000fb0 <HAL_UART_RxCpltCallback+0x20>
	{
		pc_interface();
 8000fa2:	f000 f80f 	bl	8000fc4 <pc_interface>
		HAL_UART_Receive_IT(&huart2, &incoming_byte, 1);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4904      	ldr	r1, [pc, #16]	; (8000fbc <HAL_UART_RxCpltCallback+0x2c>)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_UART_RxCpltCallback+0x30>)
 8000fac:	f002 fcb0 	bl	8003910 <HAL_UART_Receive_IT>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40004400 	.word	0x40004400
 8000fbc:	200000b4 	.word	0x200000b4
 8000fc0:	200001c0 	.word	0x200001c0

08000fc4 <pc_interface>:

void pc_interface()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	incoming_byte = constraint(incoming_byte, 0, 255);
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	; (800107c <pc_interface+0xb8>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	22ff      	movs	r2, #255	; 0xff
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fbdb 	bl	800078c <constraint>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <pc_interface+0xb8>)
 8000fdc:	701a      	strb	r2, [r3, #0]
	if ((incoming_byte >= 48) && (incoming_byte <= 57))
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <pc_interface+0xb8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b2f      	cmp	r3, #47	; 0x2f
 8000fe4:	d918      	bls.n	8001018 <pc_interface+0x54>
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <pc_interface+0xb8>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b39      	cmp	r3, #57	; 0x39
 8000fec:	d814      	bhi.n	8001018 <pc_interface+0x54>
		{
			incoming_byte -= 48;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <pc_interface+0xb8>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	3b30      	subs	r3, #48	; 0x30
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <pc_interface+0xb8>)
 8000ff8:	701a      	strb	r2, [r3, #0]
			buff = buff*10 + incoming_byte;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <pc_interface+0xbc>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	4413      	add	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <pc_interface+0xb8>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <pc_interface+0xbc>)
 8001014:	701a      	strb	r2, [r3, #0]
		else
		{
			printf("Incorrect input\n");
			buff = 0;
		}
}
 8001016:	e02f      	b.n	8001078 <pc_interface+0xb4>
		else if (incoming_byte == 'x')
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <pc_interface+0xb8>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b78      	cmp	r3, #120	; 0x78
 800101e:	d109      	bne.n	8001034 <pc_interface+0x70>
			goal_pos[0] = buff;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <pc_interface+0xbc>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	b21a      	sxth	r2, r3
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <pc_interface+0xc0>)
 800102a:	801a      	strh	r2, [r3, #0]
			buff = 0;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <pc_interface+0xbc>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	e021      	b.n	8001078 <pc_interface+0xb4>
		else if (incoming_byte == 'y')
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <pc_interface+0xb8>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b79      	cmp	r3, #121	; 0x79
 800103a:	d109      	bne.n	8001050 <pc_interface+0x8c>
			goal_pos[1] = buff;
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <pc_interface+0xbc>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	b21a      	sxth	r2, r3
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <pc_interface+0xc0>)
 8001046:	805a      	strh	r2, [r3, #2]
			buff = 0;
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <pc_interface+0xbc>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
}
 800104e:	e013      	b.n	8001078 <pc_interface+0xb4>
		else if (incoming_byte == 'f')
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <pc_interface+0xb8>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b66      	cmp	r3, #102	; 0x66
 8001056:	d109      	bne.n	800106c <pc_interface+0xa8>
			goal_pos[2] = buff;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <pc_interface+0xbc>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	b21a      	sxth	r2, r3
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <pc_interface+0xc0>)
 8001062:	809a      	strh	r2, [r3, #4]
			buff = 0;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <pc_interface+0xbc>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
}
 800106a:	e005      	b.n	8001078 <pc_interface+0xb4>
			printf("Incorrect input\n");
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <pc_interface+0xc4>)
 800106e:	f003 fb6d 	bl	800474c <puts>
			buff = 0;
 8001072:	4b03      	ldr	r3, [pc, #12]	; (8001080 <pc_interface+0xbc>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200000b4 	.word	0x200000b4
 8001080:	200000b5 	.word	0x200000b5
 8001084:	200000b8 	.word	0x200000b8
 8001088:	08005548 	.word	0x08005548

0800108c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001090:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001092:	e003      	b.n	800109c <LoopCopyDataInit>

08001094 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001096:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001098:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800109a:	3104      	adds	r1, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010a4:	d3f6      	bcc.n	8001094 <CopyDataInit>
	ldr	r2, =_sbss
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010a8:	e002      	b.n	80010b0 <LoopFillZerobss>

080010aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010ac:	f842 3b04 	str.w	r3, [r2], #4

080010b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <LoopForever+0x16>)
	cmp	r2, r3
 80010b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010b4:	d3f9      	bcc.n	80010aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010b6:	f7ff fca7 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ba:	f003 faa7 	bl	800460c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010be:	f7ff f973 	bl	80003a8 <main>

080010c2 <LoopForever>:

LoopForever:
    b LoopForever
 80010c2:	e7fe      	b.n	80010c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010c4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80010c8:	08005630 	.word	0x08005630
	ldr	r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010d0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80010d4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80010d8:	20000248 	.word	0x20000248

080010dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_2_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x28>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x28>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f94d 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fb66 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f965 	bl	80013fa <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f92d 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	20000240 	.word	0x20000240

08001194 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;  
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000240 	.word	0x20000240

080011ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_Delay+0x40>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000008 	.word	0x20000008

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4907      	ldr	r1, [pc, #28]	; (800128c <__NVIC_EnableIRQ+0x38>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff8e 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff29 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff3e 	bl	8001238 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff8e 	bl	80012e4 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5d 	bl	8001290 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff31 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa2 	bl	800134c <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001424:	2b02      	cmp	r3, #2
 8001426:	d005      	beq.n	8001434 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2204      	movs	r2, #4
 800142c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e027      	b.n	8001484 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 020e 	bic.w	r2, r2, #14
 8001442:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145c:	2101      	movs	r1, #1
 800145e:	fa01 f202 	lsl.w	r2, r1, r2
 8001462:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4798      	blx	r3
    } 
  }
  return status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149e:	e160      	b.n	8001762 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	2101      	movs	r1, #1
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	4013      	ands	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8152 	beq.w	800175c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x38>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	6939      	ldr	r1, [r7, #16]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d00b      	beq.n	8001564 <HAL_GPIO_Init+0xd4>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d007      	beq.n	8001564 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001558:	2b11      	cmp	r3, #17
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b12      	cmp	r3, #18
 8001562:	d130      	bne.n	80015c6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159a:	2201      	movs	r2, #1
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f003 0201 	and.w	r2, r3, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80ac 	beq.w	800175c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001604:	4b5e      	ldr	r3, [pc, #376]	; (8001780 <HAL_GPIO_Init+0x2f0>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a5d      	ldr	r2, [pc, #372]	; (8001780 <HAL_GPIO_Init+0x2f0>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b5b      	ldr	r3, [pc, #364]	; (8001780 <HAL_GPIO_Init+0x2f0>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800161c:	4a59      	ldr	r2, [pc, #356]	; (8001784 <HAL_GPIO_Init+0x2f4>)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001646:	d025      	beq.n	8001694 <HAL_GPIO_Init+0x204>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4f      	ldr	r2, [pc, #316]	; (8001788 <HAL_GPIO_Init+0x2f8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d01f      	beq.n	8001690 <HAL_GPIO_Init+0x200>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a4e      	ldr	r2, [pc, #312]	; (800178c <HAL_GPIO_Init+0x2fc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d019      	beq.n	800168c <HAL_GPIO_Init+0x1fc>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a4d      	ldr	r2, [pc, #308]	; (8001790 <HAL_GPIO_Init+0x300>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d013      	beq.n	8001688 <HAL_GPIO_Init+0x1f8>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a4c      	ldr	r2, [pc, #304]	; (8001794 <HAL_GPIO_Init+0x304>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d00d      	beq.n	8001684 <HAL_GPIO_Init+0x1f4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a4b      	ldr	r2, [pc, #300]	; (8001798 <HAL_GPIO_Init+0x308>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d007      	beq.n	8001680 <HAL_GPIO_Init+0x1f0>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a4a      	ldr	r2, [pc, #296]	; (800179c <HAL_GPIO_Init+0x30c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d101      	bne.n	800167c <HAL_GPIO_Init+0x1ec>
 8001678:	2306      	movs	r3, #6
 800167a:	e00c      	b.n	8001696 <HAL_GPIO_Init+0x206>
 800167c:	2307      	movs	r3, #7
 800167e:	e00a      	b.n	8001696 <HAL_GPIO_Init+0x206>
 8001680:	2305      	movs	r3, #5
 8001682:	e008      	b.n	8001696 <HAL_GPIO_Init+0x206>
 8001684:	2304      	movs	r3, #4
 8001686:	e006      	b.n	8001696 <HAL_GPIO_Init+0x206>
 8001688:	2303      	movs	r3, #3
 800168a:	e004      	b.n	8001696 <HAL_GPIO_Init+0x206>
 800168c:	2302      	movs	r3, #2
 800168e:	e002      	b.n	8001696 <HAL_GPIO_Init+0x206>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_GPIO_Init+0x206>
 8001694:	2300      	movs	r3, #0
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	f002 0203 	and.w	r2, r2, #3
 800169c:	0092      	lsls	r2, r2, #2
 800169e:	4093      	lsls	r3, r2
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016a6:	4937      	ldr	r1, [pc, #220]	; (8001784 <HAL_GPIO_Init+0x2f4>)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b4:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_GPIO_Init+0x310>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016d8:	4a31      	ldr	r2, [pc, #196]	; (80017a0 <HAL_GPIO_Init+0x310>)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016de:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_GPIO_Init+0x310>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001702:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <HAL_GPIO_Init+0x310>)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <HAL_GPIO_Init+0x310>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800172c:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <HAL_GPIO_Init+0x310>)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_GPIO_Init+0x310>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <HAL_GPIO_Init+0x310>)
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	fa22 f303 	lsr.w	r3, r2, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	f47f ae97 	bne.w	80014a0 <HAL_GPIO_Init+0x10>
  }
}
 8001772:	bf00      	nop
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	40010000 	.word	0x40010000
 8001788:	48000400 	.word	0x48000400
 800178c:	48000800 	.word	0x48000800
 8001790:	48000c00 	.word	0x48000c00
 8001794:	48001000 	.word	0x48001000
 8001798:	48001400 	.word	0x48001400
 800179c:	48001800 	.word	0x48001800
 80017a0:	40010400 	.word	0x40010400

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017c0:	e002      	b.n	80017c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695a      	ldr	r2, [r3, #20]
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	041a      	lsls	r2, r3, #16
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	619a      	str	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800180e:	af00      	add	r7, sp, #0
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	f000 bf01 	b.w	8002624 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8160 	beq.w	8001af2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001832:	4bae      	ldr	r3, [pc, #696]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d00c      	beq.n	8001858 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800183e:	4bab      	ldr	r3, [pc, #684]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d159      	bne.n	80018fe <HAL_RCC_OscConfig+0xf6>
 800184a:	4ba8      	ldr	r3, [pc, #672]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001856:	d152      	bne.n	80018fe <HAL_RCC_OscConfig+0xf6>
 8001858:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800185c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800186c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d102      	bne.n	800188a <HAL_RCC_OscConfig+0x82>
 8001884:	4b99      	ldr	r3, [pc, #612]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e015      	b.n	80018b6 <HAL_RCC_OscConfig+0xae>
 800188a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001896:	fa93 f3a3 	rbit	r3, r3
 800189a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800189e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018a6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80018aa:	fa93 f3a3 	rbit	r3, r3
 80018ae:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018b2:	4b8e      	ldr	r3, [pc, #568]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ba:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80018be:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80018c2:	fa92 f2a2 	rbit	r2, r2
 80018c6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80018ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018ce:	fab2 f282 	clz	r2, r2
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	f042 0220 	orr.w	r2, r2, #32
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	f002 021f 	and.w	r2, r2, #31
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f202 	lsl.w	r2, r1, r2
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8102 	beq.w	8001af0 <HAL_RCC_OscConfig+0x2e8>
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 80fc 	bne.w	8001af0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f000 be93 	b.w	8002624 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001908:	d106      	bne.n	8001918 <HAL_RCC_OscConfig+0x110>
 800190a:	4b78      	ldr	r3, [pc, #480]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a77      	ldr	r2, [pc, #476]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e030      	b.n	800197a <HAL_RCC_OscConfig+0x172>
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x134>
 8001922:	4b72      	ldr	r3, [pc, #456]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a71      	ldr	r2, [pc, #452]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6e      	ldr	r2, [pc, #440]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001934:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e01e      	b.n	800197a <HAL_RCC_OscConfig+0x172>
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001946:	d10c      	bne.n	8001962 <HAL_RCC_OscConfig+0x15a>
 8001948:	4b68      	ldr	r3, [pc, #416]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a67      	ldr	r2, [pc, #412]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 800194e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b65      	ldr	r3, [pc, #404]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a64      	ldr	r2, [pc, #400]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 800195a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e00b      	b.n	800197a <HAL_RCC_OscConfig+0x172>
 8001962:	4b62      	ldr	r3, [pc, #392]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a61      	ldr	r2, [pc, #388]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a5e      	ldr	r2, [pc, #376]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001978:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d059      	beq.n	8001a38 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fc06 	bl	8001194 <HAL_GetTick>
 8001988:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198e:	f7ff fc01 	bl	8001194 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d902      	bls.n	80019a4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	f000 be40 	b.w	8002624 <HAL_RCC_OscConfig+0xe1c>
 80019a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80019b0:	fa93 f3a3 	rbit	r3, r3
 80019b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80019b8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d102      	bne.n	80019d6 <HAL_RCC_OscConfig+0x1ce>
 80019d0:	4b46      	ldr	r3, [pc, #280]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	e015      	b.n	8001a02 <HAL_RCC_OscConfig+0x1fa>
 80019d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80019ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80019f2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a06:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001a0a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001a0e:	fa92 f2a2 	rbit	r2, r2
 8001a12:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001a16:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a1a:	fab2 f282 	clz	r2, r2
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	f042 0220 	orr.w	r2, r2, #32
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f002 021f 	and.w	r2, r2, #31
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0ab      	beq.n	800198e <HAL_RCC_OscConfig+0x186>
 8001a36:	e05c      	b.n	8001af2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fbac 	bl	8001194 <HAL_GetTick>
 8001a3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a42:	f7ff fba7 	bl	8001194 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d902      	bls.n	8001a58 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	f000 bde6 	b.w	8002624 <HAL_RCC_OscConfig+0xe1c>
 8001a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a5c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001a6c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d102      	bne.n	8001a8a <HAL_RCC_OscConfig+0x282>
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2ae>
 8001a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001a9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001aa6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_RCC_OscConfig+0x2e4>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aba:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001abe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001ac2:	fa92 f2a2 	rbit	r2, r2
 8001ac6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001aca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ace:	fab2 f282 	clz	r2, r2
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f042 0220 	orr.w	r2, r2, #32
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	f002 021f 	and.w	r2, r2, #31
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ab      	bne.n	8001a42 <HAL_RCC_OscConfig+0x23a>
 8001aea:	e002      	b.n	8001af2 <HAL_RCC_OscConfig+0x2ea>
 8001aec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8170 	beq.w	8001de2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b02:	4bd0      	ldr	r3, [pc, #832]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b0e:	4bcd      	ldr	r3, [pc, #820]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d16d      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3ee>
 8001b1a:	4bca      	ldr	r3, [pc, #808]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b26:	d166      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3ee>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001b3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	095b      	lsrs	r3, r3, #5
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d102      	bne.n	8001b58 <HAL_RCC_OscConfig+0x350>
 8001b52:	4bbc      	ldr	r3, [pc, #752]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	e013      	b.n	8001b80 <HAL_RCC_OscConfig+0x378>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b70:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b7c:	4bb1      	ldr	r3, [pc, #708]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	2202      	movs	r2, #2
 8001b82:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001b86:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001b8a:	fa92 f2a2 	rbit	r2, r2
 8001b8e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001b92:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b96:	fab2 f282 	clz	r2, r2
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	f042 0220 	orr.w	r2, r2, #32
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	f002 021f 	and.w	r2, r2, #31
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x3ba>
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d002      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f000 bd31 	b.w	8002624 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc2:	4ba0      	ldr	r3, [pc, #640]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	21f8      	movs	r1, #248	; 0xf8
 8001bd2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001bda:	fa91 f1a1 	rbit	r1, r1
 8001bde:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001be2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001be6:	fab1 f181 	clz	r1, r1
 8001bea:	b2c9      	uxtb	r1, r1
 8001bec:	408b      	lsls	r3, r1
 8001bee:	4995      	ldr	r1, [pc, #596]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf4:	e0f5      	b.n	8001de2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8085 	beq.w	8001d0c <HAL_RCC_OscConfig+0x504>
 8001c02:	2301      	movs	r3, #1
 8001c04:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001c14:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fab1 	bl	8001194 <HAL_GetTick>
 8001c32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff faac 	bl	8001194 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d902      	bls.n	8001c4e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	f000 bceb 	b.w	8002624 <HAL_RCC_OscConfig+0xe1c>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001c60:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_OscConfig+0x476>
 8001c78:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	e013      	b.n	8001ca6 <HAL_RCC_OscConfig+0x49e>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c90:	2302      	movs	r3, #2
 8001c92:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c96:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ca2:	4b68      	ldr	r3, [pc, #416]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001cac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001cb0:	fa92 f2a2 	rbit	r2, r2
 8001cb4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001cb8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001cbc:	fab2 f282 	clz	r2, r2
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f042 0220 	orr.w	r2, r2, #32
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	f002 021f 	and.w	r2, r2, #31
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0af      	beq.n	8001c38 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b5a      	ldr	r3, [pc, #360]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	21f8      	movs	r1, #248	; 0xf8
 8001ce8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001cf0:	fa91 f1a1 	rbit	r1, r1
 8001cf4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001cf8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001cfc:	fab1 f181 	clz	r1, r1
 8001d00:	b2c9      	uxtb	r1, r1
 8001d02:	408b      	lsls	r3, r1
 8001d04:	494f      	ldr	r1, [pc, #316]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]
 8001d0a:	e06a      	b.n	8001de2 <HAL_RCC_OscConfig+0x5da>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001d1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	461a      	mov	r2, r3
 8001d34:	2300      	movs	r3, #0
 8001d36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fa2c 	bl	8001194 <HAL_GetTick>
 8001d3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d42:	f7ff fa27 	bl	8001194 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d902      	bls.n	8001d58 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	f000 bc66 	b.w	8002624 <HAL_RCC_OscConfig+0xe1c>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001d6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_OscConfig+0x580>
 8001d82:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	e013      	b.n	8001db0 <HAL_RCC_OscConfig+0x5a8>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001da0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_RCC_OscConfig+0x63c>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2202      	movs	r2, #2
 8001db2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001db6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001dba:	fa92 f2a2 	rbit	r2, r2
 8001dbe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001dc2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001dc6:	fab2 f282 	clz	r2, r2
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f042 0220 	orr.w	r2, r2, #32
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	f002 021f 	and.w	r2, r2, #31
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1af      	bne.n	8001d42 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80da 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d069      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x6c8>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001e0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_OscConfig+0x640>)
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	461a      	mov	r2, r3
 8001e22:	2301      	movs	r3, #1
 8001e24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7ff f9b5 	bl	8001194 <HAL_GetTick>
 8001e2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	e00d      	b.n	8001e4c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff f9b0 	bl	8001194 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d905      	bls.n	8001e4c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e3ef      	b.n	8002624 <HAL_RCC_OscConfig+0xe1c>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	10908120 	.word	0x10908120
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e56:	fa93 f2a3 	rbit	r2, r3
 8001e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e64:	2202      	movs	r2, #2
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fa93 f2a3 	rbit	r2, r3
 8001e8a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e8e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e90:	4ba4      	ldr	r3, [pc, #656]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8001e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e94:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e98:	2102      	movs	r1, #2
 8001e9a:	6019      	str	r1, [r3, #0]
 8001e9c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	fa93 f1a3 	rbit	r1, r3
 8001ea6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001eaa:	6019      	str	r1, [r3, #0]
  return result;
 8001eac:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0b0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x628>
 8001ece:	e06a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x79e>
 8001ed0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ee6:	601a      	str	r2, [r3, #0]
  return result;
 8001ee8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001eec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b8c      	ldr	r3, [pc, #560]	; (8002128 <HAL_RCC_OscConfig+0x920>)
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	461a      	mov	r2, r3
 8001efe:	2300      	movs	r3, #0
 8001f00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7ff f947 	bl	8001194 <HAL_GetTick>
 8001f06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0a:	e009      	b.n	8001f20 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0c:	f7ff f942 	bl	8001194 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e381      	b.n	8002624 <HAL_RCC_OscConfig+0xe1c>
 8001f20:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f24:	2202      	movs	r2, #2
 8001f26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	fa93 f2a3 	rbit	r2, r3
 8001f32:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f54:	2202      	movs	r2, #2
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	fa93 f2a3 	rbit	r2, r3
 8001f62:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f68:	4b6e      	ldr	r3, [pc, #440]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8001f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f70:	2102      	movs	r1, #2
 8001f72:	6019      	str	r1, [r3, #0]
 8001f74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	fa93 f1a3 	rbit	r1, r3
 8001f7e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f82:	6019      	str	r1, [r3, #0]
  return result;
 8001f84:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1b2      	bne.n	8001f0c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8157 	beq.w	8002264 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fbc:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d112      	bne.n	8001fee <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc8:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	4a55      	ldr	r2, [pc, #340]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8001fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	61d3      	str	r3, [r2, #28]
 8001fd4:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b4f      	ldr	r3, [pc, #316]	; (800212c <HAL_RCC_OscConfig+0x924>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d11a      	bne.n	8002030 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffa:	4b4c      	ldr	r3, [pc, #304]	; (800212c <HAL_RCC_OscConfig+0x924>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a4b      	ldr	r2, [pc, #300]	; (800212c <HAL_RCC_OscConfig+0x924>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002006:	f7ff f8c5 	bl	8001194 <HAL_GetTick>
 800200a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200e:	e009      	b.n	8002024 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002010:	f7ff f8c0 	bl	8001194 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	; 0x64
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e2ff      	b.n	8002624 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCC_OscConfig+0x924>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ef      	beq.n	8002010 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d106      	bne.n	8002048 <HAL_RCC_OscConfig+0x840>
 800203a:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a39      	ldr	r2, [pc, #228]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	e02f      	b.n	80020a8 <HAL_RCC_OscConfig+0x8a0>
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x864>
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4a33      	ldr	r2, [pc, #204]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6213      	str	r3, [r2, #32]
 800205e:	4b31      	ldr	r3, [pc, #196]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4a30      	ldr	r2, [pc, #192]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	6213      	str	r3, [r2, #32]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0x8a0>
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x888>
 8002076:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6213      	str	r3, [r2, #32]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0x8a0>
 8002090:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a23      	ldr	r2, [pc, #140]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a20      	ldr	r2, [pc, #128]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d06a      	beq.n	8002188 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7ff f86f 	bl	8001194 <HAL_GetTick>
 80020b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ba:	e00b      	b.n	80020d4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020bc:	f7ff f86a 	bl	8001194 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e2a7      	b.n	8002624 <HAL_RCC_OscConfig+0xe1c>
 80020d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020d8:	2202      	movs	r2, #2
 80020da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	fa93 f2a3 	rbit	r2, r3
 80020e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020f0:	2202      	movs	r2, #2
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	fa93 f2a3 	rbit	r2, r3
 80020fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002102:	601a      	str	r2, [r3, #0]
  return result;
 8002104:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002108:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d108      	bne.n	8002130 <HAL_RCC_OscConfig+0x928>
 800211e:	4b01      	ldr	r3, [pc, #4]	; (8002124 <HAL_RCC_OscConfig+0x91c>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	e013      	b.n	800214c <HAL_RCC_OscConfig+0x944>
 8002124:	40021000 	.word	0x40021000
 8002128:	10908120 	.word	0x10908120
 800212c:	40007000 	.word	0x40007000
 8002130:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002134:	2202      	movs	r2, #2
 8002136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	fa93 f2a3 	rbit	r2, r3
 8002142:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	4bc0      	ldr	r3, [pc, #768]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002150:	2102      	movs	r1, #2
 8002152:	6011      	str	r1, [r2, #0]
 8002154:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	fa92 f1a2 	rbit	r1, r2
 800215e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002162:	6011      	str	r1, [r2, #0]
  return result;
 8002164:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	fab2 f282 	clz	r2, r2
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	f002 021f 	and.w	r2, r2, #31
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d09a      	beq.n	80020bc <HAL_RCC_OscConfig+0x8b4>
 8002186:	e063      	b.n	8002250 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7ff f804 	bl	8001194 <HAL_GetTick>
 800218c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	e00b      	b.n	80021aa <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe ffff 	bl	8001194 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e23c      	b.n	8002624 <HAL_RCC_OscConfig+0xe1c>
 80021aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021ae:	2202      	movs	r2, #2
 80021b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	fa93 f2a3 	rbit	r2, r3
 80021bc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021c6:	2202      	movs	r2, #2
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	fa93 f2a3 	rbit	r2, r3
 80021d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021d8:	601a      	str	r2, [r3, #0]
  return result;
 80021da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f043 0302 	orr.w	r3, r3, #2
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d102      	bne.n	80021fa <HAL_RCC_OscConfig+0x9f2>
 80021f4:	4b95      	ldr	r3, [pc, #596]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	e00d      	b.n	8002216 <HAL_RCC_OscConfig+0xa0e>
 80021fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021fe:	2202      	movs	r2, #2
 8002200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	4b8e      	ldr	r3, [pc, #568]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800221a:	2102      	movs	r1, #2
 800221c:	6011      	str	r1, [r2, #0]
 800221e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	fa92 f1a2 	rbit	r1, r2
 8002228:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800222c:	6011      	str	r1, [r2, #0]
  return result;
 800222e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	fab2 f282 	clz	r2, r2
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	f002 021f 	and.w	r2, r2, #31
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f202 	lsl.w	r2, r1, r2
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1a0      	bne.n	8002192 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002250:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002258:	4b7c      	ldr	r3, [pc, #496]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	4a7b      	ldr	r2, [pc, #492]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 800225e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002262:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 81d9 	beq.w	8002622 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002270:	4b76      	ldr	r3, [pc, #472]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	f000 81a6 	beq.w	80025ca <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b02      	cmp	r3, #2
 8002286:	f040 811e 	bne.w	80024c6 <HAL_RCC_OscConfig+0xcbe>
 800228a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800228e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fa93 f2a3 	rbit	r2, r3
 800229e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022a2:	601a      	str	r2, [r3, #0]
  return result;
 80022a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	461a      	mov	r2, r3
 80022bc:	2300      	movs	r3, #0
 80022be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe ff68 	bl	8001194 <HAL_GetTick>
 80022c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c8:	e009      	b.n	80022de <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fe ff63 	bl	8001194 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1a2      	b.n	8002624 <HAL_RCC_OscConfig+0xe1c>
 80022de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	fa93 f2a3 	rbit	r2, r3
 80022f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022f6:	601a      	str	r2, [r3, #0]
  return result;
 80022f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b01      	cmp	r3, #1
 8002310:	d102      	bne.n	8002318 <HAL_RCC_OscConfig+0xb10>
 8002312:	4b4e      	ldr	r3, [pc, #312]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	e01b      	b.n	8002350 <HAL_RCC_OscConfig+0xb48>
 8002318:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800231c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	fa93 f2a3 	rbit	r2, r3
 800232c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	fa93 f2a3 	rbit	r2, r3
 8002346:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	4b3f      	ldr	r3, [pc, #252]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002354:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002358:	6011      	str	r1, [r2, #0]
 800235a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	fa92 f1a2 	rbit	r1, r2
 8002364:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002368:	6011      	str	r1, [r2, #0]
  return result;
 800236a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	fab2 f282 	clz	r2, r2
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	f042 0220 	orr.w	r2, r2, #32
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	f002 021f 	and.w	r2, r2, #31
 8002380:	2101      	movs	r1, #1
 8002382:	fa01 f202 	lsl.w	r2, r1, r2
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d19e      	bne.n	80022ca <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238c:	4b2f      	ldr	r3, [pc, #188]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	f023 020f 	bic.w	r2, r3, #15
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	492c      	ldr	r1, [pc, #176]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 800239c:	4313      	orrs	r3, r2
 800239e:	62cb      	str	r3, [r1, #44]	; 0x2c
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6a19      	ldr	r1, [r3, #32]
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	4925      	ldr	r1, [pc, #148]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
 80023bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023d4:	601a      	str	r2, [r3, #0]
  return result;
 80023d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023da:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	461a      	mov	r2, r3
 80023ee:	2301      	movs	r3, #1
 80023f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe fecf 	bl	8001194 <HAL_GetTick>
 80023f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023fa:	e009      	b.n	8002410 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe feca 	bl	8001194 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e109      	b.n	8002624 <HAL_RCC_OscConfig+0xe1c>
 8002410:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002428:	601a      	str	r2, [r3, #0]
  return result;
 800242a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800242e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <HAL_RCC_OscConfig+0xc48>
 8002444:	4b01      	ldr	r3, [pc, #4]	; (800244c <HAL_RCC_OscConfig+0xc44>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	e01e      	b.n	8002488 <HAL_RCC_OscConfig+0xc80>
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800246e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	fa93 f2a3 	rbit	r2, r3
 800247e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <HAL_RCC_OscConfig+0xe28>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800248c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002490:	6011      	str	r1, [r2, #0]
 8002492:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	fa92 f1a2 	rbit	r1, r2
 800249c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024a0:	6011      	str	r1, [r2, #0]
  return result;
 80024a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	fab2 f282 	clz	r2, r2
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f042 0220 	orr.w	r2, r2, #32
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f002 021f 	and.w	r2, r2, #31
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d09b      	beq.n	80023fc <HAL_RCC_OscConfig+0xbf4>
 80024c4:	e0ad      	b.n	8002622 <HAL_RCC_OscConfig+0xe1a>
 80024c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	fa93 f2a3 	rbit	r2, r3
 80024da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024de:	601a      	str	r2, [r3, #0]
  return result;
 80024e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	461a      	mov	r2, r3
 80024f8:	2300      	movs	r3, #0
 80024fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe fe4a 	bl	8001194 <HAL_GetTick>
 8002500:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002504:	e009      	b.n	800251a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002506:	f7fe fe45 	bl	8001194 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e084      	b.n	8002624 <HAL_RCC_OscConfig+0xe1c>
 800251a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002532:	601a      	str	r2, [r3, #0]
  return result;
 8002534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002538:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d102      	bne.n	8002554 <HAL_RCC_OscConfig+0xd4c>
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <HAL_RCC_OscConfig+0xe28>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	e01b      	b.n	800258c <HAL_RCC_OscConfig+0xd84>
 8002554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002558:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800255c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fa93 f2a3 	rbit	r2, r3
 8002568:	f107 0320 	add.w	r3, r7, #32
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	fa93 f2a3 	rbit	r2, r3
 8002582:	f107 0318 	add.w	r3, r7, #24
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	4b29      	ldr	r3, [pc, #164]	; (8002630 <HAL_RCC_OscConfig+0xe28>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f107 0214 	add.w	r2, r7, #20
 8002590:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002594:	6011      	str	r1, [r2, #0]
 8002596:	f107 0214 	add.w	r2, r7, #20
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	fa92 f1a2 	rbit	r1, r2
 80025a0:	f107 0210 	add.w	r2, r7, #16
 80025a4:	6011      	str	r1, [r2, #0]
  return result;
 80025a6:	f107 0210 	add.w	r2, r7, #16
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	fab2 f282 	clz	r2, r2
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	f042 0220 	orr.w	r2, r2, #32
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f002 021f 	and.w	r2, r2, #31
 80025bc:	2101      	movs	r1, #1
 80025be:	fa01 f202 	lsl.w	r2, r1, r2
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d19e      	bne.n	8002506 <HAL_RCC_OscConfig+0xcfe>
 80025c8:	e02b      	b.n	8002622 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e025      	b.n	8002624 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_RCC_OscConfig+0xe28>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <HAL_RCC_OscConfig+0xe28>)
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025ec:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d111      	bne.n	800261e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002608:	429a      	cmp	r2, r3
 800260a:	d108      	bne.n	800261e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800260c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002610:	f003 020f 	and.w	r2, r3, #15
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b09e      	sub	sp, #120	; 0x78
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e162      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800264c:	4b90      	ldr	r3, [pc, #576]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d910      	bls.n	800267c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b8d      	ldr	r3, [pc, #564]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	498b      	ldr	r1, [pc, #556]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b89      	ldr	r3, [pc, #548]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e14a      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b82      	ldr	r3, [pc, #520]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	497f      	ldr	r1, [pc, #508]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80dc 	beq.w	8002860 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d13c      	bne.n	800272a <HAL_RCC_ClockConfig+0xf6>
 80026b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d102      	bne.n	80026da <HAL_RCC_ClockConfig+0xa6>
 80026d4:	4b6f      	ldr	r3, [pc, #444]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	e00f      	b.n	80026fa <HAL_RCC_ClockConfig+0xc6>
 80026da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	667b      	str	r3, [r7, #100]	; 0x64
 80026e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ec:	663b      	str	r3, [r7, #96]	; 0x60
 80026ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026f6:	4b67      	ldr	r3, [pc, #412]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002702:	fa92 f2a2 	rbit	r2, r2
 8002706:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002708:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f042 0220 	orr.w	r2, r2, #32
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d17b      	bne.n	800281e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0f3      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d13c      	bne.n	80027ac <HAL_RCC_ClockConfig+0x178>
 8002732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002736:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d102      	bne.n	800275c <HAL_RCC_ClockConfig+0x128>
 8002756:	4b4f      	ldr	r3, [pc, #316]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	e00f      	b.n	800277c <HAL_RCC_ClockConfig+0x148>
 800275c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002760:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	647b      	str	r3, [r7, #68]	; 0x44
 800276a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276e:	643b      	str	r3, [r7, #64]	; 0x40
 8002770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002778:	4b46      	ldr	r3, [pc, #280]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002780:	63ba      	str	r2, [r7, #56]	; 0x38
 8002782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002784:	fa92 f2a2 	rbit	r2, r2
 8002788:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800278a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800278c:	fab2 f282 	clz	r2, r2
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f042 0220 	orr.w	r2, r2, #32
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f002 021f 	and.w	r2, r2, #31
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f202 	lsl.w	r2, r1, r2
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d13a      	bne.n	800281e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b2      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
 80027ac:	2302      	movs	r3, #2
 80027ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x1a0>
 80027ce:	4b31      	ldr	r3, [pc, #196]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	e00d      	b.n	80027f0 <HAL_RCC_ClockConfig+0x1bc>
 80027d4:	2302      	movs	r3, #2
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
 80027e0:	2302      	movs	r3, #2
 80027e2:	623b      	str	r3, [r7, #32]
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	2202      	movs	r2, #2
 80027f2:	61ba      	str	r2, [r7, #24]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	fa92 f2a2 	rbit	r2, r2
 80027fa:	617a      	str	r2, [r7, #20]
  return result;
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f002 021f 	and.w	r2, r2, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e079      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f023 0203 	bic.w	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	491a      	ldr	r1, [pc, #104]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002830:	f7fe fcb0 	bl	8001194 <HAL_GetTick>
 8002834:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	e00a      	b.n	800284e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002838:	f7fe fcac 	bl	8001194 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e061      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 020c 	and.w	r2, r3, #12
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	429a      	cmp	r2, r3
 800285e:	d1eb      	bne.n	8002838 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d214      	bcs.n	8002898 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 0207 	bic.w	r2, r3, #7
 8002876:	4906      	ldr	r1, [pc, #24]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b04      	ldr	r3, [pc, #16]	; (8002890 <HAL_RCC_ClockConfig+0x25c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e040      	b.n	8002912 <HAL_RCC_ClockConfig+0x2de>
 8002890:	40022000 	.word	0x40022000
 8002894:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a4:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCC_ClockConfig+0x2e8>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	491a      	ldr	r1, [pc, #104]	; (800291c <HAL_RCC_ClockConfig+0x2e8>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_RCC_ClockConfig+0x2e8>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4912      	ldr	r1, [pc, #72]	; (800291c <HAL_RCC_ClockConfig+0x2e8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028d6:	f000 f829 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80028da:	4601      	mov	r1, r0
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_RCC_ClockConfig+0x2e8>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e4:	22f0      	movs	r2, #240	; 0xf0
 80028e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	fa92 f2a2 	rbit	r2, r2
 80028ee:	60fa      	str	r2, [r7, #12]
  return result;
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	fab2 f282 	clz	r2, r2
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	40d3      	lsrs	r3, r2
 80028fa:	4a09      	ldr	r2, [pc, #36]	; (8002920 <HAL_RCC_ClockConfig+0x2ec>)
 80028fc:	5cd3      	ldrb	r3, [r2, r3]
 80028fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002902:	4a08      	ldr	r2, [pc, #32]	; (8002924 <HAL_RCC_ClockConfig+0x2f0>)
 8002904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_RCC_ClockConfig+0x2f4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fbfe 	bl	800110c <HAL_InitTick>
  
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3778      	adds	r7, #120	; 0x78
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	08005558 	.word	0x08005558
 8002924:	20000000 	.word	0x20000000
 8002928:	20000004 	.word	0x20000004

0800292c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800292c:	b480      	push	{r7}
 800292e:	b08b      	sub	sp, #44	; 0x2c
 8002930:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002946:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b04      	cmp	r3, #4
 8002954:	d002      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x30>
 8002956:	2b08      	cmp	r3, #8
 8002958:	d003      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x36>
 800295a:	e03f      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800295e:	623b      	str	r3, [r7, #32]
      break;
 8002960:	e03f      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002968:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800296c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	fa92 f2a2 	rbit	r2, r2
 8002974:	607a      	str	r2, [r7, #4]
  return result;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	fab2 f282 	clz	r2, r2
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	40d3      	lsrs	r3, r2
 8002980:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002982:	5cd3      	ldrb	r3, [r2, r3]
 8002984:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	220f      	movs	r2, #15
 8002990:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	fa92 f2a2 	rbit	r2, r2
 8002998:	60fa      	str	r2, [r7, #12]
  return result;
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	fab2 f282 	clz	r2, r2
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	40d3      	lsrs	r3, r2
 80029a4:	4a15      	ldr	r2, [pc, #84]	; (80029fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029b4:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
 80029c4:	e007      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029c6:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	623b      	str	r3, [r7, #32]
      break;
 80029da:	e002      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029de:	623b      	str	r3, [r7, #32]
      break;
 80029e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e2:	6a3b      	ldr	r3, [r7, #32]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	372c      	adds	r7, #44	; 0x2c
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40021000 	.word	0x40021000
 80029f4:	007a1200 	.word	0x007a1200
 80029f8:	08005570 	.word	0x08005570
 80029fc:	08005580 	.word	0x08005580

08002a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000000 	.word	0x20000000

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a1e:	f7ff ffef 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a22:	4601      	mov	r1, r0
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a2c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	fa92 f2a2 	rbit	r2, r2
 8002a38:	603a      	str	r2, [r7, #0]
  return result;
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	fab2 f282 	clz	r2, r2
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	40d3      	lsrs	r3, r2
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a46:	5cd3      	ldrb	r3, [r2, r3]
 8002a48:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	08005568 	.word	0x08005568

08002a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a62:	f7ff ffcd 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a66:	4601      	mov	r1, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a70:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	fa92 f2a2 	rbit	r2, r2
 8002a7c:	603a      	str	r2, [r7, #0]
  return result;
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	fab2 f282 	clz	r2, r2
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	40d3      	lsrs	r3, r2
 8002a88:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08005568 	.word	0x08005568

08002aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b092      	sub	sp, #72	; 0x48
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80d7 	beq.w	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac4:	4b4e      	ldr	r3, [pc, #312]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10e      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ada:	61d3      	str	r3, [r2, #28]
 8002adc:	4b48      	ldr	r3, [pc, #288]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aee:	4b45      	ldr	r3, [pc, #276]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d118      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afa:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a41      	ldr	r2, [pc, #260]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b06:	f7fe fb45 	bl	8001194 <HAL_GetTick>
 8002b0a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	e008      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0e:	f7fe fb41 	bl	8001194 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b64      	cmp	r3, #100	; 0x64
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e1d6      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b20:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b2c:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b34:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8084 	beq.w	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d07c      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b4c:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	461a      	mov	r2, r3
 8002b76:	2301      	movs	r3, #1
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b9e:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d04b      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe faf1 	bl	8001194 <HAL_GetTick>
 8002bb2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe faed 	bl	8001194 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e180      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd8:	2302      	movs	r3, #2
 8002bda:	623b      	str	r3, [r7, #32]
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	61fb      	str	r3, [r7, #28]
  return result;
 8002be4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d108      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bfa:	4b01      	ldr	r3, [pc, #4]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	e00d      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40007000 	.word	0x40007000
 8002c08:	10908100 	.word	0x10908100
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	4ba0      	ldr	r3, [pc, #640]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	613a      	str	r2, [r7, #16]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	fa92 f2a2 	rbit	r2, r2
 8002c26:	60fa      	str	r2, [r7, #12]
  return result;
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	fab2 f282 	clz	r2, r2
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f002 021f 	and.w	r2, r2, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0b7      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c46:	4b95      	ldr	r3, [pc, #596]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4992      	ldr	r1, [pc, #584]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c60:	4b8e      	ldr	r3, [pc, #568]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4a8d      	ldr	r2, [pc, #564]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c78:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	f023 0203 	bic.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4985      	ldr	r1, [pc, #532]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c96:	4b81      	ldr	r3, [pc, #516]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	497e      	ldr	r1, [pc, #504]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cb4:	4b79      	ldr	r3, [pc, #484]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	4976      	ldr	r1, [pc, #472]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd2:	4b72      	ldr	r3, [pc, #456]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f023 0210 	bic.w	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	496f      	ldr	r1, [pc, #444]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	4967      	ldr	r1, [pc, #412]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d0e:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f023 0220 	bic.w	r2, r3, #32
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4960      	ldr	r1, [pc, #384]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d2c:	4b5b      	ldr	r3, [pc, #364]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	4958      	ldr	r1, [pc, #352]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d4a:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4951      	ldr	r1, [pc, #324]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d68:	4b4c      	ldr	r3, [pc, #304]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	4949      	ldr	r1, [pc, #292]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d86:	4b45      	ldr	r3, [pc, #276]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4942      	ldr	r1, [pc, #264]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002da4:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	493a      	ldr	r1, [pc, #232]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	4933      	ldr	r1, [pc, #204]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002de0:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dec:	492b      	ldr	r1, [pc, #172]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002dfe:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4924      	ldr	r1, [pc, #144]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	491c      	ldr	r1, [pc, #112]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	4915      	ldr	r1, [pc, #84]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	490d      	ldr	r1, [pc, #52]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e82:	4906      	ldr	r1, [pc, #24]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00c      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e94:	4b01      	ldr	r3, [pc, #4]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	e002      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea8:	490b      	ldr	r1, [pc, #44]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec6:	4904      	ldr	r1, [pc, #16]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3748      	adds	r7, #72	; 0x48
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000

08002edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e01d      	b.n	8002f2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fed8 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f000 fa34 	bl	8003388 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <HAL_TIM_Base_Start_IT+0x50>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d00b      	beq.n	8002f76 <HAL_TIM_Base_Start_IT+0x42>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d007      	beq.n	8002f76 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	00010007 	.word	0x00010007

08002f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d122      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0202 	mvn.w	r2, #2
 8002fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f9be 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f9b0 	bl	8003338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f9c1 	bl	8003360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0204 	mvn.w	r2, #4
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2202      	movs	r2, #2
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f994 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f986 	bl	8003338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f997 	bl	8003360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b08      	cmp	r3, #8
 8003044:	d122      	bne.n	800308c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b08      	cmp	r3, #8
 8003052:	d11b      	bne.n	800308c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0208 	mvn.w	r2, #8
 800305c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2204      	movs	r2, #4
 8003062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f96a 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f95c 	bl	8003338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f96d 	bl	8003360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b10      	cmp	r3, #16
 8003098:	d122      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d11b      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0210 	mvn.w	r2, #16
 80030b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2208      	movs	r2, #8
 80030b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f940 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 80030cc:	e005      	b.n	80030da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f932 	bl	8003338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f943 	bl	8003360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d10e      	bne.n	800310c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d107      	bne.n	800310c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0201 	mvn.w	r2, #1
 8003104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fd fe4e 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	2b80      	cmp	r3, #128	; 0x80
 8003118:	d10e      	bne.n	8003138 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b80      	cmp	r3, #128	; 0x80
 8003126:	d107      	bne.n	8003138 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 faf6 	bl	8003724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003146:	d10e      	bne.n	8003166 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d107      	bne.n	8003166 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800315e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fae9 	bl	8003738 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b40      	cmp	r3, #64	; 0x40
 8003172:	d10e      	bne.n	8003192 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b40      	cmp	r3, #64	; 0x40
 8003180:	d107      	bne.n	8003192 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800318a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f8f1 	bl	8003374 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b20      	cmp	r3, #32
 800319e:	d10e      	bne.n	80031be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d107      	bne.n	80031be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f06f 0220 	mvn.w	r2, #32
 80031b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 faa9 	bl	8003710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_TIM_ConfigClockSource+0x18>
 80031da:	2302      	movs	r3, #2
 80031dc:	e0a8      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x16a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003200:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003208:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d067      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x124>
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	d80b      	bhi.n	8003236 <HAL_TIM_ConfigClockSource+0x70>
 800321e:	2b10      	cmp	r3, #16
 8003220:	d073      	beq.n	800330a <HAL_TIM_ConfigClockSource+0x144>
 8003222:	2b10      	cmp	r3, #16
 8003224:	d802      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x66>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d06f      	beq.n	800330a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800322a:	e078      	b.n	800331e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800322c:	2b20      	cmp	r3, #32
 800322e:	d06c      	beq.n	800330a <HAL_TIM_ConfigClockSource+0x144>
 8003230:	2b30      	cmp	r3, #48	; 0x30
 8003232:	d06a      	beq.n	800330a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003234:	e073      	b.n	800331e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003236:	2b70      	cmp	r3, #112	; 0x70
 8003238:	d00d      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0x90>
 800323a:	2b70      	cmp	r3, #112	; 0x70
 800323c:	d804      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x82>
 800323e:	2b50      	cmp	r3, #80	; 0x50
 8003240:	d033      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0xe4>
 8003242:	2b60      	cmp	r3, #96	; 0x60
 8003244:	d041      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003246:	e06a      	b.n	800331e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324c:	d066      	beq.n	800331c <HAL_TIM_ConfigClockSource+0x156>
 800324e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003252:	d017      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003254:	e063      	b.n	800331e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6899      	ldr	r1, [r3, #8]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f000 f9a7 	bl	80035b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003278:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	609a      	str	r2, [r3, #8]
      break;
 8003282:	e04c      	b.n	800331e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	6899      	ldr	r1, [r3, #8]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f000 f990 	bl	80035b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032a6:	609a      	str	r2, [r3, #8]
      break;
 80032a8:	e039      	b.n	800331e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	461a      	mov	r2, r3
 80032b8:	f000 f904 	bl	80034c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2150      	movs	r1, #80	; 0x50
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f95d 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 80032c8:	e029      	b.n	800331e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f000 f923 	bl	8003522 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2160      	movs	r1, #96	; 0x60
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f94d 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 80032e8:	e019      	b.n	800331e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6859      	ldr	r1, [r3, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f000 f8e4 	bl	80034c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2140      	movs	r1, #64	; 0x40
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f93d 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 8003308:	e009      	b.n	800331e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f000 f934 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 800331a:	e000      	b.n	800331e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800331c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a42      	ldr	r2, [pc, #264]	; (80034a4 <TIM_Base_SetConfig+0x11c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a6:	d00f      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a3f      	ldr	r2, [pc, #252]	; (80034a8 <TIM_Base_SetConfig+0x120>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00b      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a3e      	ldr	r2, [pc, #248]	; (80034ac <TIM_Base_SetConfig+0x124>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d007      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3d      	ldr	r2, [pc, #244]	; (80034b0 <TIM_Base_SetConfig+0x128>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d003      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a3c      	ldr	r2, [pc, #240]	; (80034b4 <TIM_Base_SetConfig+0x12c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d108      	bne.n	80033da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a31      	ldr	r2, [pc, #196]	; (80034a4 <TIM_Base_SetConfig+0x11c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01f      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e8:	d01b      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2e      	ldr	r2, [pc, #184]	; (80034a8 <TIM_Base_SetConfig+0x120>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d017      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a2d      	ldr	r2, [pc, #180]	; (80034ac <TIM_Base_SetConfig+0x124>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a2c      	ldr	r2, [pc, #176]	; (80034b0 <TIM_Base_SetConfig+0x128>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00f      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2c      	ldr	r2, [pc, #176]	; (80034b8 <TIM_Base_SetConfig+0x130>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00b      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a2b      	ldr	r2, [pc, #172]	; (80034bc <TIM_Base_SetConfig+0x134>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2a      	ldr	r2, [pc, #168]	; (80034c0 <TIM_Base_SetConfig+0x138>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d003      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a25      	ldr	r2, [pc, #148]	; (80034b4 <TIM_Base_SetConfig+0x12c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d108      	bne.n	8003434 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <TIM_Base_SetConfig+0x11c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <TIM_Base_SetConfig+0x100>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <TIM_Base_SetConfig+0x128>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00f      	beq.n	8003488 <TIM_Base_SetConfig+0x100>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <TIM_Base_SetConfig+0x130>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00b      	beq.n	8003488 <TIM_Base_SetConfig+0x100>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a12      	ldr	r2, [pc, #72]	; (80034bc <TIM_Base_SetConfig+0x134>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d007      	beq.n	8003488 <TIM_Base_SetConfig+0x100>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a11      	ldr	r2, [pc, #68]	; (80034c0 <TIM_Base_SetConfig+0x138>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_Base_SetConfig+0x100>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <TIM_Base_SetConfig+0x12c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d103      	bne.n	8003490 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	615a      	str	r2, [r3, #20]
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40000800 	.word	0x40000800
 80034b0:	40013400 	.word	0x40013400
 80034b4:	40015000 	.word	0x40015000
 80034b8:	40014000 	.word	0x40014000
 80034bc:	40014400 	.word	0x40014400
 80034c0:	40014800 	.word	0x40014800

080034c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f023 0201 	bic.w	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f023 030a 	bic.w	r3, r3, #10
 8003500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	621a      	str	r2, [r3, #32]
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003522:	b480      	push	{r7}
 8003524:	b087      	sub	sp, #28
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f023 0210 	bic.w	r2, r3, #16
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800354c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	031b      	lsls	r3, r3, #12
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800355e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	f043 0307 	orr.w	r3, r3, #7
 80035a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	609a      	str	r2, [r3, #8]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	021a      	lsls	r2, r3, #8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	431a      	orrs	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4313      	orrs	r3, r2
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	609a      	str	r2, [r3, #8]
}
 80035ec:	bf00      	nop
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800360c:	2302      	movs	r3, #2
 800360e:	e06d      	b.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a30      	ldr	r2, [pc, #192]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a2f      	ldr	r2, [pc, #188]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d108      	bne.n	8003660 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003654:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01d      	beq.n	80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368c:	d018      	beq.n	80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a15      	ldr	r2, [pc, #84]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a16      	ldr	r2, [pc, #88]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a11      	ldr	r2, [pc, #68]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d10c      	bne.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40013400 	.word	0x40013400
 8003700:	40015000 	.word	0x40015000
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40014000 	.word	0x40014000

08003710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e040      	b.n	80037e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd fb9e 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2224      	movs	r2, #36	; 0x24
 8003778:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fabc 	bl	8003d08 <UART_SetConfig>
 8003790:	4603      	mov	r3, r0
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e022      	b.n	80037e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fcca 	bl	800413c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fd51 	bl	8004280 <UART_CheckIdleState>
 80037de:	4603      	mov	r3, r0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	f040 8081 	bne.w	8003904 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_UART_Transmit+0x26>
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e079      	b.n	8003906 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_UART_Transmit+0x38>
 800381c:	2302      	movs	r3, #2
 800381e:	e072      	b.n	8003906 <HAL_UART_Transmit+0x11e>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2221      	movs	r2, #33	; 0x21
 8003832:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003834:	f7fd fcae 	bl	8001194 <HAL_GetTick>
 8003838:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	88fa      	ldrh	r2, [r7, #6]
 8003846:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003852:	d108      	bne.n	8003866 <HAL_UART_Transmit+0x7e>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d104      	bne.n	8003866 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800385c:	2300      	movs	r3, #0
 800385e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	61bb      	str	r3, [r7, #24]
 8003864:	e003      	b.n	800386e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800386e:	e02d      	b.n	80038cc <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2200      	movs	r2, #0
 8003878:	2180      	movs	r1, #128	; 0x80
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fd45 	bl	800430a <UART_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e03d      	b.n	8003906 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10b      	bne.n	80038a8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800389c:	b292      	uxth	r2, r2
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	3302      	adds	r3, #2
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	e008      	b.n	80038ba <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	b292      	uxth	r2, r2
 80038b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	3301      	adds	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1cb      	bne.n	8003870 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2200      	movs	r2, #0
 80038e0:	2140      	movs	r1, #64	; 0x40
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fd11 	bl	800430a <UART_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e009      	b.n	8003906 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003922:	2b20      	cmp	r3, #32
 8003924:	f040 808a 	bne.w	8003a3c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_UART_Receive_IT+0x24>
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e082      	b.n	8003a3e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_UART_Receive_IT+0x36>
 8003942:	2302      	movs	r3, #2
 8003944:	e07b      	b.n	8003a3e <HAL_UART_Receive_IT+0x12e>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	88fa      	ldrh	r2, [r7, #6]
 8003958:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003972:	d10e      	bne.n	8003992 <HAL_UART_Receive_IT+0x82>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <HAL_UART_Receive_IT+0x78>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003986:	e02d      	b.n	80039e4 <HAL_UART_Receive_IT+0xd4>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	22ff      	movs	r2, #255	; 0xff
 800398c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003990:	e028      	b.n	80039e4 <HAL_UART_Receive_IT+0xd4>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10d      	bne.n	80039b6 <HAL_UART_Receive_IT+0xa6>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d104      	bne.n	80039ac <HAL_UART_Receive_IT+0x9c>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	22ff      	movs	r2, #255	; 0xff
 80039a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039aa:	e01b      	b.n	80039e4 <HAL_UART_Receive_IT+0xd4>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	227f      	movs	r2, #127	; 0x7f
 80039b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039b4:	e016      	b.n	80039e4 <HAL_UART_Receive_IT+0xd4>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039be:	d10d      	bne.n	80039dc <HAL_UART_Receive_IT+0xcc>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <HAL_UART_Receive_IT+0xc2>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	227f      	movs	r2, #127	; 0x7f
 80039cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039d0:	e008      	b.n	80039e4 <HAL_UART_Receive_IT+0xd4>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	223f      	movs	r2, #63	; 0x3f
 80039d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039da:	e003      	b.n	80039e4 <HAL_UART_Receive_IT+0xd4>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2222      	movs	r2, #34	; 0x22
 80039ee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a08:	d107      	bne.n	8003a1a <HAL_UART_Receive_IT+0x10a>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a0d      	ldr	r2, [pc, #52]	; (8003a4c <HAL_UART_Receive_IT+0x13c>)
 8003a16:	661a      	str	r2, [r3, #96]	; 0x60
 8003a18:	e002      	b.n	8003a20 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a0c      	ldr	r2, [pc, #48]	; (8003a50 <HAL_UART_Receive_IT+0x140>)
 8003a1e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003a36:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	08004545 	.word	0x08004545
 8003a50:	0800449f 	.word	0x0800449f

08003a54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d113      	bne.n	8003aac <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00e      	beq.n	8003aac <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d009      	beq.n	8003aac <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8114 	beq.w	8003cca <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
      }
      return;
 8003aaa:	e10e      	b.n	8003cca <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80d6 	beq.w	8003c60 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d105      	bne.n	8003aca <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80cb 	beq.w	8003c60 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <HAL_UART_IRQHandler+0x9e>
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00e      	beq.n	8003b1a <HAL_UART_IRQHandler+0xc6>
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b12:	f043 0204 	orr.w	r2, r3, #4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00e      	beq.n	8003b42 <HAL_UART_IRQHandler+0xee>
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2204      	movs	r2, #4
 8003b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b3a:	f043 0202 	orr.w	r2, r3, #2
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d013      	beq.n	8003b74 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d009      	beq.n	8003b74 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2208      	movs	r2, #8
 8003b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b6c:	f043 0208 	orr.w	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00f      	beq.n	8003b9e <HAL_UART_IRQHandler+0x14a>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b96:	f043 0220 	orr.w	r2, r3, #32
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8093 	beq.w	8003cce <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00c      	beq.n	8003bcc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d004      	beq.n	8003bea <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d031      	beq.n	8003c4e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fc08 	bl	8004400 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d123      	bne.n	8003c46 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c0c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d013      	beq.n	8003c3e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1a:	4a30      	ldr	r2, [pc, #192]	; (8003cdc <HAL_UART_IRQHandler+0x288>)
 8003c1c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fd fbf5 	bl	8001412 <HAL_DMA_Abort_IT>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	e00e      	b.n	8003c5c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f858 	bl	8003cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	e00a      	b.n	8003c5c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f854 	bl	8003cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	e006      	b.n	8003c5c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f850 	bl	8003cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003c5a:	e038      	b.n	8003cce <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	bf00      	nop
    return;
 8003c5e:	e036      	b.n	8003cce <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <HAL_UART_IRQHandler+0x232>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fcb3 	bl	80045ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c84:	e026      	b.n	8003cd4 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00d      	beq.n	8003cac <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d017      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
    }
    return;
 8003caa:	e012      	b.n	8003cd2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00e      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x280>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d009      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fbd3 	bl	800446c <UART_EndTransmit_IT>
    return;
 8003cc6:	bf00      	nop
 8003cc8:	e004      	b.n	8003cd4 <HAL_UART_IRQHandler+0x280>
      return;
 8003cca:	bf00      	nop
 8003ccc:	e002      	b.n	8003cd4 <HAL_UART_IRQHandler+0x280>
    return;
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <HAL_UART_IRQHandler+0x280>
    return;
 8003cd2:	bf00      	nop
  }

}
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	08004441 	.word	0x08004441

08003ce0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4bac      	ldr	r3, [pc, #688]	; (8003fe8 <UART_SetConfig+0x2e0>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	6939      	ldr	r1, [r7, #16]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a9a      	ldr	r2, [pc, #616]	; (8003fec <UART_SetConfig+0x2e4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d121      	bne.n	8003dcc <UART_SetConfig+0xc4>
 8003d88:	4b99      	ldr	r3, [pc, #612]	; (8003ff0 <UART_SetConfig+0x2e8>)
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d817      	bhi.n	8003dc4 <UART_SetConfig+0xbc>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <UART_SetConfig+0x94>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dad 	.word	0x08003dad
 8003da0:	08003db9 	.word	0x08003db9
 8003da4:	08003dbf 	.word	0x08003dbf
 8003da8:	08003db3 	.word	0x08003db3
 8003dac:	2301      	movs	r3, #1
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e0b2      	b.n	8003f18 <UART_SetConfig+0x210>
 8003db2:	2302      	movs	r3, #2
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e0af      	b.n	8003f18 <UART_SetConfig+0x210>
 8003db8:	2304      	movs	r3, #4
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e0ac      	b.n	8003f18 <UART_SetConfig+0x210>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e0a9      	b.n	8003f18 <UART_SetConfig+0x210>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	bf00      	nop
 8003dca:	e0a5      	b.n	8003f18 <UART_SetConfig+0x210>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a88      	ldr	r2, [pc, #544]	; (8003ff4 <UART_SetConfig+0x2ec>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d123      	bne.n	8003e1e <UART_SetConfig+0x116>
 8003dd6:	4b86      	ldr	r3, [pc, #536]	; (8003ff0 <UART_SetConfig+0x2e8>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de2:	d012      	beq.n	8003e0a <UART_SetConfig+0x102>
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de8:	d802      	bhi.n	8003df0 <UART_SetConfig+0xe8>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d007      	beq.n	8003dfe <UART_SetConfig+0xf6>
 8003dee:	e012      	b.n	8003e16 <UART_SetConfig+0x10e>
 8003df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003df4:	d00c      	beq.n	8003e10 <UART_SetConfig+0x108>
 8003df6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dfa:	d003      	beq.n	8003e04 <UART_SetConfig+0xfc>
 8003dfc:	e00b      	b.n	8003e16 <UART_SetConfig+0x10e>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e089      	b.n	8003f18 <UART_SetConfig+0x210>
 8003e04:	2302      	movs	r3, #2
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e086      	b.n	8003f18 <UART_SetConfig+0x210>
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e083      	b.n	8003f18 <UART_SetConfig+0x210>
 8003e10:	2308      	movs	r3, #8
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e080      	b.n	8003f18 <UART_SetConfig+0x210>
 8003e16:	2310      	movs	r3, #16
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	bf00      	nop
 8003e1c:	e07c      	b.n	8003f18 <UART_SetConfig+0x210>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a75      	ldr	r2, [pc, #468]	; (8003ff8 <UART_SetConfig+0x2f0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d123      	bne.n	8003e70 <UART_SetConfig+0x168>
 8003e28:	4b71      	ldr	r3, [pc, #452]	; (8003ff0 <UART_SetConfig+0x2e8>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003e30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e34:	d012      	beq.n	8003e5c <UART_SetConfig+0x154>
 8003e36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e3a:	d802      	bhi.n	8003e42 <UART_SetConfig+0x13a>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <UART_SetConfig+0x148>
 8003e40:	e012      	b.n	8003e68 <UART_SetConfig+0x160>
 8003e42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e46:	d00c      	beq.n	8003e62 <UART_SetConfig+0x15a>
 8003e48:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e4c:	d003      	beq.n	8003e56 <UART_SetConfig+0x14e>
 8003e4e:	e00b      	b.n	8003e68 <UART_SetConfig+0x160>
 8003e50:	2300      	movs	r3, #0
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e060      	b.n	8003f18 <UART_SetConfig+0x210>
 8003e56:	2302      	movs	r3, #2
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e05d      	b.n	8003f18 <UART_SetConfig+0x210>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e05a      	b.n	8003f18 <UART_SetConfig+0x210>
 8003e62:	2308      	movs	r3, #8
 8003e64:	77fb      	strb	r3, [r7, #31]
 8003e66:	e057      	b.n	8003f18 <UART_SetConfig+0x210>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	bf00      	nop
 8003e6e:	e053      	b.n	8003f18 <UART_SetConfig+0x210>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a61      	ldr	r2, [pc, #388]	; (8003ffc <UART_SetConfig+0x2f4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d123      	bne.n	8003ec2 <UART_SetConfig+0x1ba>
 8003e7a:	4b5d      	ldr	r3, [pc, #372]	; (8003ff0 <UART_SetConfig+0x2e8>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e86:	d012      	beq.n	8003eae <UART_SetConfig+0x1a6>
 8003e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e8c:	d802      	bhi.n	8003e94 <UART_SetConfig+0x18c>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <UART_SetConfig+0x19a>
 8003e92:	e012      	b.n	8003eba <UART_SetConfig+0x1b2>
 8003e94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e98:	d00c      	beq.n	8003eb4 <UART_SetConfig+0x1ac>
 8003e9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e9e:	d003      	beq.n	8003ea8 <UART_SetConfig+0x1a0>
 8003ea0:	e00b      	b.n	8003eba <UART_SetConfig+0x1b2>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e037      	b.n	8003f18 <UART_SetConfig+0x210>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e034      	b.n	8003f18 <UART_SetConfig+0x210>
 8003eae:	2304      	movs	r3, #4
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e031      	b.n	8003f18 <UART_SetConfig+0x210>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e02e      	b.n	8003f18 <UART_SetConfig+0x210>
 8003eba:	2310      	movs	r3, #16
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	bf00      	nop
 8003ec0:	e02a      	b.n	8003f18 <UART_SetConfig+0x210>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a4e      	ldr	r2, [pc, #312]	; (8004000 <UART_SetConfig+0x2f8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d123      	bne.n	8003f14 <UART_SetConfig+0x20c>
 8003ecc:	4b48      	ldr	r3, [pc, #288]	; (8003ff0 <UART_SetConfig+0x2e8>)
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed8:	d012      	beq.n	8003f00 <UART_SetConfig+0x1f8>
 8003eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ede:	d802      	bhi.n	8003ee6 <UART_SetConfig+0x1de>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <UART_SetConfig+0x1ec>
 8003ee4:	e012      	b.n	8003f0c <UART_SetConfig+0x204>
 8003ee6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eea:	d00c      	beq.n	8003f06 <UART_SetConfig+0x1fe>
 8003eec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ef0:	d003      	beq.n	8003efa <UART_SetConfig+0x1f2>
 8003ef2:	e00b      	b.n	8003f0c <UART_SetConfig+0x204>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e00e      	b.n	8003f18 <UART_SetConfig+0x210>
 8003efa:	2302      	movs	r3, #2
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e00b      	b.n	8003f18 <UART_SetConfig+0x210>
 8003f00:	2304      	movs	r3, #4
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e008      	b.n	8003f18 <UART_SetConfig+0x210>
 8003f06:	2308      	movs	r3, #8
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e005      	b.n	8003f18 <UART_SetConfig+0x210>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	bf00      	nop
 8003f12:	e001      	b.n	8003f18 <UART_SetConfig+0x210>
 8003f14:	2310      	movs	r3, #16
 8003f16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f20:	f040 8090 	bne.w	8004044 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003f24:	7ffb      	ldrb	r3, [r7, #31]
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d86c      	bhi.n	8004004 <UART_SetConfig+0x2fc>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <UART_SetConfig+0x228>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f75 	.word	0x08003f75
 8003f38:	08003f95 	.word	0x08003f95
 8003f3c:	08004005 	.word	0x08004005
 8003f40:	08003fb1 	.word	0x08003fb1
 8003f44:	08004005 	.word	0x08004005
 8003f48:	08004005 	.word	0x08004005
 8003f4c:	08004005 	.word	0x08004005
 8003f50:	08003fd1 	.word	0x08003fd1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f54:	f7fe fd60 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8003f58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	005a      	lsls	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	441a      	add	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	61bb      	str	r3, [r7, #24]
        break;
 8003f72:	e04a      	b.n	800400a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f74:	f7fe fd72 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 8003f78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	005a      	lsls	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	441a      	add	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	61bb      	str	r3, [r7, #24]
        break;
 8003f92:	e03a      	b.n	800400a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003f9e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6852      	ldr	r2, [r2, #4]
 8003fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	61bb      	str	r3, [r7, #24]
        break;
 8003fae:	e02c      	b.n	800400a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb0:	f7fe fcbc 	bl	800292c <HAL_RCC_GetSysClockFreq>
 8003fb4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	005a      	lsls	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	441a      	add	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	61bb      	str	r3, [r7, #24]
        break;
 8003fce:	e01c      	b.n	800400a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	61bb      	str	r3, [r7, #24]
        break;
 8003fe6:	e010      	b.n	800400a <UART_SetConfig+0x302>
 8003fe8:	efff69f3 	.word	0xefff69f3
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40004400 	.word	0x40004400
 8003ff8:	40004800 	.word	0x40004800
 8003ffc:	40004c00 	.word	0x40004c00
 8004000:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	75fb      	strb	r3, [r7, #23]
        break;
 8004008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b0f      	cmp	r3, #15
 800400e:	d916      	bls.n	800403e <UART_SetConfig+0x336>
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d212      	bcs.n	800403e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	b29b      	uxth	r3, r3
 800401c:	f023 030f 	bic.w	r3, r3, #15
 8004020:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	b29b      	uxth	r3, r3
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	b29a      	uxth	r2, r3
 800402e:	897b      	ldrh	r3, [r7, #10]
 8004030:	4313      	orrs	r3, r2
 8004032:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	897a      	ldrh	r2, [r7, #10]
 800403a:	60da      	str	r2, [r3, #12]
 800403c:	e072      	b.n	8004124 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
 8004042:	e06f      	b.n	8004124 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004044:	7ffb      	ldrb	r3, [r7, #31]
 8004046:	2b08      	cmp	r3, #8
 8004048:	d85b      	bhi.n	8004102 <UART_SetConfig+0x3fa>
 800404a:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <UART_SetConfig+0x348>)
 800404c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004050:	08004075 	.word	0x08004075
 8004054:	08004093 	.word	0x08004093
 8004058:	080040b1 	.word	0x080040b1
 800405c:	08004103 	.word	0x08004103
 8004060:	080040cd 	.word	0x080040cd
 8004064:	08004103 	.word	0x08004103
 8004068:	08004103 	.word	0x08004103
 800406c:	08004103 	.word	0x08004103
 8004070:	080040eb 	.word	0x080040eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004074:	f7fe fcd0 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8004078:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	085a      	lsrs	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	441a      	add	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	b29b      	uxth	r3, r3
 800408e:	61bb      	str	r3, [r7, #24]
        break;
 8004090:	e03a      	b.n	8004108 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004092:	f7fe fce3 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 8004096:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	085a      	lsrs	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	441a      	add	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	61bb      	str	r3, [r7, #24]
        break;
 80040ae:	e02b      	b.n	8004108 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80040ba:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6852      	ldr	r2, [r2, #4]
 80040c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	61bb      	str	r3, [r7, #24]
        break;
 80040ca:	e01d      	b.n	8004108 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040cc:	f7fe fc2e 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80040d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	085a      	lsrs	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	441a      	add	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	61bb      	str	r3, [r7, #24]
        break;
 80040e8:	e00e      	b.n	8004108 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	085b      	lsrs	r3, r3, #1
 80040f0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	61bb      	str	r3, [r7, #24]
        break;
 8004100:	e002      	b.n	8004108 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	75fb      	strb	r3, [r7, #23]
        break;
 8004106:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b0f      	cmp	r3, #15
 800410c:	d908      	bls.n	8004120 <UART_SetConfig+0x418>
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d204      	bcs.n	8004120 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	e001      	b.n	8004124 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004130:	7dfb      	ldrb	r3, [r7, #23]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3720      	adds	r7, #32
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop

0800413c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01a      	beq.n	8004252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423a:	d10a      	bne.n	8004252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]
  }
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af02      	add	r7, sp, #8
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800428e:	f7fc ff81 	bl	8001194 <HAL_GetTick>
 8004292:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d10e      	bne.n	80042c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f82a 	bl	800430a <UART_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e020      	b.n	8004302 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d10e      	bne.n	80042ec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f814 	bl	800430a <UART_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e00a      	b.n	8004302 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	603b      	str	r3, [r7, #0]
 8004316:	4613      	mov	r3, r2
 8004318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800431a:	e05d      	b.n	80043d8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d059      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004324:	f7fc ff36 	bl	8001194 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	429a      	cmp	r2, r3
 8004332:	d302      	bcc.n	800433a <UART_WaitOnFlagUntilTimeout+0x30>
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d11b      	bne.n	8004372 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004348:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0201 	bic.w	r2, r2, #1
 8004358:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e042      	b.n	80043f8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d02b      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800438a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438e:	d123      	bne.n	80043d8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004398:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0201 	bic.w	r2, r2, #1
 80043b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e00f      	b.n	80043f8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d092      	beq.n	800431c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004416:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7ff fc48 	bl	8003cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004482:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff fc25 	bl	8003ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044ac:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044b2:	2b22      	cmp	r3, #34	; 0x22
 80044b4:	d13a      	bne.n	800452c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044bc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80044be:	89bb      	ldrh	r3, [r7, #12]
 80044c0:	b2d9      	uxtb	r1, r3
 80044c2:	89fb      	ldrh	r3, [r7, #14]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	400a      	ands	r2, r1
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d121      	bne.n	800453c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004506:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fc fd33 	bl	8000f90 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800452a:	e007      	b.n	800453c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0208 	orr.w	r2, r2, #8
 800453a:	619a      	str	r2, [r3, #24]
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004552:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004558:	2b22      	cmp	r3, #34	; 0x22
 800455a:	d13a      	bne.n	80045d2 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004562:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004568:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800456a:	89ba      	ldrh	r2, [r7, #12]
 800456c:	89fb      	ldrh	r3, [r7, #14]
 800456e:	4013      	ands	r3, r2
 8004570:	b29a      	uxth	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	1c9a      	adds	r2, r3, #2
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d121      	bne.n	80045e2 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045ac:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fc fce0 	bl	8000f90 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045d0:	e007      	b.n	80045e2 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0208 	orr.w	r2, r2, #8
 80045e0:	619a      	str	r2, [r3, #24]
}
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <__errno>:
 8004600:	4b01      	ldr	r3, [pc, #4]	; (8004608 <__errno+0x8>)
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	2000000c 	.word	0x2000000c

0800460c <__libc_init_array>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	4e0d      	ldr	r6, [pc, #52]	; (8004644 <__libc_init_array+0x38>)
 8004610:	4c0d      	ldr	r4, [pc, #52]	; (8004648 <__libc_init_array+0x3c>)
 8004612:	1ba4      	subs	r4, r4, r6
 8004614:	10a4      	asrs	r4, r4, #2
 8004616:	2500      	movs	r5, #0
 8004618:	42a5      	cmp	r5, r4
 800461a:	d109      	bne.n	8004630 <__libc_init_array+0x24>
 800461c:	4e0b      	ldr	r6, [pc, #44]	; (800464c <__libc_init_array+0x40>)
 800461e:	4c0c      	ldr	r4, [pc, #48]	; (8004650 <__libc_init_array+0x44>)
 8004620:	f000 ff68 	bl	80054f4 <_init>
 8004624:	1ba4      	subs	r4, r4, r6
 8004626:	10a4      	asrs	r4, r4, #2
 8004628:	2500      	movs	r5, #0
 800462a:	42a5      	cmp	r5, r4
 800462c:	d105      	bne.n	800463a <__libc_init_array+0x2e>
 800462e:	bd70      	pop	{r4, r5, r6, pc}
 8004630:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004634:	4798      	blx	r3
 8004636:	3501      	adds	r5, #1
 8004638:	e7ee      	b.n	8004618 <__libc_init_array+0xc>
 800463a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800463e:	4798      	blx	r3
 8004640:	3501      	adds	r5, #1
 8004642:	e7f2      	b.n	800462a <__libc_init_array+0x1e>
 8004644:	08005628 	.word	0x08005628
 8004648:	08005628 	.word	0x08005628
 800464c:	08005628 	.word	0x08005628
 8004650:	0800562c 	.word	0x0800562c

08004654 <memset>:
 8004654:	4402      	add	r2, r0
 8004656:	4603      	mov	r3, r0
 8004658:	4293      	cmp	r3, r2
 800465a:	d100      	bne.n	800465e <memset+0xa>
 800465c:	4770      	bx	lr
 800465e:	f803 1b01 	strb.w	r1, [r3], #1
 8004662:	e7f9      	b.n	8004658 <memset+0x4>

08004664 <iprintf>:
 8004664:	b40f      	push	{r0, r1, r2, r3}
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <iprintf+0x2c>)
 8004668:	b513      	push	{r0, r1, r4, lr}
 800466a:	681c      	ldr	r4, [r3, #0]
 800466c:	b124      	cbz	r4, 8004678 <iprintf+0x14>
 800466e:	69a3      	ldr	r3, [r4, #24]
 8004670:	b913      	cbnz	r3, 8004678 <iprintf+0x14>
 8004672:	4620      	mov	r0, r4
 8004674:	f000 fa22 	bl	8004abc <__sinit>
 8004678:	ab05      	add	r3, sp, #20
 800467a:	9a04      	ldr	r2, [sp, #16]
 800467c:	68a1      	ldr	r1, [r4, #8]
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	4620      	mov	r0, r4
 8004682:	f000 fbdb 	bl	8004e3c <_vfiprintf_r>
 8004686:	b002      	add	sp, #8
 8004688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800468c:	b004      	add	sp, #16
 800468e:	4770      	bx	lr
 8004690:	2000000c 	.word	0x2000000c

08004694 <_puts_r>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	460e      	mov	r6, r1
 8004698:	4605      	mov	r5, r0
 800469a:	b118      	cbz	r0, 80046a4 <_puts_r+0x10>
 800469c:	6983      	ldr	r3, [r0, #24]
 800469e:	b90b      	cbnz	r3, 80046a4 <_puts_r+0x10>
 80046a0:	f000 fa0c 	bl	8004abc <__sinit>
 80046a4:	69ab      	ldr	r3, [r5, #24]
 80046a6:	68ac      	ldr	r4, [r5, #8]
 80046a8:	b913      	cbnz	r3, 80046b0 <_puts_r+0x1c>
 80046aa:	4628      	mov	r0, r5
 80046ac:	f000 fa06 	bl	8004abc <__sinit>
 80046b0:	4b23      	ldr	r3, [pc, #140]	; (8004740 <_puts_r+0xac>)
 80046b2:	429c      	cmp	r4, r3
 80046b4:	d117      	bne.n	80046e6 <_puts_r+0x52>
 80046b6:	686c      	ldr	r4, [r5, #4]
 80046b8:	89a3      	ldrh	r3, [r4, #12]
 80046ba:	071b      	lsls	r3, r3, #28
 80046bc:	d51d      	bpl.n	80046fa <_puts_r+0x66>
 80046be:	6923      	ldr	r3, [r4, #16]
 80046c0:	b1db      	cbz	r3, 80046fa <_puts_r+0x66>
 80046c2:	3e01      	subs	r6, #1
 80046c4:	68a3      	ldr	r3, [r4, #8]
 80046c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046ca:	3b01      	subs	r3, #1
 80046cc:	60a3      	str	r3, [r4, #8]
 80046ce:	b9e9      	cbnz	r1, 800470c <_puts_r+0x78>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	da2e      	bge.n	8004732 <_puts_r+0x9e>
 80046d4:	4622      	mov	r2, r4
 80046d6:	210a      	movs	r1, #10
 80046d8:	4628      	mov	r0, r5
 80046da:	f000 f83f 	bl	800475c <__swbuf_r>
 80046de:	3001      	adds	r0, #1
 80046e0:	d011      	beq.n	8004706 <_puts_r+0x72>
 80046e2:	200a      	movs	r0, #10
 80046e4:	e011      	b.n	800470a <_puts_r+0x76>
 80046e6:	4b17      	ldr	r3, [pc, #92]	; (8004744 <_puts_r+0xb0>)
 80046e8:	429c      	cmp	r4, r3
 80046ea:	d101      	bne.n	80046f0 <_puts_r+0x5c>
 80046ec:	68ac      	ldr	r4, [r5, #8]
 80046ee:	e7e3      	b.n	80046b8 <_puts_r+0x24>
 80046f0:	4b15      	ldr	r3, [pc, #84]	; (8004748 <_puts_r+0xb4>)
 80046f2:	429c      	cmp	r4, r3
 80046f4:	bf08      	it	eq
 80046f6:	68ec      	ldreq	r4, [r5, #12]
 80046f8:	e7de      	b.n	80046b8 <_puts_r+0x24>
 80046fa:	4621      	mov	r1, r4
 80046fc:	4628      	mov	r0, r5
 80046fe:	f000 f87f 	bl	8004800 <__swsetup_r>
 8004702:	2800      	cmp	r0, #0
 8004704:	d0dd      	beq.n	80046c2 <_puts_r+0x2e>
 8004706:	f04f 30ff 	mov.w	r0, #4294967295
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	2b00      	cmp	r3, #0
 800470e:	da04      	bge.n	800471a <_puts_r+0x86>
 8004710:	69a2      	ldr	r2, [r4, #24]
 8004712:	429a      	cmp	r2, r3
 8004714:	dc06      	bgt.n	8004724 <_puts_r+0x90>
 8004716:	290a      	cmp	r1, #10
 8004718:	d004      	beq.n	8004724 <_puts_r+0x90>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	6022      	str	r2, [r4, #0]
 8004720:	7019      	strb	r1, [r3, #0]
 8004722:	e7cf      	b.n	80046c4 <_puts_r+0x30>
 8004724:	4622      	mov	r2, r4
 8004726:	4628      	mov	r0, r5
 8004728:	f000 f818 	bl	800475c <__swbuf_r>
 800472c:	3001      	adds	r0, #1
 800472e:	d1c9      	bne.n	80046c4 <_puts_r+0x30>
 8004730:	e7e9      	b.n	8004706 <_puts_r+0x72>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	200a      	movs	r0, #10
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	6022      	str	r2, [r4, #0]
 800473a:	7018      	strb	r0, [r3, #0]
 800473c:	e7e5      	b.n	800470a <_puts_r+0x76>
 800473e:	bf00      	nop
 8004740:	080055b4 	.word	0x080055b4
 8004744:	080055d4 	.word	0x080055d4
 8004748:	08005594 	.word	0x08005594

0800474c <puts>:
 800474c:	4b02      	ldr	r3, [pc, #8]	; (8004758 <puts+0xc>)
 800474e:	4601      	mov	r1, r0
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	f7ff bf9f 	b.w	8004694 <_puts_r>
 8004756:	bf00      	nop
 8004758:	2000000c 	.word	0x2000000c

0800475c <__swbuf_r>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	460e      	mov	r6, r1
 8004760:	4614      	mov	r4, r2
 8004762:	4605      	mov	r5, r0
 8004764:	b118      	cbz	r0, 800476e <__swbuf_r+0x12>
 8004766:	6983      	ldr	r3, [r0, #24]
 8004768:	b90b      	cbnz	r3, 800476e <__swbuf_r+0x12>
 800476a:	f000 f9a7 	bl	8004abc <__sinit>
 800476e:	4b21      	ldr	r3, [pc, #132]	; (80047f4 <__swbuf_r+0x98>)
 8004770:	429c      	cmp	r4, r3
 8004772:	d12a      	bne.n	80047ca <__swbuf_r+0x6e>
 8004774:	686c      	ldr	r4, [r5, #4]
 8004776:	69a3      	ldr	r3, [r4, #24]
 8004778:	60a3      	str	r3, [r4, #8]
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	071a      	lsls	r2, r3, #28
 800477e:	d52e      	bpl.n	80047de <__swbuf_r+0x82>
 8004780:	6923      	ldr	r3, [r4, #16]
 8004782:	b363      	cbz	r3, 80047de <__swbuf_r+0x82>
 8004784:	6923      	ldr	r3, [r4, #16]
 8004786:	6820      	ldr	r0, [r4, #0]
 8004788:	1ac0      	subs	r0, r0, r3
 800478a:	6963      	ldr	r3, [r4, #20]
 800478c:	b2f6      	uxtb	r6, r6
 800478e:	4283      	cmp	r3, r0
 8004790:	4637      	mov	r7, r6
 8004792:	dc04      	bgt.n	800479e <__swbuf_r+0x42>
 8004794:	4621      	mov	r1, r4
 8004796:	4628      	mov	r0, r5
 8004798:	f000 f926 	bl	80049e8 <_fflush_r>
 800479c:	bb28      	cbnz	r0, 80047ea <__swbuf_r+0x8e>
 800479e:	68a3      	ldr	r3, [r4, #8]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	60a3      	str	r3, [r4, #8]
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	6022      	str	r2, [r4, #0]
 80047aa:	701e      	strb	r6, [r3, #0]
 80047ac:	6963      	ldr	r3, [r4, #20]
 80047ae:	3001      	adds	r0, #1
 80047b0:	4283      	cmp	r3, r0
 80047b2:	d004      	beq.n	80047be <__swbuf_r+0x62>
 80047b4:	89a3      	ldrh	r3, [r4, #12]
 80047b6:	07db      	lsls	r3, r3, #31
 80047b8:	d519      	bpl.n	80047ee <__swbuf_r+0x92>
 80047ba:	2e0a      	cmp	r6, #10
 80047bc:	d117      	bne.n	80047ee <__swbuf_r+0x92>
 80047be:	4621      	mov	r1, r4
 80047c0:	4628      	mov	r0, r5
 80047c2:	f000 f911 	bl	80049e8 <_fflush_r>
 80047c6:	b190      	cbz	r0, 80047ee <__swbuf_r+0x92>
 80047c8:	e00f      	b.n	80047ea <__swbuf_r+0x8e>
 80047ca:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <__swbuf_r+0x9c>)
 80047cc:	429c      	cmp	r4, r3
 80047ce:	d101      	bne.n	80047d4 <__swbuf_r+0x78>
 80047d0:	68ac      	ldr	r4, [r5, #8]
 80047d2:	e7d0      	b.n	8004776 <__swbuf_r+0x1a>
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <__swbuf_r+0xa0>)
 80047d6:	429c      	cmp	r4, r3
 80047d8:	bf08      	it	eq
 80047da:	68ec      	ldreq	r4, [r5, #12]
 80047dc:	e7cb      	b.n	8004776 <__swbuf_r+0x1a>
 80047de:	4621      	mov	r1, r4
 80047e0:	4628      	mov	r0, r5
 80047e2:	f000 f80d 	bl	8004800 <__swsetup_r>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d0cc      	beq.n	8004784 <__swbuf_r+0x28>
 80047ea:	f04f 37ff 	mov.w	r7, #4294967295
 80047ee:	4638      	mov	r0, r7
 80047f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f2:	bf00      	nop
 80047f4:	080055b4 	.word	0x080055b4
 80047f8:	080055d4 	.word	0x080055d4
 80047fc:	08005594 	.word	0x08005594

08004800 <__swsetup_r>:
 8004800:	4b32      	ldr	r3, [pc, #200]	; (80048cc <__swsetup_r+0xcc>)
 8004802:	b570      	push	{r4, r5, r6, lr}
 8004804:	681d      	ldr	r5, [r3, #0]
 8004806:	4606      	mov	r6, r0
 8004808:	460c      	mov	r4, r1
 800480a:	b125      	cbz	r5, 8004816 <__swsetup_r+0x16>
 800480c:	69ab      	ldr	r3, [r5, #24]
 800480e:	b913      	cbnz	r3, 8004816 <__swsetup_r+0x16>
 8004810:	4628      	mov	r0, r5
 8004812:	f000 f953 	bl	8004abc <__sinit>
 8004816:	4b2e      	ldr	r3, [pc, #184]	; (80048d0 <__swsetup_r+0xd0>)
 8004818:	429c      	cmp	r4, r3
 800481a:	d10f      	bne.n	800483c <__swsetup_r+0x3c>
 800481c:	686c      	ldr	r4, [r5, #4]
 800481e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004822:	b29a      	uxth	r2, r3
 8004824:	0715      	lsls	r5, r2, #28
 8004826:	d42c      	bmi.n	8004882 <__swsetup_r+0x82>
 8004828:	06d0      	lsls	r0, r2, #27
 800482a:	d411      	bmi.n	8004850 <__swsetup_r+0x50>
 800482c:	2209      	movs	r2, #9
 800482e:	6032      	str	r2, [r6, #0]
 8004830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004834:	81a3      	strh	r3, [r4, #12]
 8004836:	f04f 30ff 	mov.w	r0, #4294967295
 800483a:	e03e      	b.n	80048ba <__swsetup_r+0xba>
 800483c:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <__swsetup_r+0xd4>)
 800483e:	429c      	cmp	r4, r3
 8004840:	d101      	bne.n	8004846 <__swsetup_r+0x46>
 8004842:	68ac      	ldr	r4, [r5, #8]
 8004844:	e7eb      	b.n	800481e <__swsetup_r+0x1e>
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <__swsetup_r+0xd8>)
 8004848:	429c      	cmp	r4, r3
 800484a:	bf08      	it	eq
 800484c:	68ec      	ldreq	r4, [r5, #12]
 800484e:	e7e6      	b.n	800481e <__swsetup_r+0x1e>
 8004850:	0751      	lsls	r1, r2, #29
 8004852:	d512      	bpl.n	800487a <__swsetup_r+0x7a>
 8004854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004856:	b141      	cbz	r1, 800486a <__swsetup_r+0x6a>
 8004858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800485c:	4299      	cmp	r1, r3
 800485e:	d002      	beq.n	8004866 <__swsetup_r+0x66>
 8004860:	4630      	mov	r0, r6
 8004862:	f000 fa19 	bl	8004c98 <_free_r>
 8004866:	2300      	movs	r3, #0
 8004868:	6363      	str	r3, [r4, #52]	; 0x34
 800486a:	89a3      	ldrh	r3, [r4, #12]
 800486c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004870:	81a3      	strh	r3, [r4, #12]
 8004872:	2300      	movs	r3, #0
 8004874:	6063      	str	r3, [r4, #4]
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f043 0308 	orr.w	r3, r3, #8
 8004880:	81a3      	strh	r3, [r4, #12]
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	b94b      	cbnz	r3, 800489a <__swsetup_r+0x9a>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800488c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004890:	d003      	beq.n	800489a <__swsetup_r+0x9a>
 8004892:	4621      	mov	r1, r4
 8004894:	4630      	mov	r0, r6
 8004896:	f000 f9bf 	bl	8004c18 <__smakebuf_r>
 800489a:	89a2      	ldrh	r2, [r4, #12]
 800489c:	f012 0301 	ands.w	r3, r2, #1
 80048a0:	d00c      	beq.n	80048bc <__swsetup_r+0xbc>
 80048a2:	2300      	movs	r3, #0
 80048a4:	60a3      	str	r3, [r4, #8]
 80048a6:	6963      	ldr	r3, [r4, #20]
 80048a8:	425b      	negs	r3, r3
 80048aa:	61a3      	str	r3, [r4, #24]
 80048ac:	6923      	ldr	r3, [r4, #16]
 80048ae:	b953      	cbnz	r3, 80048c6 <__swsetup_r+0xc6>
 80048b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80048b8:	d1ba      	bne.n	8004830 <__swsetup_r+0x30>
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	0792      	lsls	r2, r2, #30
 80048be:	bf58      	it	pl
 80048c0:	6963      	ldrpl	r3, [r4, #20]
 80048c2:	60a3      	str	r3, [r4, #8]
 80048c4:	e7f2      	b.n	80048ac <__swsetup_r+0xac>
 80048c6:	2000      	movs	r0, #0
 80048c8:	e7f7      	b.n	80048ba <__swsetup_r+0xba>
 80048ca:	bf00      	nop
 80048cc:	2000000c 	.word	0x2000000c
 80048d0:	080055b4 	.word	0x080055b4
 80048d4:	080055d4 	.word	0x080055d4
 80048d8:	08005594 	.word	0x08005594

080048dc <__sflush_r>:
 80048dc:	898a      	ldrh	r2, [r1, #12]
 80048de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e2:	4605      	mov	r5, r0
 80048e4:	0710      	lsls	r0, r2, #28
 80048e6:	460c      	mov	r4, r1
 80048e8:	d458      	bmi.n	800499c <__sflush_r+0xc0>
 80048ea:	684b      	ldr	r3, [r1, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	dc05      	bgt.n	80048fc <__sflush_r+0x20>
 80048f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	dc02      	bgt.n	80048fc <__sflush_r+0x20>
 80048f6:	2000      	movs	r0, #0
 80048f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048fe:	2e00      	cmp	r6, #0
 8004900:	d0f9      	beq.n	80048f6 <__sflush_r+0x1a>
 8004902:	2300      	movs	r3, #0
 8004904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004908:	682f      	ldr	r7, [r5, #0]
 800490a:	6a21      	ldr	r1, [r4, #32]
 800490c:	602b      	str	r3, [r5, #0]
 800490e:	d032      	beq.n	8004976 <__sflush_r+0x9a>
 8004910:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	075a      	lsls	r2, r3, #29
 8004916:	d505      	bpl.n	8004924 <__sflush_r+0x48>
 8004918:	6863      	ldr	r3, [r4, #4]
 800491a:	1ac0      	subs	r0, r0, r3
 800491c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800491e:	b10b      	cbz	r3, 8004924 <__sflush_r+0x48>
 8004920:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004922:	1ac0      	subs	r0, r0, r3
 8004924:	2300      	movs	r3, #0
 8004926:	4602      	mov	r2, r0
 8004928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800492a:	6a21      	ldr	r1, [r4, #32]
 800492c:	4628      	mov	r0, r5
 800492e:	47b0      	blx	r6
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	d106      	bne.n	8004944 <__sflush_r+0x68>
 8004936:	6829      	ldr	r1, [r5, #0]
 8004938:	291d      	cmp	r1, #29
 800493a:	d848      	bhi.n	80049ce <__sflush_r+0xf2>
 800493c:	4a29      	ldr	r2, [pc, #164]	; (80049e4 <__sflush_r+0x108>)
 800493e:	40ca      	lsrs	r2, r1
 8004940:	07d6      	lsls	r6, r2, #31
 8004942:	d544      	bpl.n	80049ce <__sflush_r+0xf2>
 8004944:	2200      	movs	r2, #0
 8004946:	6062      	str	r2, [r4, #4]
 8004948:	04d9      	lsls	r1, r3, #19
 800494a:	6922      	ldr	r2, [r4, #16]
 800494c:	6022      	str	r2, [r4, #0]
 800494e:	d504      	bpl.n	800495a <__sflush_r+0x7e>
 8004950:	1c42      	adds	r2, r0, #1
 8004952:	d101      	bne.n	8004958 <__sflush_r+0x7c>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	b903      	cbnz	r3, 800495a <__sflush_r+0x7e>
 8004958:	6560      	str	r0, [r4, #84]	; 0x54
 800495a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800495c:	602f      	str	r7, [r5, #0]
 800495e:	2900      	cmp	r1, #0
 8004960:	d0c9      	beq.n	80048f6 <__sflush_r+0x1a>
 8004962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004966:	4299      	cmp	r1, r3
 8004968:	d002      	beq.n	8004970 <__sflush_r+0x94>
 800496a:	4628      	mov	r0, r5
 800496c:	f000 f994 	bl	8004c98 <_free_r>
 8004970:	2000      	movs	r0, #0
 8004972:	6360      	str	r0, [r4, #52]	; 0x34
 8004974:	e7c0      	b.n	80048f8 <__sflush_r+0x1c>
 8004976:	2301      	movs	r3, #1
 8004978:	4628      	mov	r0, r5
 800497a:	47b0      	blx	r6
 800497c:	1c41      	adds	r1, r0, #1
 800497e:	d1c8      	bne.n	8004912 <__sflush_r+0x36>
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0c5      	beq.n	8004912 <__sflush_r+0x36>
 8004986:	2b1d      	cmp	r3, #29
 8004988:	d001      	beq.n	800498e <__sflush_r+0xb2>
 800498a:	2b16      	cmp	r3, #22
 800498c:	d101      	bne.n	8004992 <__sflush_r+0xb6>
 800498e:	602f      	str	r7, [r5, #0]
 8004990:	e7b1      	b.n	80048f6 <__sflush_r+0x1a>
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004998:	81a3      	strh	r3, [r4, #12]
 800499a:	e7ad      	b.n	80048f8 <__sflush_r+0x1c>
 800499c:	690f      	ldr	r7, [r1, #16]
 800499e:	2f00      	cmp	r7, #0
 80049a0:	d0a9      	beq.n	80048f6 <__sflush_r+0x1a>
 80049a2:	0793      	lsls	r3, r2, #30
 80049a4:	680e      	ldr	r6, [r1, #0]
 80049a6:	bf08      	it	eq
 80049a8:	694b      	ldreq	r3, [r1, #20]
 80049aa:	600f      	str	r7, [r1, #0]
 80049ac:	bf18      	it	ne
 80049ae:	2300      	movne	r3, #0
 80049b0:	eba6 0807 	sub.w	r8, r6, r7
 80049b4:	608b      	str	r3, [r1, #8]
 80049b6:	f1b8 0f00 	cmp.w	r8, #0
 80049ba:	dd9c      	ble.n	80048f6 <__sflush_r+0x1a>
 80049bc:	4643      	mov	r3, r8
 80049be:	463a      	mov	r2, r7
 80049c0:	6a21      	ldr	r1, [r4, #32]
 80049c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049c4:	4628      	mov	r0, r5
 80049c6:	47b0      	blx	r6
 80049c8:	2800      	cmp	r0, #0
 80049ca:	dc06      	bgt.n	80049da <__sflush_r+0xfe>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d2:	81a3      	strh	r3, [r4, #12]
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	e78e      	b.n	80048f8 <__sflush_r+0x1c>
 80049da:	4407      	add	r7, r0
 80049dc:	eba8 0800 	sub.w	r8, r8, r0
 80049e0:	e7e9      	b.n	80049b6 <__sflush_r+0xda>
 80049e2:	bf00      	nop
 80049e4:	20400001 	.word	0x20400001

080049e8 <_fflush_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	690b      	ldr	r3, [r1, #16]
 80049ec:	4605      	mov	r5, r0
 80049ee:	460c      	mov	r4, r1
 80049f0:	b1db      	cbz	r3, 8004a2a <_fflush_r+0x42>
 80049f2:	b118      	cbz	r0, 80049fc <_fflush_r+0x14>
 80049f4:	6983      	ldr	r3, [r0, #24]
 80049f6:	b90b      	cbnz	r3, 80049fc <_fflush_r+0x14>
 80049f8:	f000 f860 	bl	8004abc <__sinit>
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <_fflush_r+0x48>)
 80049fe:	429c      	cmp	r4, r3
 8004a00:	d109      	bne.n	8004a16 <_fflush_r+0x2e>
 8004a02:	686c      	ldr	r4, [r5, #4]
 8004a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a08:	b17b      	cbz	r3, 8004a2a <_fflush_r+0x42>
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a12:	f7ff bf63 	b.w	80048dc <__sflush_r>
 8004a16:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <_fflush_r+0x4c>)
 8004a18:	429c      	cmp	r4, r3
 8004a1a:	d101      	bne.n	8004a20 <_fflush_r+0x38>
 8004a1c:	68ac      	ldr	r4, [r5, #8]
 8004a1e:	e7f1      	b.n	8004a04 <_fflush_r+0x1c>
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <_fflush_r+0x50>)
 8004a22:	429c      	cmp	r4, r3
 8004a24:	bf08      	it	eq
 8004a26:	68ec      	ldreq	r4, [r5, #12]
 8004a28:	e7ec      	b.n	8004a04 <_fflush_r+0x1c>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	bd38      	pop	{r3, r4, r5, pc}
 8004a2e:	bf00      	nop
 8004a30:	080055b4 	.word	0x080055b4
 8004a34:	080055d4 	.word	0x080055d4
 8004a38:	08005594 	.word	0x08005594

08004a3c <std>:
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	b510      	push	{r4, lr}
 8004a40:	4604      	mov	r4, r0
 8004a42:	e9c0 3300 	strd	r3, r3, [r0]
 8004a46:	6083      	str	r3, [r0, #8]
 8004a48:	8181      	strh	r1, [r0, #12]
 8004a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8004a4c:	81c2      	strh	r2, [r0, #14]
 8004a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a52:	6183      	str	r3, [r0, #24]
 8004a54:	4619      	mov	r1, r3
 8004a56:	2208      	movs	r2, #8
 8004a58:	305c      	adds	r0, #92	; 0x5c
 8004a5a:	f7ff fdfb 	bl	8004654 <memset>
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <std+0x38>)
 8004a60:	6263      	str	r3, [r4, #36]	; 0x24
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <std+0x3c>)
 8004a64:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <std+0x40>)
 8004a68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <std+0x44>)
 8004a6c:	6224      	str	r4, [r4, #32]
 8004a6e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a70:	bd10      	pop	{r4, pc}
 8004a72:	bf00      	nop
 8004a74:	08005399 	.word	0x08005399
 8004a78:	080053bb 	.word	0x080053bb
 8004a7c:	080053f3 	.word	0x080053f3
 8004a80:	08005417 	.word	0x08005417

08004a84 <_cleanup_r>:
 8004a84:	4901      	ldr	r1, [pc, #4]	; (8004a8c <_cleanup_r+0x8>)
 8004a86:	f000 b885 	b.w	8004b94 <_fwalk_reent>
 8004a8a:	bf00      	nop
 8004a8c:	080049e9 	.word	0x080049e9

08004a90 <__sfmoreglue>:
 8004a90:	b570      	push	{r4, r5, r6, lr}
 8004a92:	1e4a      	subs	r2, r1, #1
 8004a94:	2568      	movs	r5, #104	; 0x68
 8004a96:	4355      	muls	r5, r2
 8004a98:	460e      	mov	r6, r1
 8004a9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a9e:	f000 f949 	bl	8004d34 <_malloc_r>
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	b140      	cbz	r0, 8004ab8 <__sfmoreglue+0x28>
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	e9c0 1600 	strd	r1, r6, [r0]
 8004aac:	300c      	adds	r0, #12
 8004aae:	60a0      	str	r0, [r4, #8]
 8004ab0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ab4:	f7ff fdce 	bl	8004654 <memset>
 8004ab8:	4620      	mov	r0, r4
 8004aba:	bd70      	pop	{r4, r5, r6, pc}

08004abc <__sinit>:
 8004abc:	6983      	ldr	r3, [r0, #24]
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	bb33      	cbnz	r3, 8004b12 <__sinit+0x56>
 8004ac4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ac8:	6503      	str	r3, [r0, #80]	; 0x50
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <__sinit+0x58>)
 8004acc:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <__sinit+0x5c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6282      	str	r2, [r0, #40]	; 0x28
 8004ad2:	4298      	cmp	r0, r3
 8004ad4:	bf04      	itt	eq
 8004ad6:	2301      	moveq	r3, #1
 8004ad8:	6183      	streq	r3, [r0, #24]
 8004ada:	f000 f81f 	bl	8004b1c <__sfp>
 8004ade:	6060      	str	r0, [r4, #4]
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f000 f81b 	bl	8004b1c <__sfp>
 8004ae6:	60a0      	str	r0, [r4, #8]
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f000 f817 	bl	8004b1c <__sfp>
 8004aee:	2200      	movs	r2, #0
 8004af0:	60e0      	str	r0, [r4, #12]
 8004af2:	2104      	movs	r1, #4
 8004af4:	6860      	ldr	r0, [r4, #4]
 8004af6:	f7ff ffa1 	bl	8004a3c <std>
 8004afa:	2201      	movs	r2, #1
 8004afc:	2109      	movs	r1, #9
 8004afe:	68a0      	ldr	r0, [r4, #8]
 8004b00:	f7ff ff9c 	bl	8004a3c <std>
 8004b04:	2202      	movs	r2, #2
 8004b06:	2112      	movs	r1, #18
 8004b08:	68e0      	ldr	r0, [r4, #12]
 8004b0a:	f7ff ff97 	bl	8004a3c <std>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	61a3      	str	r3, [r4, #24]
 8004b12:	bd10      	pop	{r4, pc}
 8004b14:	08005590 	.word	0x08005590
 8004b18:	08004a85 	.word	0x08004a85

08004b1c <__sfp>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <__sfp+0x70>)
 8004b20:	681e      	ldr	r6, [r3, #0]
 8004b22:	69b3      	ldr	r3, [r6, #24]
 8004b24:	4607      	mov	r7, r0
 8004b26:	b913      	cbnz	r3, 8004b2e <__sfp+0x12>
 8004b28:	4630      	mov	r0, r6
 8004b2a:	f7ff ffc7 	bl	8004abc <__sinit>
 8004b2e:	3648      	adds	r6, #72	; 0x48
 8004b30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	d503      	bpl.n	8004b40 <__sfp+0x24>
 8004b38:	6833      	ldr	r3, [r6, #0]
 8004b3a:	b133      	cbz	r3, 8004b4a <__sfp+0x2e>
 8004b3c:	6836      	ldr	r6, [r6, #0]
 8004b3e:	e7f7      	b.n	8004b30 <__sfp+0x14>
 8004b40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b44:	b16d      	cbz	r5, 8004b62 <__sfp+0x46>
 8004b46:	3468      	adds	r4, #104	; 0x68
 8004b48:	e7f4      	b.n	8004b34 <__sfp+0x18>
 8004b4a:	2104      	movs	r1, #4
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	f7ff ff9f 	bl	8004a90 <__sfmoreglue>
 8004b52:	6030      	str	r0, [r6, #0]
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d1f1      	bne.n	8004b3c <__sfp+0x20>
 8004b58:	230c      	movs	r3, #12
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	4620      	mov	r0, r4
 8004b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <__sfp+0x74>)
 8004b64:	6665      	str	r5, [r4, #100]	; 0x64
 8004b66:	e9c4 5500 	strd	r5, r5, [r4]
 8004b6a:	60a5      	str	r5, [r4, #8]
 8004b6c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004b70:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004b74:	2208      	movs	r2, #8
 8004b76:	4629      	mov	r1, r5
 8004b78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b7c:	f7ff fd6a 	bl	8004654 <memset>
 8004b80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b88:	e7e9      	b.n	8004b5e <__sfp+0x42>
 8004b8a:	bf00      	nop
 8004b8c:	08005590 	.word	0x08005590
 8004b90:	ffff0001 	.word	0xffff0001

08004b94 <_fwalk_reent>:
 8004b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b98:	4680      	mov	r8, r0
 8004b9a:	4689      	mov	r9, r1
 8004b9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ba0:	2600      	movs	r6, #0
 8004ba2:	b914      	cbnz	r4, 8004baa <_fwalk_reent+0x16>
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004baa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004bae:	3f01      	subs	r7, #1
 8004bb0:	d501      	bpl.n	8004bb6 <_fwalk_reent+0x22>
 8004bb2:	6824      	ldr	r4, [r4, #0]
 8004bb4:	e7f5      	b.n	8004ba2 <_fwalk_reent+0xe>
 8004bb6:	89ab      	ldrh	r3, [r5, #12]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d907      	bls.n	8004bcc <_fwalk_reent+0x38>
 8004bbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	d003      	beq.n	8004bcc <_fwalk_reent+0x38>
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	4640      	mov	r0, r8
 8004bc8:	47c8      	blx	r9
 8004bca:	4306      	orrs	r6, r0
 8004bcc:	3568      	adds	r5, #104	; 0x68
 8004bce:	e7ee      	b.n	8004bae <_fwalk_reent+0x1a>

08004bd0 <__swhatbuf_r>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	460e      	mov	r6, r1
 8004bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	b096      	sub	sp, #88	; 0x58
 8004bdc:	4614      	mov	r4, r2
 8004bde:	461d      	mov	r5, r3
 8004be0:	da07      	bge.n	8004bf2 <__swhatbuf_r+0x22>
 8004be2:	2300      	movs	r3, #0
 8004be4:	602b      	str	r3, [r5, #0]
 8004be6:	89b3      	ldrh	r3, [r6, #12]
 8004be8:	061a      	lsls	r2, r3, #24
 8004bea:	d410      	bmi.n	8004c0e <__swhatbuf_r+0x3e>
 8004bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bf0:	e00e      	b.n	8004c10 <__swhatbuf_r+0x40>
 8004bf2:	466a      	mov	r2, sp
 8004bf4:	f000 fc36 	bl	8005464 <_fstat_r>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	dbf2      	blt.n	8004be2 <__swhatbuf_r+0x12>
 8004bfc:	9a01      	ldr	r2, [sp, #4]
 8004bfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c06:	425a      	negs	r2, r3
 8004c08:	415a      	adcs	r2, r3
 8004c0a:	602a      	str	r2, [r5, #0]
 8004c0c:	e7ee      	b.n	8004bec <__swhatbuf_r+0x1c>
 8004c0e:	2340      	movs	r3, #64	; 0x40
 8004c10:	2000      	movs	r0, #0
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	b016      	add	sp, #88	; 0x58
 8004c16:	bd70      	pop	{r4, r5, r6, pc}

08004c18 <__smakebuf_r>:
 8004c18:	898b      	ldrh	r3, [r1, #12]
 8004c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c1c:	079d      	lsls	r5, r3, #30
 8004c1e:	4606      	mov	r6, r0
 8004c20:	460c      	mov	r4, r1
 8004c22:	d507      	bpl.n	8004c34 <__smakebuf_r+0x1c>
 8004c24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	6123      	str	r3, [r4, #16]
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	6163      	str	r3, [r4, #20]
 8004c30:	b002      	add	sp, #8
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	ab01      	add	r3, sp, #4
 8004c36:	466a      	mov	r2, sp
 8004c38:	f7ff ffca 	bl	8004bd0 <__swhatbuf_r>
 8004c3c:	9900      	ldr	r1, [sp, #0]
 8004c3e:	4605      	mov	r5, r0
 8004c40:	4630      	mov	r0, r6
 8004c42:	f000 f877 	bl	8004d34 <_malloc_r>
 8004c46:	b948      	cbnz	r0, 8004c5c <__smakebuf_r+0x44>
 8004c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4c:	059a      	lsls	r2, r3, #22
 8004c4e:	d4ef      	bmi.n	8004c30 <__smakebuf_r+0x18>
 8004c50:	f023 0303 	bic.w	r3, r3, #3
 8004c54:	f043 0302 	orr.w	r3, r3, #2
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	e7e3      	b.n	8004c24 <__smakebuf_r+0xc>
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <__smakebuf_r+0x7c>)
 8004c5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	6020      	str	r0, [r4, #0]
 8004c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c68:	81a3      	strh	r3, [r4, #12]
 8004c6a:	9b00      	ldr	r3, [sp, #0]
 8004c6c:	6163      	str	r3, [r4, #20]
 8004c6e:	9b01      	ldr	r3, [sp, #4]
 8004c70:	6120      	str	r0, [r4, #16]
 8004c72:	b15b      	cbz	r3, 8004c8c <__smakebuf_r+0x74>
 8004c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c78:	4630      	mov	r0, r6
 8004c7a:	f000 fc05 	bl	8005488 <_isatty_r>
 8004c7e:	b128      	cbz	r0, 8004c8c <__smakebuf_r+0x74>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	431d      	orrs	r5, r3
 8004c90:	81a5      	strh	r5, [r4, #12]
 8004c92:	e7cd      	b.n	8004c30 <__smakebuf_r+0x18>
 8004c94:	08004a85 	.word	0x08004a85

08004c98 <_free_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	d045      	beq.n	8004d2c <_free_r+0x94>
 8004ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ca4:	1f0c      	subs	r4, r1, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bfb8      	it	lt
 8004caa:	18e4      	addlt	r4, r4, r3
 8004cac:	f000 fc0e 	bl	80054cc <__malloc_lock>
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <_free_r+0x98>)
 8004cb2:	6813      	ldr	r3, [r2, #0]
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	b933      	cbnz	r3, 8004cc6 <_free_r+0x2e>
 8004cb8:	6063      	str	r3, [r4, #4]
 8004cba:	6014      	str	r4, [r2, #0]
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cc2:	f000 bc04 	b.w	80054ce <__malloc_unlock>
 8004cc6:	42a3      	cmp	r3, r4
 8004cc8:	d90c      	bls.n	8004ce4 <_free_r+0x4c>
 8004cca:	6821      	ldr	r1, [r4, #0]
 8004ccc:	1862      	adds	r2, r4, r1
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	bf04      	itt	eq
 8004cd2:	681a      	ldreq	r2, [r3, #0]
 8004cd4:	685b      	ldreq	r3, [r3, #4]
 8004cd6:	6063      	str	r3, [r4, #4]
 8004cd8:	bf04      	itt	eq
 8004cda:	1852      	addeq	r2, r2, r1
 8004cdc:	6022      	streq	r2, [r4, #0]
 8004cde:	6004      	str	r4, [r0, #0]
 8004ce0:	e7ec      	b.n	8004cbc <_free_r+0x24>
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	b10a      	cbz	r2, 8004cec <_free_r+0x54>
 8004ce8:	42a2      	cmp	r2, r4
 8004cea:	d9fa      	bls.n	8004ce2 <_free_r+0x4a>
 8004cec:	6819      	ldr	r1, [r3, #0]
 8004cee:	1858      	adds	r0, r3, r1
 8004cf0:	42a0      	cmp	r0, r4
 8004cf2:	d10b      	bne.n	8004d0c <_free_r+0x74>
 8004cf4:	6820      	ldr	r0, [r4, #0]
 8004cf6:	4401      	add	r1, r0
 8004cf8:	1858      	adds	r0, r3, r1
 8004cfa:	4282      	cmp	r2, r0
 8004cfc:	6019      	str	r1, [r3, #0]
 8004cfe:	d1dd      	bne.n	8004cbc <_free_r+0x24>
 8004d00:	6810      	ldr	r0, [r2, #0]
 8004d02:	6852      	ldr	r2, [r2, #4]
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	4401      	add	r1, r0
 8004d08:	6019      	str	r1, [r3, #0]
 8004d0a:	e7d7      	b.n	8004cbc <_free_r+0x24>
 8004d0c:	d902      	bls.n	8004d14 <_free_r+0x7c>
 8004d0e:	230c      	movs	r3, #12
 8004d10:	602b      	str	r3, [r5, #0]
 8004d12:	e7d3      	b.n	8004cbc <_free_r+0x24>
 8004d14:	6820      	ldr	r0, [r4, #0]
 8004d16:	1821      	adds	r1, r4, r0
 8004d18:	428a      	cmp	r2, r1
 8004d1a:	bf04      	itt	eq
 8004d1c:	6811      	ldreq	r1, [r2, #0]
 8004d1e:	6852      	ldreq	r2, [r2, #4]
 8004d20:	6062      	str	r2, [r4, #4]
 8004d22:	bf04      	itt	eq
 8004d24:	1809      	addeq	r1, r1, r0
 8004d26:	6021      	streq	r1, [r4, #0]
 8004d28:	605c      	str	r4, [r3, #4]
 8004d2a:	e7c7      	b.n	8004cbc <_free_r+0x24>
 8004d2c:	bd38      	pop	{r3, r4, r5, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000090 	.word	0x20000090

08004d34 <_malloc_r>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	1ccd      	adds	r5, r1, #3
 8004d38:	f025 0503 	bic.w	r5, r5, #3
 8004d3c:	3508      	adds	r5, #8
 8004d3e:	2d0c      	cmp	r5, #12
 8004d40:	bf38      	it	cc
 8004d42:	250c      	movcc	r5, #12
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	4606      	mov	r6, r0
 8004d48:	db01      	blt.n	8004d4e <_malloc_r+0x1a>
 8004d4a:	42a9      	cmp	r1, r5
 8004d4c:	d903      	bls.n	8004d56 <_malloc_r+0x22>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	6033      	str	r3, [r6, #0]
 8004d52:	2000      	movs	r0, #0
 8004d54:	bd70      	pop	{r4, r5, r6, pc}
 8004d56:	f000 fbb9 	bl	80054cc <__malloc_lock>
 8004d5a:	4a21      	ldr	r2, [pc, #132]	; (8004de0 <_malloc_r+0xac>)
 8004d5c:	6814      	ldr	r4, [r2, #0]
 8004d5e:	4621      	mov	r1, r4
 8004d60:	b991      	cbnz	r1, 8004d88 <_malloc_r+0x54>
 8004d62:	4c20      	ldr	r4, [pc, #128]	; (8004de4 <_malloc_r+0xb0>)
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	b91b      	cbnz	r3, 8004d70 <_malloc_r+0x3c>
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f000 fb05 	bl	8005378 <_sbrk_r>
 8004d6e:	6020      	str	r0, [r4, #0]
 8004d70:	4629      	mov	r1, r5
 8004d72:	4630      	mov	r0, r6
 8004d74:	f000 fb00 	bl	8005378 <_sbrk_r>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d124      	bne.n	8004dc6 <_malloc_r+0x92>
 8004d7c:	230c      	movs	r3, #12
 8004d7e:	6033      	str	r3, [r6, #0]
 8004d80:	4630      	mov	r0, r6
 8004d82:	f000 fba4 	bl	80054ce <__malloc_unlock>
 8004d86:	e7e4      	b.n	8004d52 <_malloc_r+0x1e>
 8004d88:	680b      	ldr	r3, [r1, #0]
 8004d8a:	1b5b      	subs	r3, r3, r5
 8004d8c:	d418      	bmi.n	8004dc0 <_malloc_r+0x8c>
 8004d8e:	2b0b      	cmp	r3, #11
 8004d90:	d90f      	bls.n	8004db2 <_malloc_r+0x7e>
 8004d92:	600b      	str	r3, [r1, #0]
 8004d94:	50cd      	str	r5, [r1, r3]
 8004d96:	18cc      	adds	r4, r1, r3
 8004d98:	4630      	mov	r0, r6
 8004d9a:	f000 fb98 	bl	80054ce <__malloc_unlock>
 8004d9e:	f104 000b 	add.w	r0, r4, #11
 8004da2:	1d23      	adds	r3, r4, #4
 8004da4:	f020 0007 	bic.w	r0, r0, #7
 8004da8:	1ac3      	subs	r3, r0, r3
 8004daa:	d0d3      	beq.n	8004d54 <_malloc_r+0x20>
 8004dac:	425a      	negs	r2, r3
 8004dae:	50e2      	str	r2, [r4, r3]
 8004db0:	e7d0      	b.n	8004d54 <_malloc_r+0x20>
 8004db2:	428c      	cmp	r4, r1
 8004db4:	684b      	ldr	r3, [r1, #4]
 8004db6:	bf16      	itet	ne
 8004db8:	6063      	strne	r3, [r4, #4]
 8004dba:	6013      	streq	r3, [r2, #0]
 8004dbc:	460c      	movne	r4, r1
 8004dbe:	e7eb      	b.n	8004d98 <_malloc_r+0x64>
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	6849      	ldr	r1, [r1, #4]
 8004dc4:	e7cc      	b.n	8004d60 <_malloc_r+0x2c>
 8004dc6:	1cc4      	adds	r4, r0, #3
 8004dc8:	f024 0403 	bic.w	r4, r4, #3
 8004dcc:	42a0      	cmp	r0, r4
 8004dce:	d005      	beq.n	8004ddc <_malloc_r+0xa8>
 8004dd0:	1a21      	subs	r1, r4, r0
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f000 fad0 	bl	8005378 <_sbrk_r>
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d0cf      	beq.n	8004d7c <_malloc_r+0x48>
 8004ddc:	6025      	str	r5, [r4, #0]
 8004dde:	e7db      	b.n	8004d98 <_malloc_r+0x64>
 8004de0:	20000090 	.word	0x20000090
 8004de4:	20000094 	.word	0x20000094

08004de8 <__sfputc_r>:
 8004de8:	6893      	ldr	r3, [r2, #8]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	b410      	push	{r4}
 8004df0:	6093      	str	r3, [r2, #8]
 8004df2:	da08      	bge.n	8004e06 <__sfputc_r+0x1e>
 8004df4:	6994      	ldr	r4, [r2, #24]
 8004df6:	42a3      	cmp	r3, r4
 8004df8:	db01      	blt.n	8004dfe <__sfputc_r+0x16>
 8004dfa:	290a      	cmp	r1, #10
 8004dfc:	d103      	bne.n	8004e06 <__sfputc_r+0x1e>
 8004dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e02:	f7ff bcab 	b.w	800475c <__swbuf_r>
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	1c58      	adds	r0, r3, #1
 8004e0a:	6010      	str	r0, [r2, #0]
 8004e0c:	7019      	strb	r1, [r3, #0]
 8004e0e:	4608      	mov	r0, r1
 8004e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <__sfputs_r>:
 8004e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e18:	4606      	mov	r6, r0
 8004e1a:	460f      	mov	r7, r1
 8004e1c:	4614      	mov	r4, r2
 8004e1e:	18d5      	adds	r5, r2, r3
 8004e20:	42ac      	cmp	r4, r5
 8004e22:	d101      	bne.n	8004e28 <__sfputs_r+0x12>
 8004e24:	2000      	movs	r0, #0
 8004e26:	e007      	b.n	8004e38 <__sfputs_r+0x22>
 8004e28:	463a      	mov	r2, r7
 8004e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f7ff ffda 	bl	8004de8 <__sfputc_r>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d1f3      	bne.n	8004e20 <__sfputs_r+0xa>
 8004e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e3c <_vfiprintf_r>:
 8004e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e40:	460c      	mov	r4, r1
 8004e42:	b09d      	sub	sp, #116	; 0x74
 8004e44:	4617      	mov	r7, r2
 8004e46:	461d      	mov	r5, r3
 8004e48:	4606      	mov	r6, r0
 8004e4a:	b118      	cbz	r0, 8004e54 <_vfiprintf_r+0x18>
 8004e4c:	6983      	ldr	r3, [r0, #24]
 8004e4e:	b90b      	cbnz	r3, 8004e54 <_vfiprintf_r+0x18>
 8004e50:	f7ff fe34 	bl	8004abc <__sinit>
 8004e54:	4b7c      	ldr	r3, [pc, #496]	; (8005048 <_vfiprintf_r+0x20c>)
 8004e56:	429c      	cmp	r4, r3
 8004e58:	d158      	bne.n	8004f0c <_vfiprintf_r+0xd0>
 8004e5a:	6874      	ldr	r4, [r6, #4]
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	0718      	lsls	r0, r3, #28
 8004e60:	d55e      	bpl.n	8004f20 <_vfiprintf_r+0xe4>
 8004e62:	6923      	ldr	r3, [r4, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d05b      	beq.n	8004f20 <_vfiprintf_r+0xe4>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e6c:	2320      	movs	r3, #32
 8004e6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e72:	2330      	movs	r3, #48	; 0x30
 8004e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e78:	9503      	str	r5, [sp, #12]
 8004e7a:	f04f 0b01 	mov.w	fp, #1
 8004e7e:	46b8      	mov	r8, r7
 8004e80:	4645      	mov	r5, r8
 8004e82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e86:	b10b      	cbz	r3, 8004e8c <_vfiprintf_r+0x50>
 8004e88:	2b25      	cmp	r3, #37	; 0x25
 8004e8a:	d154      	bne.n	8004f36 <_vfiprintf_r+0xfa>
 8004e8c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004e90:	d00b      	beq.n	8004eaa <_vfiprintf_r+0x6e>
 8004e92:	4653      	mov	r3, sl
 8004e94:	463a      	mov	r2, r7
 8004e96:	4621      	mov	r1, r4
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f7ff ffbc 	bl	8004e16 <__sfputs_r>
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	f000 80c2 	beq.w	8005028 <_vfiprintf_r+0x1ec>
 8004ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea6:	4453      	add	r3, sl
 8004ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eaa:	f898 3000 	ldrb.w	r3, [r8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 80ba 	beq.w	8005028 <_vfiprintf_r+0x1ec>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ebe:	9304      	str	r3, [sp, #16]
 8004ec0:	9307      	str	r3, [sp, #28]
 8004ec2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ec6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ec8:	46a8      	mov	r8, r5
 8004eca:	2205      	movs	r2, #5
 8004ecc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004ed0:	485e      	ldr	r0, [pc, #376]	; (800504c <_vfiprintf_r+0x210>)
 8004ed2:	f7fb f985 	bl	80001e0 <memchr>
 8004ed6:	9b04      	ldr	r3, [sp, #16]
 8004ed8:	bb78      	cbnz	r0, 8004f3a <_vfiprintf_r+0xfe>
 8004eda:	06d9      	lsls	r1, r3, #27
 8004edc:	bf44      	itt	mi
 8004ede:	2220      	movmi	r2, #32
 8004ee0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ee4:	071a      	lsls	r2, r3, #28
 8004ee6:	bf44      	itt	mi
 8004ee8:	222b      	movmi	r2, #43	; 0x2b
 8004eea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004eee:	782a      	ldrb	r2, [r5, #0]
 8004ef0:	2a2a      	cmp	r2, #42	; 0x2a
 8004ef2:	d02a      	beq.n	8004f4a <_vfiprintf_r+0x10e>
 8004ef4:	9a07      	ldr	r2, [sp, #28]
 8004ef6:	46a8      	mov	r8, r5
 8004ef8:	2000      	movs	r0, #0
 8004efa:	250a      	movs	r5, #10
 8004efc:	4641      	mov	r1, r8
 8004efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f02:	3b30      	subs	r3, #48	; 0x30
 8004f04:	2b09      	cmp	r3, #9
 8004f06:	d969      	bls.n	8004fdc <_vfiprintf_r+0x1a0>
 8004f08:	b360      	cbz	r0, 8004f64 <_vfiprintf_r+0x128>
 8004f0a:	e024      	b.n	8004f56 <_vfiprintf_r+0x11a>
 8004f0c:	4b50      	ldr	r3, [pc, #320]	; (8005050 <_vfiprintf_r+0x214>)
 8004f0e:	429c      	cmp	r4, r3
 8004f10:	d101      	bne.n	8004f16 <_vfiprintf_r+0xda>
 8004f12:	68b4      	ldr	r4, [r6, #8]
 8004f14:	e7a2      	b.n	8004e5c <_vfiprintf_r+0x20>
 8004f16:	4b4f      	ldr	r3, [pc, #316]	; (8005054 <_vfiprintf_r+0x218>)
 8004f18:	429c      	cmp	r4, r3
 8004f1a:	bf08      	it	eq
 8004f1c:	68f4      	ldreq	r4, [r6, #12]
 8004f1e:	e79d      	b.n	8004e5c <_vfiprintf_r+0x20>
 8004f20:	4621      	mov	r1, r4
 8004f22:	4630      	mov	r0, r6
 8004f24:	f7ff fc6c 	bl	8004800 <__swsetup_r>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d09d      	beq.n	8004e68 <_vfiprintf_r+0x2c>
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f30:	b01d      	add	sp, #116	; 0x74
 8004f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f36:	46a8      	mov	r8, r5
 8004f38:	e7a2      	b.n	8004e80 <_vfiprintf_r+0x44>
 8004f3a:	4a44      	ldr	r2, [pc, #272]	; (800504c <_vfiprintf_r+0x210>)
 8004f3c:	1a80      	subs	r0, r0, r2
 8004f3e:	fa0b f000 	lsl.w	r0, fp, r0
 8004f42:	4318      	orrs	r0, r3
 8004f44:	9004      	str	r0, [sp, #16]
 8004f46:	4645      	mov	r5, r8
 8004f48:	e7be      	b.n	8004ec8 <_vfiprintf_r+0x8c>
 8004f4a:	9a03      	ldr	r2, [sp, #12]
 8004f4c:	1d11      	adds	r1, r2, #4
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	9103      	str	r1, [sp, #12]
 8004f52:	2a00      	cmp	r2, #0
 8004f54:	db01      	blt.n	8004f5a <_vfiprintf_r+0x11e>
 8004f56:	9207      	str	r2, [sp, #28]
 8004f58:	e004      	b.n	8004f64 <_vfiprintf_r+0x128>
 8004f5a:	4252      	negs	r2, r2
 8004f5c:	f043 0302 	orr.w	r3, r3, #2
 8004f60:	9207      	str	r2, [sp, #28]
 8004f62:	9304      	str	r3, [sp, #16]
 8004f64:	f898 3000 	ldrb.w	r3, [r8]
 8004f68:	2b2e      	cmp	r3, #46	; 0x2e
 8004f6a:	d10e      	bne.n	8004f8a <_vfiprintf_r+0x14e>
 8004f6c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004f70:	2b2a      	cmp	r3, #42	; 0x2a
 8004f72:	d138      	bne.n	8004fe6 <_vfiprintf_r+0x1aa>
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	1d1a      	adds	r2, r3, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	9203      	str	r2, [sp, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bfb8      	it	lt
 8004f80:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f84:	f108 0802 	add.w	r8, r8, #2
 8004f88:	9305      	str	r3, [sp, #20]
 8004f8a:	4d33      	ldr	r5, [pc, #204]	; (8005058 <_vfiprintf_r+0x21c>)
 8004f8c:	f898 1000 	ldrb.w	r1, [r8]
 8004f90:	2203      	movs	r2, #3
 8004f92:	4628      	mov	r0, r5
 8004f94:	f7fb f924 	bl	80001e0 <memchr>
 8004f98:	b140      	cbz	r0, 8004fac <_vfiprintf_r+0x170>
 8004f9a:	2340      	movs	r3, #64	; 0x40
 8004f9c:	1b40      	subs	r0, r0, r5
 8004f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8004fa2:	9b04      	ldr	r3, [sp, #16]
 8004fa4:	4303      	orrs	r3, r0
 8004fa6:	f108 0801 	add.w	r8, r8, #1
 8004faa:	9304      	str	r3, [sp, #16]
 8004fac:	f898 1000 	ldrb.w	r1, [r8]
 8004fb0:	482a      	ldr	r0, [pc, #168]	; (800505c <_vfiprintf_r+0x220>)
 8004fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fb6:	2206      	movs	r2, #6
 8004fb8:	f108 0701 	add.w	r7, r8, #1
 8004fbc:	f7fb f910 	bl	80001e0 <memchr>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d037      	beq.n	8005034 <_vfiprintf_r+0x1f8>
 8004fc4:	4b26      	ldr	r3, [pc, #152]	; (8005060 <_vfiprintf_r+0x224>)
 8004fc6:	bb1b      	cbnz	r3, 8005010 <_vfiprintf_r+0x1d4>
 8004fc8:	9b03      	ldr	r3, [sp, #12]
 8004fca:	3307      	adds	r3, #7
 8004fcc:	f023 0307 	bic.w	r3, r3, #7
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	9303      	str	r3, [sp, #12]
 8004fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd6:	444b      	add	r3, r9
 8004fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fda:	e750      	b.n	8004e7e <_vfiprintf_r+0x42>
 8004fdc:	fb05 3202 	mla	r2, r5, r2, r3
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	4688      	mov	r8, r1
 8004fe4:	e78a      	b.n	8004efc <_vfiprintf_r+0xc0>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f108 0801 	add.w	r8, r8, #1
 8004fec:	9305      	str	r3, [sp, #20]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	250a      	movs	r5, #10
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ff8:	3a30      	subs	r2, #48	; 0x30
 8004ffa:	2a09      	cmp	r2, #9
 8004ffc:	d903      	bls.n	8005006 <_vfiprintf_r+0x1ca>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0c3      	beq.n	8004f8a <_vfiprintf_r+0x14e>
 8005002:	9105      	str	r1, [sp, #20]
 8005004:	e7c1      	b.n	8004f8a <_vfiprintf_r+0x14e>
 8005006:	fb05 2101 	mla	r1, r5, r1, r2
 800500a:	2301      	movs	r3, #1
 800500c:	4680      	mov	r8, r0
 800500e:	e7f0      	b.n	8004ff2 <_vfiprintf_r+0x1b6>
 8005010:	ab03      	add	r3, sp, #12
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	4622      	mov	r2, r4
 8005016:	4b13      	ldr	r3, [pc, #76]	; (8005064 <_vfiprintf_r+0x228>)
 8005018:	a904      	add	r1, sp, #16
 800501a:	4630      	mov	r0, r6
 800501c:	f3af 8000 	nop.w
 8005020:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005024:	4681      	mov	r9, r0
 8005026:	d1d5      	bne.n	8004fd4 <_vfiprintf_r+0x198>
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	065b      	lsls	r3, r3, #25
 800502c:	f53f af7e 	bmi.w	8004f2c <_vfiprintf_r+0xf0>
 8005030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005032:	e77d      	b.n	8004f30 <_vfiprintf_r+0xf4>
 8005034:	ab03      	add	r3, sp, #12
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	4622      	mov	r2, r4
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <_vfiprintf_r+0x228>)
 800503c:	a904      	add	r1, sp, #16
 800503e:	4630      	mov	r0, r6
 8005040:	f000 f888 	bl	8005154 <_printf_i>
 8005044:	e7ec      	b.n	8005020 <_vfiprintf_r+0x1e4>
 8005046:	bf00      	nop
 8005048:	080055b4 	.word	0x080055b4
 800504c:	080055f4 	.word	0x080055f4
 8005050:	080055d4 	.word	0x080055d4
 8005054:	08005594 	.word	0x08005594
 8005058:	080055fa 	.word	0x080055fa
 800505c:	080055fe 	.word	0x080055fe
 8005060:	00000000 	.word	0x00000000
 8005064:	08004e17 	.word	0x08004e17

08005068 <_printf_common>:
 8005068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	4691      	mov	r9, r2
 800506e:	461f      	mov	r7, r3
 8005070:	688a      	ldr	r2, [r1, #8]
 8005072:	690b      	ldr	r3, [r1, #16]
 8005074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005078:	4293      	cmp	r3, r2
 800507a:	bfb8      	it	lt
 800507c:	4613      	movlt	r3, r2
 800507e:	f8c9 3000 	str.w	r3, [r9]
 8005082:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005086:	4606      	mov	r6, r0
 8005088:	460c      	mov	r4, r1
 800508a:	b112      	cbz	r2, 8005092 <_printf_common+0x2a>
 800508c:	3301      	adds	r3, #1
 800508e:	f8c9 3000 	str.w	r3, [r9]
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	0699      	lsls	r1, r3, #26
 8005096:	bf42      	ittt	mi
 8005098:	f8d9 3000 	ldrmi.w	r3, [r9]
 800509c:	3302      	addmi	r3, #2
 800509e:	f8c9 3000 	strmi.w	r3, [r9]
 80050a2:	6825      	ldr	r5, [r4, #0]
 80050a4:	f015 0506 	ands.w	r5, r5, #6
 80050a8:	d107      	bne.n	80050ba <_printf_common+0x52>
 80050aa:	f104 0a19 	add.w	sl, r4, #25
 80050ae:	68e3      	ldr	r3, [r4, #12]
 80050b0:	f8d9 2000 	ldr.w	r2, [r9]
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	42ab      	cmp	r3, r5
 80050b8:	dc28      	bgt.n	800510c <_printf_common+0xa4>
 80050ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80050be:	6822      	ldr	r2, [r4, #0]
 80050c0:	3300      	adds	r3, #0
 80050c2:	bf18      	it	ne
 80050c4:	2301      	movne	r3, #1
 80050c6:	0692      	lsls	r2, r2, #26
 80050c8:	d42d      	bmi.n	8005126 <_printf_common+0xbe>
 80050ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050ce:	4639      	mov	r1, r7
 80050d0:	4630      	mov	r0, r6
 80050d2:	47c0      	blx	r8
 80050d4:	3001      	adds	r0, #1
 80050d6:	d020      	beq.n	800511a <_printf_common+0xb2>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	68e5      	ldr	r5, [r4, #12]
 80050dc:	f8d9 2000 	ldr.w	r2, [r9]
 80050e0:	f003 0306 	and.w	r3, r3, #6
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	bf08      	it	eq
 80050e8:	1aad      	subeq	r5, r5, r2
 80050ea:	68a3      	ldr	r3, [r4, #8]
 80050ec:	6922      	ldr	r2, [r4, #16]
 80050ee:	bf0c      	ite	eq
 80050f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050f4:	2500      	movne	r5, #0
 80050f6:	4293      	cmp	r3, r2
 80050f8:	bfc4      	itt	gt
 80050fa:	1a9b      	subgt	r3, r3, r2
 80050fc:	18ed      	addgt	r5, r5, r3
 80050fe:	f04f 0900 	mov.w	r9, #0
 8005102:	341a      	adds	r4, #26
 8005104:	454d      	cmp	r5, r9
 8005106:	d11a      	bne.n	800513e <_printf_common+0xd6>
 8005108:	2000      	movs	r0, #0
 800510a:	e008      	b.n	800511e <_printf_common+0xb6>
 800510c:	2301      	movs	r3, #1
 800510e:	4652      	mov	r2, sl
 8005110:	4639      	mov	r1, r7
 8005112:	4630      	mov	r0, r6
 8005114:	47c0      	blx	r8
 8005116:	3001      	adds	r0, #1
 8005118:	d103      	bne.n	8005122 <_printf_common+0xba>
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005122:	3501      	adds	r5, #1
 8005124:	e7c3      	b.n	80050ae <_printf_common+0x46>
 8005126:	18e1      	adds	r1, r4, r3
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	2030      	movs	r0, #48	; 0x30
 800512c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005130:	4422      	add	r2, r4
 8005132:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005136:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800513a:	3302      	adds	r3, #2
 800513c:	e7c5      	b.n	80050ca <_printf_common+0x62>
 800513e:	2301      	movs	r3, #1
 8005140:	4622      	mov	r2, r4
 8005142:	4639      	mov	r1, r7
 8005144:	4630      	mov	r0, r6
 8005146:	47c0      	blx	r8
 8005148:	3001      	adds	r0, #1
 800514a:	d0e6      	beq.n	800511a <_printf_common+0xb2>
 800514c:	f109 0901 	add.w	r9, r9, #1
 8005150:	e7d8      	b.n	8005104 <_printf_common+0x9c>
	...

08005154 <_printf_i>:
 8005154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005158:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800515c:	460c      	mov	r4, r1
 800515e:	7e09      	ldrb	r1, [r1, #24]
 8005160:	b085      	sub	sp, #20
 8005162:	296e      	cmp	r1, #110	; 0x6e
 8005164:	4617      	mov	r7, r2
 8005166:	4606      	mov	r6, r0
 8005168:	4698      	mov	r8, r3
 800516a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800516c:	f000 80b3 	beq.w	80052d6 <_printf_i+0x182>
 8005170:	d822      	bhi.n	80051b8 <_printf_i+0x64>
 8005172:	2963      	cmp	r1, #99	; 0x63
 8005174:	d036      	beq.n	80051e4 <_printf_i+0x90>
 8005176:	d80a      	bhi.n	800518e <_printf_i+0x3a>
 8005178:	2900      	cmp	r1, #0
 800517a:	f000 80b9 	beq.w	80052f0 <_printf_i+0x19c>
 800517e:	2958      	cmp	r1, #88	; 0x58
 8005180:	f000 8083 	beq.w	800528a <_printf_i+0x136>
 8005184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005188:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800518c:	e032      	b.n	80051f4 <_printf_i+0xa0>
 800518e:	2964      	cmp	r1, #100	; 0x64
 8005190:	d001      	beq.n	8005196 <_printf_i+0x42>
 8005192:	2969      	cmp	r1, #105	; 0x69
 8005194:	d1f6      	bne.n	8005184 <_printf_i+0x30>
 8005196:	6820      	ldr	r0, [r4, #0]
 8005198:	6813      	ldr	r3, [r2, #0]
 800519a:	0605      	lsls	r5, r0, #24
 800519c:	f103 0104 	add.w	r1, r3, #4
 80051a0:	d52a      	bpl.n	80051f8 <_printf_i+0xa4>
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6011      	str	r1, [r2, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	da03      	bge.n	80051b2 <_printf_i+0x5e>
 80051aa:	222d      	movs	r2, #45	; 0x2d
 80051ac:	425b      	negs	r3, r3
 80051ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80051b2:	486f      	ldr	r0, [pc, #444]	; (8005370 <_printf_i+0x21c>)
 80051b4:	220a      	movs	r2, #10
 80051b6:	e039      	b.n	800522c <_printf_i+0xd8>
 80051b8:	2973      	cmp	r1, #115	; 0x73
 80051ba:	f000 809d 	beq.w	80052f8 <_printf_i+0x1a4>
 80051be:	d808      	bhi.n	80051d2 <_printf_i+0x7e>
 80051c0:	296f      	cmp	r1, #111	; 0x6f
 80051c2:	d020      	beq.n	8005206 <_printf_i+0xb2>
 80051c4:	2970      	cmp	r1, #112	; 0x70
 80051c6:	d1dd      	bne.n	8005184 <_printf_i+0x30>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	f043 0320 	orr.w	r3, r3, #32
 80051ce:	6023      	str	r3, [r4, #0]
 80051d0:	e003      	b.n	80051da <_printf_i+0x86>
 80051d2:	2975      	cmp	r1, #117	; 0x75
 80051d4:	d017      	beq.n	8005206 <_printf_i+0xb2>
 80051d6:	2978      	cmp	r1, #120	; 0x78
 80051d8:	d1d4      	bne.n	8005184 <_printf_i+0x30>
 80051da:	2378      	movs	r3, #120	; 0x78
 80051dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051e0:	4864      	ldr	r0, [pc, #400]	; (8005374 <_printf_i+0x220>)
 80051e2:	e055      	b.n	8005290 <_printf_i+0x13c>
 80051e4:	6813      	ldr	r3, [r2, #0]
 80051e6:	1d19      	adds	r1, r3, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6011      	str	r1, [r2, #0]
 80051ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f4:	2301      	movs	r3, #1
 80051f6:	e08c      	b.n	8005312 <_printf_i+0x1be>
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6011      	str	r1, [r2, #0]
 80051fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005200:	bf18      	it	ne
 8005202:	b21b      	sxthne	r3, r3
 8005204:	e7cf      	b.n	80051a6 <_printf_i+0x52>
 8005206:	6813      	ldr	r3, [r2, #0]
 8005208:	6825      	ldr	r5, [r4, #0]
 800520a:	1d18      	adds	r0, r3, #4
 800520c:	6010      	str	r0, [r2, #0]
 800520e:	0628      	lsls	r0, r5, #24
 8005210:	d501      	bpl.n	8005216 <_printf_i+0xc2>
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	e002      	b.n	800521c <_printf_i+0xc8>
 8005216:	0668      	lsls	r0, r5, #25
 8005218:	d5fb      	bpl.n	8005212 <_printf_i+0xbe>
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	4854      	ldr	r0, [pc, #336]	; (8005370 <_printf_i+0x21c>)
 800521e:	296f      	cmp	r1, #111	; 0x6f
 8005220:	bf14      	ite	ne
 8005222:	220a      	movne	r2, #10
 8005224:	2208      	moveq	r2, #8
 8005226:	2100      	movs	r1, #0
 8005228:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800522c:	6865      	ldr	r5, [r4, #4]
 800522e:	60a5      	str	r5, [r4, #8]
 8005230:	2d00      	cmp	r5, #0
 8005232:	f2c0 8095 	blt.w	8005360 <_printf_i+0x20c>
 8005236:	6821      	ldr	r1, [r4, #0]
 8005238:	f021 0104 	bic.w	r1, r1, #4
 800523c:	6021      	str	r1, [r4, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d13d      	bne.n	80052be <_printf_i+0x16a>
 8005242:	2d00      	cmp	r5, #0
 8005244:	f040 808e 	bne.w	8005364 <_printf_i+0x210>
 8005248:	4665      	mov	r5, ip
 800524a:	2a08      	cmp	r2, #8
 800524c:	d10b      	bne.n	8005266 <_printf_i+0x112>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	07db      	lsls	r3, r3, #31
 8005252:	d508      	bpl.n	8005266 <_printf_i+0x112>
 8005254:	6923      	ldr	r3, [r4, #16]
 8005256:	6862      	ldr	r2, [r4, #4]
 8005258:	429a      	cmp	r2, r3
 800525a:	bfde      	ittt	le
 800525c:	2330      	movle	r3, #48	; 0x30
 800525e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005262:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005266:	ebac 0305 	sub.w	r3, ip, r5
 800526a:	6123      	str	r3, [r4, #16]
 800526c:	f8cd 8000 	str.w	r8, [sp]
 8005270:	463b      	mov	r3, r7
 8005272:	aa03      	add	r2, sp, #12
 8005274:	4621      	mov	r1, r4
 8005276:	4630      	mov	r0, r6
 8005278:	f7ff fef6 	bl	8005068 <_printf_common>
 800527c:	3001      	adds	r0, #1
 800527e:	d14d      	bne.n	800531c <_printf_i+0x1c8>
 8005280:	f04f 30ff 	mov.w	r0, #4294967295
 8005284:	b005      	add	sp, #20
 8005286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800528a:	4839      	ldr	r0, [pc, #228]	; (8005370 <_printf_i+0x21c>)
 800528c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005290:	6813      	ldr	r3, [r2, #0]
 8005292:	6821      	ldr	r1, [r4, #0]
 8005294:	1d1d      	adds	r5, r3, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6015      	str	r5, [r2, #0]
 800529a:	060a      	lsls	r2, r1, #24
 800529c:	d50b      	bpl.n	80052b6 <_printf_i+0x162>
 800529e:	07ca      	lsls	r2, r1, #31
 80052a0:	bf44      	itt	mi
 80052a2:	f041 0120 	orrmi.w	r1, r1, #32
 80052a6:	6021      	strmi	r1, [r4, #0]
 80052a8:	b91b      	cbnz	r3, 80052b2 <_printf_i+0x15e>
 80052aa:	6822      	ldr	r2, [r4, #0]
 80052ac:	f022 0220 	bic.w	r2, r2, #32
 80052b0:	6022      	str	r2, [r4, #0]
 80052b2:	2210      	movs	r2, #16
 80052b4:	e7b7      	b.n	8005226 <_printf_i+0xd2>
 80052b6:	064d      	lsls	r5, r1, #25
 80052b8:	bf48      	it	mi
 80052ba:	b29b      	uxthmi	r3, r3
 80052bc:	e7ef      	b.n	800529e <_printf_i+0x14a>
 80052be:	4665      	mov	r5, ip
 80052c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80052c4:	fb02 3311 	mls	r3, r2, r1, r3
 80052c8:	5cc3      	ldrb	r3, [r0, r3]
 80052ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80052ce:	460b      	mov	r3, r1
 80052d0:	2900      	cmp	r1, #0
 80052d2:	d1f5      	bne.n	80052c0 <_printf_i+0x16c>
 80052d4:	e7b9      	b.n	800524a <_printf_i+0xf6>
 80052d6:	6813      	ldr	r3, [r2, #0]
 80052d8:	6825      	ldr	r5, [r4, #0]
 80052da:	6961      	ldr	r1, [r4, #20]
 80052dc:	1d18      	adds	r0, r3, #4
 80052de:	6010      	str	r0, [r2, #0]
 80052e0:	0628      	lsls	r0, r5, #24
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	d501      	bpl.n	80052ea <_printf_i+0x196>
 80052e6:	6019      	str	r1, [r3, #0]
 80052e8:	e002      	b.n	80052f0 <_printf_i+0x19c>
 80052ea:	066a      	lsls	r2, r5, #25
 80052ec:	d5fb      	bpl.n	80052e6 <_printf_i+0x192>
 80052ee:	8019      	strh	r1, [r3, #0]
 80052f0:	2300      	movs	r3, #0
 80052f2:	6123      	str	r3, [r4, #16]
 80052f4:	4665      	mov	r5, ip
 80052f6:	e7b9      	b.n	800526c <_printf_i+0x118>
 80052f8:	6813      	ldr	r3, [r2, #0]
 80052fa:	1d19      	adds	r1, r3, #4
 80052fc:	6011      	str	r1, [r2, #0]
 80052fe:	681d      	ldr	r5, [r3, #0]
 8005300:	6862      	ldr	r2, [r4, #4]
 8005302:	2100      	movs	r1, #0
 8005304:	4628      	mov	r0, r5
 8005306:	f7fa ff6b 	bl	80001e0 <memchr>
 800530a:	b108      	cbz	r0, 8005310 <_printf_i+0x1bc>
 800530c:	1b40      	subs	r0, r0, r5
 800530e:	6060      	str	r0, [r4, #4]
 8005310:	6863      	ldr	r3, [r4, #4]
 8005312:	6123      	str	r3, [r4, #16]
 8005314:	2300      	movs	r3, #0
 8005316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800531a:	e7a7      	b.n	800526c <_printf_i+0x118>
 800531c:	6923      	ldr	r3, [r4, #16]
 800531e:	462a      	mov	r2, r5
 8005320:	4639      	mov	r1, r7
 8005322:	4630      	mov	r0, r6
 8005324:	47c0      	blx	r8
 8005326:	3001      	adds	r0, #1
 8005328:	d0aa      	beq.n	8005280 <_printf_i+0x12c>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	079b      	lsls	r3, r3, #30
 800532e:	d413      	bmi.n	8005358 <_printf_i+0x204>
 8005330:	68e0      	ldr	r0, [r4, #12]
 8005332:	9b03      	ldr	r3, [sp, #12]
 8005334:	4298      	cmp	r0, r3
 8005336:	bfb8      	it	lt
 8005338:	4618      	movlt	r0, r3
 800533a:	e7a3      	b.n	8005284 <_printf_i+0x130>
 800533c:	2301      	movs	r3, #1
 800533e:	464a      	mov	r2, r9
 8005340:	4639      	mov	r1, r7
 8005342:	4630      	mov	r0, r6
 8005344:	47c0      	blx	r8
 8005346:	3001      	adds	r0, #1
 8005348:	d09a      	beq.n	8005280 <_printf_i+0x12c>
 800534a:	3501      	adds	r5, #1
 800534c:	68e3      	ldr	r3, [r4, #12]
 800534e:	9a03      	ldr	r2, [sp, #12]
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	42ab      	cmp	r3, r5
 8005354:	dcf2      	bgt.n	800533c <_printf_i+0x1e8>
 8005356:	e7eb      	b.n	8005330 <_printf_i+0x1dc>
 8005358:	2500      	movs	r5, #0
 800535a:	f104 0919 	add.w	r9, r4, #25
 800535e:	e7f5      	b.n	800534c <_printf_i+0x1f8>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1ac      	bne.n	80052be <_printf_i+0x16a>
 8005364:	7803      	ldrb	r3, [r0, #0]
 8005366:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800536a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800536e:	e76c      	b.n	800524a <_printf_i+0xf6>
 8005370:	08005605 	.word	0x08005605
 8005374:	08005616 	.word	0x08005616

08005378 <_sbrk_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4c06      	ldr	r4, [pc, #24]	; (8005394 <_sbrk_r+0x1c>)
 800537c:	2300      	movs	r3, #0
 800537e:	4605      	mov	r5, r0
 8005380:	4608      	mov	r0, r1
 8005382:	6023      	str	r3, [r4, #0]
 8005384:	f7fb fb14 	bl	80009b0 <_sbrk>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_sbrk_r+0x1a>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	b103      	cbz	r3, 8005392 <_sbrk_r+0x1a>
 8005390:	602b      	str	r3, [r5, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	20000244 	.word	0x20000244

08005398 <__sread>:
 8005398:	b510      	push	{r4, lr}
 800539a:	460c      	mov	r4, r1
 800539c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a0:	f000 f896 	bl	80054d0 <_read_r>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	bfab      	itete	ge
 80053a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053aa:	89a3      	ldrhlt	r3, [r4, #12]
 80053ac:	181b      	addge	r3, r3, r0
 80053ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053b2:	bfac      	ite	ge
 80053b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80053b6:	81a3      	strhlt	r3, [r4, #12]
 80053b8:	bd10      	pop	{r4, pc}

080053ba <__swrite>:
 80053ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053be:	461f      	mov	r7, r3
 80053c0:	898b      	ldrh	r3, [r1, #12]
 80053c2:	05db      	lsls	r3, r3, #23
 80053c4:	4605      	mov	r5, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	4616      	mov	r6, r2
 80053ca:	d505      	bpl.n	80053d8 <__swrite+0x1e>
 80053cc:	2302      	movs	r3, #2
 80053ce:	2200      	movs	r2, #0
 80053d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d4:	f000 f868 	bl	80054a8 <_lseek_r>
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e2:	81a3      	strh	r3, [r4, #12]
 80053e4:	4632      	mov	r2, r6
 80053e6:	463b      	mov	r3, r7
 80053e8:	4628      	mov	r0, r5
 80053ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053ee:	f000 b817 	b.w	8005420 <_write_r>

080053f2 <__sseek>:
 80053f2:	b510      	push	{r4, lr}
 80053f4:	460c      	mov	r4, r1
 80053f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fa:	f000 f855 	bl	80054a8 <_lseek_r>
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	bf15      	itete	ne
 8005404:	6560      	strne	r0, [r4, #84]	; 0x54
 8005406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800540a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800540e:	81a3      	strheq	r3, [r4, #12]
 8005410:	bf18      	it	ne
 8005412:	81a3      	strhne	r3, [r4, #12]
 8005414:	bd10      	pop	{r4, pc}

08005416 <__sclose>:
 8005416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541a:	f000 b813 	b.w	8005444 <_close_r>
	...

08005420 <_write_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4c07      	ldr	r4, [pc, #28]	; (8005440 <_write_r+0x20>)
 8005424:	4605      	mov	r5, r0
 8005426:	4608      	mov	r0, r1
 8005428:	4611      	mov	r1, r2
 800542a:	2200      	movs	r2, #0
 800542c:	6022      	str	r2, [r4, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	f7fb fa6d 	bl	800090e <_write>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d102      	bne.n	800543e <_write_r+0x1e>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	b103      	cbz	r3, 800543e <_write_r+0x1e>
 800543c:	602b      	str	r3, [r5, #0]
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	20000244 	.word	0x20000244

08005444 <_close_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4c06      	ldr	r4, [pc, #24]	; (8005460 <_close_r+0x1c>)
 8005448:	2300      	movs	r3, #0
 800544a:	4605      	mov	r5, r0
 800544c:	4608      	mov	r0, r1
 800544e:	6023      	str	r3, [r4, #0]
 8005450:	f7fb fa79 	bl	8000946 <_close>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_close_r+0x1a>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	b103      	cbz	r3, 800545e <_close_r+0x1a>
 800545c:	602b      	str	r3, [r5, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	20000244 	.word	0x20000244

08005464 <_fstat_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4c07      	ldr	r4, [pc, #28]	; (8005484 <_fstat_r+0x20>)
 8005468:	2300      	movs	r3, #0
 800546a:	4605      	mov	r5, r0
 800546c:	4608      	mov	r0, r1
 800546e:	4611      	mov	r1, r2
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	f7fb fa74 	bl	800095e <_fstat>
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	d102      	bne.n	8005480 <_fstat_r+0x1c>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	b103      	cbz	r3, 8005480 <_fstat_r+0x1c>
 800547e:	602b      	str	r3, [r5, #0]
 8005480:	bd38      	pop	{r3, r4, r5, pc}
 8005482:	bf00      	nop
 8005484:	20000244 	.word	0x20000244

08005488 <_isatty_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4c06      	ldr	r4, [pc, #24]	; (80054a4 <_isatty_r+0x1c>)
 800548c:	2300      	movs	r3, #0
 800548e:	4605      	mov	r5, r0
 8005490:	4608      	mov	r0, r1
 8005492:	6023      	str	r3, [r4, #0]
 8005494:	f7fb fa73 	bl	800097e <_isatty>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_isatty_r+0x1a>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_isatty_r+0x1a>
 80054a0:	602b      	str	r3, [r5, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	20000244 	.word	0x20000244

080054a8 <_lseek_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4c07      	ldr	r4, [pc, #28]	; (80054c8 <_lseek_r+0x20>)
 80054ac:	4605      	mov	r5, r0
 80054ae:	4608      	mov	r0, r1
 80054b0:	4611      	mov	r1, r2
 80054b2:	2200      	movs	r2, #0
 80054b4:	6022      	str	r2, [r4, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f7fb fa6c 	bl	8000994 <_lseek>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_lseek_r+0x1e>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_lseek_r+0x1e>
 80054c4:	602b      	str	r3, [r5, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	20000244 	.word	0x20000244

080054cc <__malloc_lock>:
 80054cc:	4770      	bx	lr

080054ce <__malloc_unlock>:
 80054ce:	4770      	bx	lr

080054d0 <_read_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4c07      	ldr	r4, [pc, #28]	; (80054f0 <_read_r+0x20>)
 80054d4:	4605      	mov	r5, r0
 80054d6:	4608      	mov	r0, r1
 80054d8:	4611      	mov	r1, r2
 80054da:	2200      	movs	r2, #0
 80054dc:	6022      	str	r2, [r4, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	f7fb f9f8 	bl	80008d4 <_read>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_read_r+0x1e>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_read_r+0x1e>
 80054ec:	602b      	str	r3, [r5, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	20000244 	.word	0x20000244

080054f4 <_init>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	bf00      	nop
 80054f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fa:	bc08      	pop	{r3}
 80054fc:	469e      	mov	lr, r3
 80054fe:	4770      	bx	lr

08005500 <_fini>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr
